$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$AC @
$XC ~`

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta3.Linguistics

    ---------------------------------------------------------







         Title        :  Idioms in Rosetta

         Author       :  Andre@' Schenk









         Doc.Nr       :  0087

         Date         :  19/08/86

         Status       :  Concept

         Supersedes   :  

         Distribution :  Rosetta

         Clearance    :  Project

         Keywords     :  Idioms
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Copyright (c) Nederlandse Philips Bedrijven B.V.

$ph Rosetta          Doc.nr: 0087                    date:19/08/86
$LD 4
$CD 11
$SC %&
$NP 1
$C1 Introduction
$ This paper is a revised version of document 0087. There is a major difference
between this version and the previous one; while the old paper discussed idioms
in a Rosetta2 framework, this one proposes a treatment within a Rosetta3
grammar. The first part gives an outline of what an idiom is. The next section
deals with the format in which they can occur. Then there is a section on the
internal structure of idioms after which some ways to classify idioms are
given. In the last section the treatment of idioms will be discussed. Here two
variants of the verbpattern rules, that construct the idiom, are given. A
choice has to be made between these two variants. In appendix A a list is given
of idiomatic structures in Dutch and English. Appendix B gives some examples of
internal structures of idioms. Appendix C presents example derivations of
idiomatic sentences. Appendix D consists of examples of M-rules that are
necessary for idioms.$ 

$C1 Characteristics of idioms, metaphors and semi-idioms
$ An informal description of idioms is the following:$
$ An idiom consists of a number of words in a sentence; the meaning of the
idiom cannot be derived from the parts that make up the idiom.$ 

$ It is hard to give a good definition of idioms. To do so one should be able
to distinguish idioms from metaphors and semi-idioms, which are somewhat
different in their syntactic and semantic behaviour.$ 

$ Below characteristics of the three types will be given, but there remain
several borderline cases.$

$ Idiom:$
$ i) There is no apparent relation between elements of idioms and the meaning.
For example in 'kick the bucket' analysing 'kick', 'the' and 'bucket'
seperately does not lead to the meaning of the whole idiom which is 'die'.$ 
$ ii) In nearly every case a word that is part of an idiom cannot be replaced
by another word. There are exceptions, cf. 'hit the sack' and 'hit the hay'.
Here words in idioms can be replaced by elements of an enumerable class of
words, cf. the non-existence of idiomatic 'hit the matrass' and 'hit the bed'.$
$ iii) Idioms sometimes cannot be subject to certain syntactic operations
though literal constructions can, for example 'the bucket was kicked by John'
is non-idiomatic only.$ 
$ iv) Parts of an idiom have no meaning separately; the normal compositional
semantics does not apply to these parts. For example in 'Pete lends the girl a
hand' and 'Pete lends the girl a book', the Aktionsart of the idiomatic
sentence is activity and of the non-idiomatic sentence it is accomplishment,
while the form of the two is the same.$ 
$ v) If a modifier in a contruct modifies the construct as a whole then if it
has the other characteristics, this construct is an idiom. For example 'weinig'
in 'hij heeft weinig kaas gegeten van wiskunde' modifies the whole expression
(cf. he knows little about mathematics).$ 

$ Metaphor:$
$ i) There is a one to one correspondence between parts of the metaphor and the
interpretation of those parts. For example in 'take the bull by the horns' one
might argue that 'take' means something like 'deal with', 'the bull' means 'the
problematic matter' and 'by the horns' means 'at the most important part'. The
derivation process of the metaphor and the non-metaphor are parallel. This is
not the case for idioms, cf. for 'kick the bucket' as an idiom the derivation
contains a verb for the expression as a whole, and in the non-idiomatic case
the derivation consists of a verb and an object.$ 
$ ii) Words in a metaphor can be replaced by elements of an open class of words
within the same semantic field. So, instead of 'take the bull by the horns' one
might also have something like 'take the hare by the ears'.$ 
$ iii) Metaphors can be translated literally; the same compositional semantics
applies in both languages. This is to be hoped for, of course, since metaphors
can be created freely. A problem arises if translation takes place between
languages of which the speakers use a different 'imagery' to create their
metaphors.$ 
$ iv) Metaphors are free to any syntactic operation (the only exception being
that a part of a metaphor cannot be focussed).$ 

$ Semi-idiom:$
$ i) A semi-idiom consists of a part that is idiomatic and a literal part (the
literal part can be translated literally). In for instance 'aandacht geven'
'geven' is used idiomatically and 'aandacht' is literal and can be used in
other contexts. An other example is 'zwart geld'.$ 
$ ii) A modifier only modifies the phrase or word in its context, for example
'hij houdt een mooie/lange/korte/slechte voordracht'. Here ''modifier'
voordracht' can be interpreted in isolation.$ 
$C1 The format of idioms
$ The following observations hold for Dutch, English (and presumably Spanish),
because no counterexeamples have been found (note that some of the observations
only apply to verbal idioms). The observations delimit the size of idioms.$ 

$ (1) An idiom is restricted to one sentence. This is obviously the case; only
in word games, idioms can stretch over more than one sentence.$

$ (2) An idiom has a regular constituent structure; it can take any form that
normal literal structures can take, and only these (perhaps there are a few
exceptions, cf. 'by and large').$ 

$ (3) An idiom can have only one tensed V (or S), or somewhat more restricted:
an idiom contains at most one verb. There are some apparent counter examples
to these claims:$ 
$ i)$

$ a) hij liegt dat hij barst$
$ b) het regent dat het giet$
$ c) hij laat zien wie de baas is$

$ In these sentences the matrix clause is literal and the subordinate clause is
idiomatic (it is not clear whether c is an idiom at all). For example sentence
a implies that the subject is lying. This suggests that only the subordinate
clause is the idiom. Of course, the context in which the idioms in the a and b
sentences can occur is highly restricted, namely in that of 'liegen' en
'regenen', respectively, but this type of restriction is more common as for
example in semi-idioms or restricted collocations.$ 

$ ii)$

$ a) hij kan hem niet uitstaan$
$ b) dat kan me niet schelen$
$ c) hij krijgt hem te pakken$
$ d) hij heeft hem te pakken$
$ e) Jan heeft een appeltje te schillen met Piet$
$ f) ik geef het hem te doen$
$ g) Harm laat zich niet kisten$
$ h) hij komt net kijken$

$ The idioms in a to h contain a full and an auxilliarylike or copularlike
verb. Only the verb in the matrix clause has tense. In some linguistic analyses
it has been argued that in the above constructions the two verbs should be
analysed as one complex verb. This complex verb is created in the syntax by an
operation like reanalysis.$ 

$ For idioms the analysis can be that the two verbs are listed as a complex
verb in the lexicon. In that case these idioms have only one verb. It is not
clear whether an analysis as a complex verb is feasible in Rosetta.$ 

$ There are also other possibilities, for instance in c there is some evidence
that 'te pakken' is an adjectival.$ 

$ (4) An idiom can have at most three free arguments. This is also consistent
with the claim that semantically a verbal idiom is a verb.$ 

$ (5) There are no subject idioms (in Dutch, English and Spanish). A subject
idiom is an idiom in which the subject is not a free argument, but a part of
the idiom. There are some apparent counterexamples:$ 

$ i)$

$ a) the roof caved in on John's dreams$
$ b) het geld groeit hem niet op de rug$
$ c) de zenuwen gieren hem door de keel$

$ The verbs in sentence a to c are ergatives. The surface object is the deep
subject.$

$ ii) 

$ a) het geluk lachte hem toe$

$ If a is an idiom, then it is a counterexample (but cf. 'een gelukkige
toekomst lachte hem toe').$ 

$ iii)$

$ a) the cat has got Mary's tongue$
$ b) zijn ogen zijn groter dan zijn maag$

$ Sentences a and b contain idioms with inalienable possessions. In linguistic
theory it has been shown that sentences that contain words that are inalienable
possessions should be analysed in a special manner (cf. Gue@'ron (1984) and
Cattell (1984)). The above examples are again special compared to the analyses
proposed in the literature, but if the correct analysis is found it will
probably become clear that they are not subject idioms.$ 

$ It is not necessary to incorporate the claim that there are no subject idioms
into Rosetta3.$ 

$ Note that non-configurational languages like Hungarian are claimed to have
subject idioms (L. Maracz, p.c.).$ 
$C1 The internal structure of idioms
$ The constituent structures of idioms can vary greatly. Here some
generalizations will be made. In appendix B some examples of idiom structures
are given.$ 

$ In general the structure of an idiom is as follows: the head of an idiom
constituent is an idpart; sister constituents to the head of an idiom can:$
i) as a whole be a part of the idiom,
ii) as a whole be a free argument,
iii) contain a free argument; in this case the head is an idpart; the
sister constituent of this head can ii) or iii). 
$ In any case: free arguments in idioms can _never_ be the head of a
constituent if sister nodes are idparts. This holds for Dutch and English,
and presumably for Spanish.$ 

$ So in a configuration like: (rel is any relation but head)$

$RL 13
    (15)                   IDIOM

                      head   rel     rel

                     A          B

                           head   rel     rel
 
                           C         D

                                 rel  head     rel

                                E         F

$ A is part of the idiom; B can be part of the idiom in full; if B is not as a
whole part of the idiom, then C is and D may be part of the idiom; if D is not
part of the idiom in full then F is and E may be part of the idiom.$ 
$C1 Classifications of Idioms 
$ Two types of idioms can be distinguished:$
$ - fixed idioms,$
$ - not-fixed or variable idioms.$

$ The order of fixed idioms cannot be changed by syntactic operations. Examples
of this type are "spic and span", "in the long run", "as cold as ice", etc..$ 

$ Fixed idioms are treated in morphology as one word. The fixed idiom has an
idkey; this idkey triggers a rule that looks up the two or more keys of the
words that form the idiom. 

$ Morphological rules can apply to these strings (in particular singular <==>
plural) as in "red herring" <==> "red herrings", "man-of-war" <==> "men-of-war"
and "de heer des huizes" <==> "de heren des huizes".$ 

$ In the rest of the grammar they are treated as basic S-trees.$ 

$ The criterion to distinguish between fixed and variable idioms is that in
fixed idioms the order of the words cannot change and that no words can be
inserted between the idiom parts. Fixed idioms have no special consequences for
the rest of the grammar, i.e. they can be treated in the same way other basic
S-trees are. It seems that fixed idioms are not very problematic, therefore
they will be ignored in the rest of this discussion.$ 

$ Another way of distinguishing types of idioms is by the head:$
1) Verb
2) Noun
3) Adjective/Adverb
4) Preposition

$ The head here is the head of the constituent that fully contains the idiom.$

$ In all four types there are variable and fixed idioms.$

$ Examples:$
1) fixed   : het regent pijpestelen
   variable: V1 heeft een appeltje te schillen met V2
2) fixed   : een boom van een kerel
   variable: een schat van een V1
3) fixed   : groen van ellende
   variable: weg van V1
4) fixed   : van de oude stempel
   variable: buiten V1's medeweten

$ Note that proverbs are not included here. They are not idioms, since they do
not have the properties given in section 2. They cannot be treated as fixed
idioms, since rules other than merely morphological ones have to apply. Note
also that there are not many variable idioms with a noun or an adjective as
head.$ 

$ Sometimes it is not clear what the head of an idiom is (in proverbs or
exclamations), e.g. "oost west, thuis best". Since these exceptions can be
treated as fixed, they do not seem to cause problems.$ 

$ The term idiom will in the following be used to indicate variable idiom. The
discussion deals mostly with idioms with a verbal head.$ 
$C1 Treatment of Variable Idioms
$C2 Introduction
$ In this section the treatment of variable idioms will be presented. In
appendix C some example derivations for idiomatic sentences will be given
according to the grammar of this section. In appendix D there are some examples
of M-rules.$ 

$ Globally the treatment of idioms is as follows:$

$ i) syntactically idioms are complex expressions, which can undergo various
syntactic operations; idioms undergo the same operations as non-idioms although
sometimes there are some restrictions to account for deficient syntactic
behaviour. The only exceptional rule is the one in which idioms are constructed
(and possibly some other rules will have to be added for idioms; this will be
elaborated below).$ 

$ ii) semantically idioms are basic expressions that correspond to basic
meanings. This means that an idiom is mapped onto one basic meaning (or a set
of basic meanings in case of ambiguities) and that idparts (an idpart is a part
of an idiom that is not a free argument) are not interpreted semantically
separately.$ 

$ So, idioms are treated as complex basic expressions; they are complex
acccording to i) and basic according to ii).$ 

$ Another class of complex basic expressions is that of translation idioms (cf.
the COLING paper). The treatment of translation idioms (TI's) might have to be
different from that of idioms because the parts of a TI may have to be
interpreted semantically (at least partially, for example for the determination
of Aktionsart). This depends on how fixed TI's are. For example 'de maaltijd
bereiden' translates into 'cocinar' (in Spanish), but 'maaltijden bereiden'
does not. Another example is 'vroeg opstaan' that translates into 'madrugar'
(in Spanish), and 'heel vroeg opstaan' into 'madrugar mucho'. In 'heel vroeg
opstaan', 'heel' modifies the TI as a whole. This type of TI can be treated in
the same way as 'er veel/weinig/geen kaas van gegeten hebben'.$ 

$ For the construction of idioms with an adjective, an adverb, a preposition or
a noun as head special rules will have to be added to resp. the ADJP, ADVP, PP
and NP rules. The method will be very much the same as for the verbal idioms.
Since there are no problems for these idioms that do not also exist for verbal
idioms these idioms will not be discussed here. Possibly, the only exceptions
are cases like 'in zijn nopjes'  which are PP's that act as adjectives in some
respects (e.g. modification by 'zeer'). Perhaps the normal adjective rules can
be used for these idioms, otherwise these idioms can be treated as having a
special category.$ 

$ In appendix D some examples of M-rules will be given that are necessary for
idioms. Many of the rules are probably necessary for non-idioms as well. The
only exceptions are the VPIDrules, some of the rules in the zichspelling
transformation class (for instance for POSSPRO's) and some of the substitution
rules. With the rules given in the appendix it is possible (given the other
grammar rules) to deal with any idiom that stretches over one (idiomatic)
clause only. Furthermore for idioms having no free arguments (e.g. 'daar zit 'm
de kneep') no rules are given.$ 

$ The leading principle for making the grammar rules for idioms is that idioms
undergo the same rules non-idioms do. Sometimes an idiom type is analyzed in
such a way that the analysis accomodates this leading principle even though
from a theory on idioms a different analysis follows. An example is 'hij komt
net kijken' (meaning 'hij werkt hier pas sinds kort') in which 'komen' and
'kijken' could be analyzed as a complex verb (i.e. 'komen kijken'). This would
be consistent with a theory of idioms that states that an idiom contains at
most one verb. However, this will not be the analysis in the Rosetta3 grammar
for similar non-idiomatic cases (note that in this case it still may be
possible to analyze it as having a complex verb thereby not applying some rules
of the grammar).$ 

$ A similar phenomenon is the following. Though from a theory on idioms it
possibly follows that there are only VP-idioms, in Rosetta there are only
S-idioms, which implies that the subject is part of the idiom. This is done to
accomodate so-called subject idioms (i.e. idioms in which the subject is an
idpart, for example 'the cat has got Mary's tongue' meaning 'Mary does not say
anything'). So, possibly there are no subject idioms (in Dutch, English and
Spanish), but this depends heavily on the analysis of apparent counter examples
to this claim. An example to illustrate is 'de zenuwen gieren Piet door de
keel'. Before it became clear that there were ergative verbs in Dutch, this
would have been a subject idiom. Now 'gieren' is analysed as an ergative this
is not the case. It is conceivable that verbs like 'have' (or 'have got')
should in fact be analysed differently as well, and/or sentences containing a
noun that is an inalienable possession should be analysed differently, after
which 'the cat has got Mary's tongue' is not a subject idiom either. This type
of reasoning is upheld for other phenomena too, as can be seen below.$ 

$ So, many rules and transformations are applicable to idioms and non-idioms,
but have special conditions for idioms. They are either non applicable (for
example passive cannot apply to 'kick the bucket') or have to apply (for
example for the obligatory perfect form in 'hij heeft er geen kaas van
gegeten). Optional rules apply and do not apply. A filter after the rule rules
out wrong paths in the case of certain idioms.$ 

$ The dictionary entries are referred to by the head (so, in the case of verbal
idioms by the verb). The entry contains a set of attribute value pairs that
specify properties of the idiom, including idiosyncracies like nopassive or
nopresenttense. Furthermore, there is an attribute that states how the
idiomatic tree structure should be built (the format of this attribute depends
on the the type of VPIDrule that will be chosen, cf. below). This attribute
will be called the idtreefield.$ 

$ In the VPIDrules the idiosyncratic information (like nopassive) will be
specified at the node where this information is situated for non-idioms. So, if
nopassive is specified at the VERB node than this information is already there;
if it is specified at the VP or the S node it will be copied from the VERB to
the higher node in the VPIDrules. In this way the uniformity of rules for
idioms and rules for non-idioms is guaranteed. Note that this is feasible since
there will be no other attributes of this type for idioms that trigger the
applicability or non-applicability of rules or transformations, than there are
for literal cases.$ 
$C2 The Grammar
$ The following version of the organization of the grammar will be assumed
(only relevant subgrammars are included; the grammar given here is an
adaptation of the one in document 0107 (Jan Odijk, Subgrammars of Rosetta3),
i.e. the first part up till the VPrules is different; furthermore some rules
have been omitted):$ 

$ _Subgrammar: VERBPPROPformation_$

$ Control Expression: RC: Startverbprules . {RC: Emptysubstitution} . TC:
Verbpatternrules . [RC: subjectdemotionrules] . TC: zichspellingrules$ 

$ _Subgrammar: VERBPPROPtoCLAUSE_$

$ Control Expression: {RC: propositionsubstitution} . RC: Clauseformation . TC:
PROPOKrules . TC: OCP-interpretation . T?: Postsubjformation . TC:
objectOKrules . TC: subject-verbagreement . TC Caseassignment . [TC:
ModalandPerfectswitch] . [TC: PPoverV] . [TC: NPoverADV]$ 

$ _Subgrammar: CLAUSEtoSENTENCE_$

$ RC: Reciprocalspelling1 . TC: ARGReflspelling1 . {RC: NOwhshiftsubstition} .
RC: Reciprocalspelling2 . TC: ARGReflspelling2 . RC: Negation-introduction .
TC: NegationOKrules . {RC: NOwhshiftsubstitution} . TC: PronounOKrules . TC:
Errules . TC: Shiftrules . {RC: Whshiftrelsubstitution} . TC: Er-Deletionrules
. Endclauserules$ 

$ The grammar below is for Dutch; nevertheless, often English examples are
given. Several rules will be the same for that language; if not, the reader can
think of a good Dutch example. Each rule or transformation class is discussed
w.r.t. implications for idioms. The rules in the appendix are for a SVO
language, but can easily be transformed into SOV form.$ 

$ _Subgrammar: VERBPPROPformation_$

$ Startverbprules$

$ Comment: the form they are presented in in the appendix is the most
convenient one for idioms, though there may be alternatives (for example the
one proposed by Agnes).$ 

$ Emptysubstitutionrules$

$ Comment: idioms have no special consequences for the emptysubstitutionrules.$

$ Verbpatternrules$

$ Comment: A part of the transformationclass of the verbpatternrules (VPrules)
consists of the VPIDrules. These are the rules that construct the idiom in very
much the same way the other VPrules construct the syntactic environment of a
VERB. The difference is that in the case of idioms the construct contains
lexical material.$ 

$ Two alternative types of verbpatternidiomrules will be presented (cf. the
examples in the appendix).$ 

TYPE1
$ The rules of this type consist essentially of two parts. One part makes the
tree structure of an idiom apart from the lexical elements. The second part
(the auxiliary function) looks up the key and the form features (like
diminutive form or number) of the lexical elements in the idtreefield in the
dictionary and assigns these to the terminal nodes.$ 

$ The auxilliary function 'iddictN' used in the TYPE1 rules makes omega records
for the records in its parameterlist and looks up the keys of the lexical
elements and their idiosyncratic properties in the idtreefields of the idiom
dictionary and assigns them to the omegarecords. The auxilliary function
'percolate' sets corresponding attributes from the head of a constituent to
corresponding attributes of the mother (e.g. number).$ 

$ The idtreefields in the idiom dictionary entries, using this type of rules,
are very simple; if this rule applies to 'lose one's temper' it consists only
of <key1:temperkey> in some form. For 'een handje helpen' it consists of:$ 

<key1:eenkey>,
<key2:handkey,
 verkleinvorm:true>,

$ Iddictn is for n lexical elements. Idmatchn is the reverse of iddictn for
analysis.$

TYPE2
$ There are four rules of this type (each for a number of arguments). The tree
structure is listed in full in the idtreefields of the idiom dictionary
entries.$ 

$ MakeidtreeN is an auxilliary function of the TYPE2 rules that takes as a
parameter the idkey of the VERB and the N (0,1,2 or 3) free arguments. It looks
up the idiom tree in the dictionary (referred to by the idkey) and builds it
thereby placing the argumentvariables in the correct positions.$ 

$ The idtreefield of a dictionary entry consists of a model and an
action/condition part (note that the model is not a model in the normal sense,
but a reltreelist). The model gives the structure of the idiom; the
action/condition (AC) part specifies idiosyncracies of lexical elements. As can
be seen below the models contain metavariables (the T's with the index); these
metavariables are place holders that indicate where syntactic variables should
be substituted when the idiom is constructed in the VPIDrules. One might
compare these dictionary variables to formal parameters in a procedure
declaration in a Pascal program, which are replaced by actual parameters in a
procedure call. In generation the AC part is read as a set of assignments; in
analysis it is read as a set of conditions.$ 

$ So, for example, the dictionary entry for 'lose one's temper' is:$ 

MODEL : subj/T1,
        pred/VERBP{VERBPrec1}[head/VERB{VERBrec1},
                         obj/NOUNP{NOUNPrec1}[det/POSSADJ{POSSADJrec1},
                                              head/NOUN{NOUNrec1}]]
AC    : POSSADJrec1.antecedent  = subject;
        NOUNrec1.key = temperkey

$ Of course the above is the model in principle; it may very well be possible
to decrease the size of the dictionary entries using redundancies.$

$ Matchidtreen is the reverse of makeidtreen for analysis.$

$ Note that for 'iemand's hart breken' there are two models in the idtreefield:
one with the genitive NP in determiner position and one with this NP in object
position in the PREPP (this is consistent with Franciska's proposal for the
treatment of this type of construction):$ 

MODEL : subj/T1,
        pred/VERBP{VERBPrec1}[head/VERB{VERBrec1},
                              obj/NOUNP{NOUNPrec1}[det/T2,
                                                   head/NOUN{NOUNrec1}]]
AC    : NOUNrec1.key = hartkey

$ NB: T2 is not assigned genitive case here; this is done in the argsubstrules
for every NP in this position (or in the caseassigment transformation).$ 

$ and$

MODEL : subj/T1,
        pred/VERBP{VERBPrec1}[head/VERB{VERBrec1},
                              obj/NOUNP{NOUNPrec1}[det/ART{ARTrec1},
                                                   head/NOUN{NOUNrec1},
                                                   mod/PP{PPrec1}
                                              [head/PREP{PREPrec1}, 
                                               obj/T2]]]
AC    : PREPrec1.key = vankey 
        NOUNrec1.key = hartkey
        ARTrec1.key = hetkey

$ The ARGSUBSTrules decide whether one of the two models has to be rejected.
The TYPE1 rules have the same results.$ 

$ Discussion: in the first type (TYPE1) the size of the dictionary entries is
small in the sense that they contain only the information that is specific to
the lexical elements of the idiom. In the second type (TYPE2) the tree is
listed in full in the dictionary. The disadvantage of the TYPE1 rules is that
there will be many rules and of the TYPE2 rules that the dictionary will be
larger. Note that every TYPE1 rule has to be tried (in analysis) and only in
the condition part of the rule it becomes clear whether or not the rule is
applicable. Note also that idioms with another head than VERB are treated
analogously and that here there will also be many rules. From a theoretical
point of view the two rule types seem to be equivalent (or can conceptually be
treated as such). Therefore a choice has to be made on practical or efficiency
grounds (for example: -a large dictionary size vs. a large number of rules,
-the ease of rule making, -the ease of dictionary filling, etc.).$ 

$ subjectdemotionrules$

$ Comment: If passive is forbidden for an idiom (eg. 'kick the bucket') a
condition in this rule will check this and make the rule inapplicable.$ 

$ zichspellingrules$

$ Comment: here the form of pronouns and reflexives in idioms is established
according to the form of their antecedent (eg. Mary lost her temper). Certain
ill-formed expressions are ruled out here (eg. His temper was lost by John)
(cf. the appendix). Also reciprocals like 'elkaar' in 'ze spelen elkaar de bal
toe' have to be taken care of here.$ 

$ Subgrammar: VERBPPROPtoCLAUSE$

$ propositionsubstitution$

$ Comment: This rule is applicable if a sentence is a free argument of the
idiom as in 'het valt niet mee om ...'.$ 

$ Clauseformation$

$ Comment: Some idioms are restricted w.r.t. aspect or time. Conditions in the
rules check this. If an idiom from another language that is a translation has
not got these restrictions this poses a (translation) problem for which a neat
solution is hard (impossible) to find.$ 

$ PROPOKrules$

$ Comment: possibly applicable; depends on the analysis of 'hij komt net
kijken' cases.$ 

$ OCP-interpretation$

$ Comment: possibly applicable; depends on the analysis of 'hij komt net
kijken' cases.$ 

$ Postsubjformation$

$ Comment: if the subject is a free argument, the rule is applicable$

$ objectOKrules$

$ Comment: makes the object into a subject, for example in 'het bijltje werd er
bij neergegooid'.$ 

$ subject-verbagreement$

$ Comment: applies$

$ Caseassignment$

$ Comment: For cases like 'The beans were spilled by Derek', where passive has
taken place, in some languages case has to be assigned to the surface subject
(for the languages in Rosetta this is irrelevant; this might not be the case
for pronouns that are an idpart, but presumably there are not any idioms of
this type).$ 

$ ModalandPerfectswitch$

$ Comment: applies$

$ PPoverV$

$ Comment: often (perhaps even in all cases) this rule is not applicable to
idparts, cf. 'hij heeft de pijp gegeven aan Maarten' is not idiomatic. A
condition in the rule should forbid this. Only parts of an idiom that contain a
VAR undergo this rule.$ 

$ NPoverADV$

$ Comment: Here the same holds as for PPoverV, cf. 'hij heeft de pijp
waarschijnlijk aan Maarten gegeven'. Only parts of an idiom containing a VAR
are subject to this rule.$ 

$ _Subgrammar: CLAUSEtoSENTENCE_$

$ Reciprocalspelling1$

$ Comment: irrelevant$

$ ARGReflspelling1$

$ Comment: irrelevant$

$ NOwhshiftsubstition$

$ Comment: This comment applies to all substitution rules. Here also VAR's
nested in idiomatic constructs are replaced by arguments. In analysis, for
idioms, the rules should both apply and not apply (probably this is the case
anyway). The rules for non-idioms may be the same as for idioms possibly apart
from rules that have to be added that substitute in lower clauses if an idiom
consists of more than one clause, or, more in general, if substitution has to
take place at a deeper level than normal. This depends heavily on the analysis
of such idiomatic constructs (cf. the remarks above). If the rules given in the
appendix are also applicable to non-idioms then the parts referring to idioms
should be deleted.$ 

$ Reciprocalspelling2$

$ Comment: irrelevant$

$ ARGReflspelling2$

$ Comment: irrelevant$

$ Negation-introduction$

$ Comment: This rule is in principle applicable to idioms, although there are
some problems.$ 

$ There are idioms that apparently have to contain a negation element,
e.g.$ 

het kan me geen zier schelen
het is hier niet pluis

$ The negation elements are not a fixed part of the idiom however, e.g.$

denk je dat mij dat een zier kan schelen

$ In sentences that contain an element with negative polarity, no overt
negation element is needed, if it is in the context of for example a yes/no
question. Negation in these cases is part of the idiom, however:$ 

$ - Sometimes an idiomatic sentence containing an overt negation element can be
translated into a sentence that does not contain a negation element, as in$ 

die zaak is niet pluis
there is something fishy about that matter

$ - There is a difference in meaning between a and b:$

a. denk je dat de zaak hier pluis is
b. denk je dat de zaak hier niet pluis is

$ A possible way to treat idioms with negation is to leave out the negator in
the VPID rules. The idiom is marked for negation. This marker triggers a
transformation that checks if the idiom is in the environment of for example a
yes/no question. If not it inserts the negation element. Of course this could
lead to bad results, cf. 'de zaak is niet niet pluis' as a translation of
'there is nothing fishy about that matter'. This transformation in these cases
could construct a sentence like 'het is niet zo, dat de zaak niet pluis is.
This is better than the above translation, but again the method is not trivial,
cf. 'Piet wist niet of het zo was dat ...'.$ 

$ NegationOKrules$

$ Comment: applicable to parts of idioms, cf. 'hij heeft er _geen_ kaas van
gegeten'.$ 

$ NOwhshiftsubstitution$

$ Comment: See above$

$ PronounOKrules$

$ Comment: applicable for idioms like ' 'm smeren', ' 'm zijn'.$

$ Errules$

$ Comment: there is an interesting interaction between idiomatic and
non-idiomatic ers, which has to be investigated further.$ 

$ Shiftrules

$ Comment: In principle shift is always possible if an idiomatic element
contains a VAR. These elements can be treated in the same way other VAR's are.$

$ Whshiftrelsubstitution$

$ Comment: see above$ 

$ Er-Deletionrules$

$ Comment: probably irrelevant$

$ Endclauserules = RC: Mooddetermination . TC: Conjunction-spelling . TC:
Verb-second . TC: Conjunction-deletion$ 

$ Comment: applicable; there has to be a check in the Mooddetermination rules
for for instance onlyimperative (cf. 'zet 'm op' and '*hij zet 'm op')$
$C1 Appendix a: Idiom Patterns
$ The following is a list of idiom structures. It is not complete. In the
examples idiom parts are underlined. There are Dutch and English examples. If
an example in a language is not given, this means that I have not been able to
find one. The symbols { and } are for comment. There are only few examples of
idioms containing more than one verb. There are no special idiom patterns for
idioms containing a negator or a particle. Only surface forms are given (even
if in the text other analyses were made).$ 

_Idioms with an idiomatic subject (part)_

_0 free arguments_

1. S(vast) + V + A(vast)

_het regent pijpestelen_
_het regent dat het giet_

_1 free argument_

2. S(vast+var) + V

John's _mouth waters_

3. S(var + vast) + V + A(vast)

zijn _leven hing aan een zijden draadje_
zijn _ogen zijn groter dan_ zijn _maag_
his _eyes are bigger than_ his _belly_
zijn _hoofd staat er niet naar_ {negation}

4. S(vast) + V + O(var + vast)

_the cat has got_ Mary's _tongue_

5. S(vast) + V + PO(vast + var)

_de muren komen op_ mij _af_

6. S(vast) + V + O(var) + A(vast)

_de haren rijzen_ hem _te berge_
_het geld groeit_ hem _niet op de rug_ {negation}
_de zenuwen gieren_ hem _door de keel_
_het hart klopt, bonst, slaat_ hem _in de keel_ {no ergative}
_het water loopt_ mij _in de mond_
_de schellen vallen_ hem _van de ogen_
_het mistte_ Piet _voor de ogen_ {no ergative}

7. S(vast) + V + A(vast + var)

_the ceiling caved in on_ John's dreams  
_het mistte voor_ mijn _ogen_ {no ergative}
_er kwam een waas voor_ zijn _ogen_
_er zit een draadje los bij_ hem {no ergative}
_er is een steekje los aan_ hem {no ergative}

8. S(vast) + V + O(var)

_het geluk lachte_ Piet _toe_ {no ergative}
_de toekomst lachte_ Piet _toe_ {no ergative}


_Idioms with a variable subject_

_1 free argument_

1. S(var) + V + O(vast)

Pete _spills the beans_
Piet _krijgt de bons_
Pete _kicked the bucket_
That will _break the ice_
He always _sings the same old song_
Dat verhaal _heeft kop noch staart_
hij _wil_ altijd _het onderste uit de kan_
hij zal _het loodje leggen_
zij _deed geen mond open_ {negation}
ik _doe geen oog dicht_ {negation}
hij _noemt man en paard_
hij _vertrekt geen spier_ {negation}
Pete _put_ his _foot down_
Pete _put down (new) roots_
Pete _put down_ his _tools_
Pete _bears_ no _ill-will_
Pete _won_ his _spurs_
Pete _lost_ his _temper_
Piet _gaat_ zijn _gang_
Piet _verloor_ zijn _geduld_
zij _staat_ haar _mannetje_

2. S(var) + V + O(vast) + Comp(vast)

the boys _painted the town red_
hij _raakt de draad kwijt_
you have to _cast_ your _net wide_

3. S(var) + V + O(vast) + A(vast)

zij _heeft het voor het zeggen_
zij _neemt geen blad voor de mond_ {negation}
zij _heeft haar op de tanden_
hij _krijgt het te kwaad_
hij _heeft het hoog in zijn bol_
hij _heeft geen droge draad aan_ zijn _lichaam_ {negation}
hij _ziet geen hand voor ogen_ {negation}

4. S(var) + V + A(vast)

the oil market has _gone berserk_
he must _be dead right_
dit _kan niet door de beugel_ {negation}
their greatest explorer had _gone native_
Marie _raakte tussen de wal en het schip_
hij _staat met de mond vol tanden_
hij _is van zessen klaar_
Eric _is niet op zijn mondje gevallen_ {negation, perfect}
hij is _buiten_ zijn _boekje gegaan_
die machine _is naar_ zijn _moer_

5. S(var) + V + PO(vast)

Piet _vraagt naar de bekende weg_
Mozart _weet van toeten noch blazen_

6. S(var) + V + A(vast) + A(vast)
hij _loopt met zijn ziel onder de arm_
hij _is al lang bij de mieren_
hij _zit_ daar _goed te paard_
hij is _met het verkeerde been uit bed gestapt_

7. S(var) + V + A(vast) + COMP(vast)
die oplossing _gaat aan hetzelfde euvel mank_

8. S(var) + V + O(vast) + IO(vast)

Hij _wordt er geen wijs uit_ {negation}

_2 free arguments_

9. S(var) + V + O(vast) + A(vast) + PO(var)

hij _maakt zijn handen niet vuil aan_ die zaakjes {negation}

10. S(var) + V + O(vast) + PO(vast + var) + COMP/ADJP
hij _liet geen spaan van_ hem _heel_
hij _liet geen draad aan_ hem _heel_

11. S(var) + V + IO(var) + O(vast) + A (vast)
Piet _neemt_ Jan _de woorden uit de mond_
Piet _kijkt_ Jan _het eten uit de mond_
Harm _legt_ Elly _woorden in de mond_

12. S(var) + V + O(var + vast)

Pete _broke_ Mary's _heart_
Die zaak _komt_ Piet's _strot uit_
John _pulled_ Mary's _leg_

13. S(var) + V + IO(vast+var) + O(vast)

The matron _made_ their _lives a misery_

14. S(var) + V + IO(var) + O(vast)

this exhibition _does_ the artist _credit_
Pete _read_ the class _the riot act_
Pete _gave_ the man _the sack_
Pete _lends_ the girl _a hand_
Pete _lends_ the girl _an ear_
Piet _helpt_ het meisje _een handje_
hij _geeft_ hem _een grote mond_
the voters _gave_ the leaders _a taste of_ their _own medicine_
Pete _gave_ the girl _a piece of_ his _mind_

15. S(var) + V + O(var) + Comp(vast)

the children _drive_ their mother _mad_
Harm zal Piet _een kopje kleiner maken_
John has _made_ his colleagues _a laughing stock_

16. S(var) + V + O(var) + A(vast)

a doctor has to _put_ his patients _first_
Pete _rubbed_ the teacher _the wrong way_
Pete _brought_ that matter _to light_
Pete _brought_ that matter _to John_
Hij _stelt_ de man _op de proef_
Piet _trekt_ het bedrijf _uit het moeras_
Piet _maakte_ Jan _monddood_
hij _praatte_ haar _naar de mond_
wij _bedekken_ zijn zonden _met de mantel der liefde_
de leraar _verloor_ zijn pupil _uit het oog_
dat boek _kwam_ hem _onder de ogen_
Jan _roept_ hem _op het matje_
hij _wenst_ hem _naar de Mokerhei_
I _took_ John _unawares_
the Chancellor _made_ his strategy _plain_
his demands have _bled_ the family _white_
hij _helpt_ die machine _naar_ zijn _moer_

17. S(var) + V + O(vast) + A(var + vast)

Pete _was a dab hand at_ carpentry

18. S(var) + V + A(vast + var)

he _gets high on_ idioms

19. S(var) + V + O(vast) + PO(var + vast)

Pete _put an end to_ these matters
Piet _maakte een eind aan_ die zaak
Pete _lends a hand to_ the girl
that job _opened the doors of opportunity for_ Pete
hij _vatte de draad van_ het verhaal _op_
Piet _schijt peuken van_ die zaak
hij _heeft _zijn_ mannetjes voor_ zijn obscure zaakjes
hij _zet een grote mond op tegen_ hem
hij _werpt zijn blik op_ die problemen

20. S(var) + V + PO(vast + var) + A(vast)

zij _zit met_ dat probleem _in haar maag_

21. S(var) + V + O(var) + IO(vast)

hij _brengt_ die spullen _aan de man_

22. S(var) + V + PO(vast +var)

Piet _staat open voor_ die zaken

23. S(var) + V + IO(var) + O(vast) + A(vast)

zij _gaf_ hem _de wind van voren_

_3 free arguments_

24. S(var) + V + O(var) + PO(vast + var) + A(vast)

Piet _stelt_ Marie _van_ die zaken _in kennis_

25. S(var) + V + O(var) + IO(var) + A(vast)

Piet _legt_ het Marie _ten laste_
de verkoper _splitst_ Elly die fiets _in de maag_
de schoorsteenveger _speldt_ Elly een mooi verhaal _op de mouw_
Piet _geeft_ het Marie _op_ haar _brood_

26. S(var) + V + O(var) + PO(var + vast)

Pete _laid_ his failure _at_ Mary's _door_
Piet _ramde_ het stuk _door_ Marie's _strot_
de rechtbank zal de kinderen _onder_ vader's _hoede stellen_

27. S(var) + V + IO(var) + O(var + vast)

Piet _laat_ Marie de ontwikkelingen _weten_
Piet _geeft_ Marie _te kennen_ dat er iets gebeurd is
Piet _geeft_ Marie _kennis van_ die ontwikkelingen
$NP
_Clitics, reciprocals and reflexives in idioms_


_Clitics_

_0 free arguments_

1. S(vast) + V + CLIT + ADV(vast)

_daar zit 'm de kneep_
_daar zit 'm de moeilijkheid_

_1 free argument_

2. S(var) + V + CLIT

hij _smeert 'm_
hij _heeft 'm om_
hij _is 'm_

_Reciprocals_

_1 free argument_

3. S(var) + V + REC(vast) + O(vast)

we moeten _elkaar geen mietje noemen_ {negation}
they _call each other names_

_strong reflexives_

_1 free argument_

4. S(var) + V + Srefl

hij _is zichzelf_ niet meer
zij _blijft zichzelf_

5. S(var) + V + PO(vast)

zij _kwam tot zichzelf_

6. S(var) + V + A(vast) + A(vast)

zij _is buiten zichzelf van woede_
hij _is in zichzelf gekeerd_

7. S(var) + V + O(vast) + A(vast)

hij _slaat de hand aan zichzelf_

8. S(var) + V + Srefl + A(vast)

hij _prijst zichzelf uit de markt_

_weak reflexives_

_1 free argument_

9. S(var) + V + ADV(vast)

hij _staarde voor zich uit_
die feiten _spreken voor zich_
hij _houdt zich staande_
hij _houdt zich goed_

10. S(var) + V + Wrefl + NP(vast) + ADV(vast)

hij _schaamt zich de ogen uit het hoofd_
hij _trekt zich de haren uit het hoofd_
Piet _werkte zich de blaren op de handen_
hij _kijkt zich de ogen uit_
hij _drinkt zich een stuk in zijn kraag_

11. S(var) + V + Refl + A(vast)

John _had_ himself _a ball_

12. S(var) + V + Wrefl + A(vast)

Karpov _geeft zich gewonnen_
zij _slaat zich op de borst_
hij _snijdt zich in de vingers_
hij _maakt zich uit de voeten_

_2 free arguments_

13. S(var) + V + O(var) + ADV(vast)

hij _nam_ mij _voor zich in_
het _brengt_ ongemakken _met zich mee_
zij heeft het _achter zich gelaten_
hij kan het geheimpje niet _voor zich houden_
hij _schrijft_ zijn oorlogservaringen _van zich af_

14. S(var) + V + O(var) + ADV(vast) + ADV(vast)

zij _joegen _mij_ tegen zich in het harnas_

15. S(var) + V + O(vast) + ADV(vast) + IO(var)

hij _heeft het in zich_ om ...

16. S(var) + V + Wrefl + PO(vast+var)

hij _bedient zich van_ het vlees

17. S(var) + V + Wrefl + ADV(vast) + PO(vast+var) 

hij _gaat zich te buiten aan_ drank

18. S(var) + V + Wrefl + O(vast) + PO(vast+var)

zij _valt zich geen buil aan_ die aankoop
hij _maakt zich meester van_ het schip
hij _breekt zich het hoofd over_ het probleem
hij _geeft zich rekenschap van_ dat geval

$C1 Appendix B: Examples of idiom structures
$RL 16
    (1)                  CL

                  subj   head    obj     mod

                VAR      VERB      VAR      PP
                V1      "stellen"  V2
                                         head  obj

                                        PREP    NP
                                        "op"
                                             det head

                                            ART   NOUN
                                            "de" "proef"

$ "V1 put V2 to the test"; the head is a VERB$

$RL 16
    (2)                  CL

                  subj  head   compl

                 VAR    VERB      TEINFCOMPL
                 V1    "hebben"
                             subj   head   obj    mod

                             VAR    VERB       NP              PP
                             V1     "te
                                  schillen"  det head        head  obj

                                            ART    NOUN     PREP  VAR
                                           "een""appeltje"  "met" V2

$ "V1 have a bone to pick with V2"; the head is a VERB and there is a
complement clause (it is not clear whether this is the correct structure)$ 

$RL 13
    (3)                PP

                    head  obj

                   PREP     NP
                 "buiten"
                        det   head

                      VAR      NOUN
                     {+gen} "medeweten"
                      V1     

$ "without V1{+gen} knowledge"; the head is a PREP$

$RL 14
    (4)                PP

                    head  obj

                   PREP    NP
                   "op"
                        det  head

                      POSSPRO  NOUN
                        V1     "gemak"

$ "at V1 ease"; the head is a PREP; notice that the variable V1 can be bound to
the subject or the object in the sentence, cf. "Jan zit op zijn gemak" and "Jan
stelt Marie op haar gemak".$ 

$RL 10
    (5)                   ADJP

                        head  mod

                        ADJ     PP
                       "weg"
                             head   obj

                             PREP   VAR
                             "van"  V1

$ "crazy about V1"; the head is an ADJ$

$RL 12
    (6)                   NP

                      head    mod

                     NP         PP

                 det  head   head  obj

                ART   NOUN   PREP   VAR
               "een" "dijk"  "van"  V1

$ English=?; the head is a NOUN$
$C1  Appendix C: Example derivations
$ This sections contains some examples of derivations of idiomatic sentences.
In the derivations the subgrammars that are not discussed above are abstracted
from.$ 

$ _Derivation 1_$

$ Sentence: Piet helpt Marie een handje$

$ Subgrammar: VERBPPROPformation$

$ RC: Startverbprules$
$ R: Startverbpprop2$

$ TC: Verbpatternrules$
$ T: (TYPE1) VPID2a or (TYPE2) VPID2$

$ Subgrammar: VERBPPROPtoCLAUSE$

$ RC: Clauseformation$
$ R: ...$

$ TC: Subject-verbagreement$
$ T: ...$

$ Subgrammar: CLAUSEtoSENTENCE$

$ RC: NOwhshiftsubstitution$
$ R: for the object$
$ R: for the subject$

$ RC: mooddetermination$
$ R: ...$

$ TC: Verb-second$
$ T: ...$

$ _Derivation 2_$

$ Sentence: Wiens hart heeft Piet gebroken$

$ Subgrammar: VERBPPROPformation$

$ RC: Startverbprules$
$ R: Startverbpprop2$

$ TC: Verbpatternrules$
$ T: (TYPE1) VPID2b or (TYPE2) VPID2$

$ Subgrammar: VERBPPROPtoCLAUSE$

$ RC: Clauseformation$
$ R: ...$

$ TC: Subject-verbagreement$
$ T: ...$

$ Subgrammar: CLAUSEtoSENTENCE$

$ RC: NOwhshiftsubstitution$
$ R: for the subject$

$ TC: Shiftrules$
$ T: condition: does element that has to be shifted contain a VAR=TRUE$

$ RC: Whshiftrelsubstitution$
$ R: Argsubst2$

$ RC: mooddetermination$
$ R: ...$

$ TC: Verb-second$
$ T: ...$

$ _Derivation 3_$

$ Sentence: Piet gaat zijn gang$

$ Subgrammar: VERBPPROPformation$

$ RC: Startverbprules$
$ R: Startverbpprop1$

$ TC: Verbpatternrules$
$ T: (TYPE1) VPID1a or (TYPE2) VPID1$

$ TC: zichspellingrules$
$ T: ANTECEDENT1$

$ Subgrammar: VERBPPROPtoCLAUSE$

$ RC: Clauseformation$
$ R: ...$

$ TC: Subject-verbagreement$
$ T: ...$

$ Subgrammar: CLAUSEtoSENTENCE$

$ RC: NOwhshiftsubstitution$
$ R: for the subject$

$ RC: mooddetermination$
$ R: ...$

$ TC: Verb-second$
$ T: ...$
$C1 Appendix D: Examples of M-Grammar rules
$ _subgrammar: VERBPPROPformation_$
$ RC: VERBPPROPformationrules$ 
$ R: STARTVERBPPROP1$

M1 : BVERB{VERBrec1}
M2 : VAR{VARrec1}
M  : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/VAR{VARrec1}]
                               

GEN COND    VERBrec1.aantalargs=1
            ...

    ACTION  ...

AN COND     VERBrec1.aantalargs=1
            ...

   ACTION   ...
$NP
$ _subgrammar: VERBPPROPformation_$
$ RC: VERBPPROPformationrules$ 
$ R: STARTVERBPPROP2$

M1 : BVERB{VERBrec1}
M2 : VAR{VARrec1}
M3 : VAR{VARrec2}
M  : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/VAR{VARrec1},
                                                   arg/VAR{VARrec2}]

GEN COND    VERBrec1.aantalargs=2
            ...

    ACTION  ...

AN COND     VERBrec1.aantalargs=2
            ...

   ACTION   ...
$NP
$ _subgrammar: VERBPPROPformation_$
$ RC: VERBPPROPformationrules$ 
$ R: STARTVERBPPROP3$

M1 : BVERB{VERBrec1}
M2 : VAR{VARrec1}
M3 : VAR{VARrec2}
M4 : VAR{VARrec3}
M  : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/VAR{VARrec1},
                                                   arg/VAR{VARrec2},
                                                   arg/VAR{VARrec3}]
GEN COND    VERBrec1.aantalargs=3
            ...

    ACTION  ...

AN COND     VERBrec1.aantalargs=3
            ...

   ACTION   ...
$NP
$ _subgrammar: VERBPPROPformation_$
$ TC: VPIDrules$
$ T: VPID1a$

$ (*TYPE1*)$
$ (* lose one's temper *)$

M1 : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/T1]
M  : VERBPPROP{VERBPPROPrec1} [subj/T1,
                               pred/VERBP{VERBPrec1}[head/VERB{VERBrec1},
                                                     obj/NOUNP{NOUNPrec1}
                                        [det/POSSADJ{POSSADJrec1},
                                         head/NOUN{NOUNrec1}]]]

GEN COND    VERBrec1.vps=[vpid1a]
            ...

    ACTION  iddict1(VERBrec1.idkey,NOUNrec1);
            percolate(NOUNrec1,NOUNPrec1);
            VERBPPROPrec1.vps:=[vpid1a];
            POSSADJrec1.antecedent :=subject;
            ...

AN COND     VERBPPROPrec1.vps=[vpid1a] and
            idmatch1(VERBrec1.idkey, NOUNrec1) and
            POSSADJrec1.antecedent =subject
            ...

   ACTION   VERBPPROPrec1.vps:=[]
            ...
$NP
$ _subgrammar: VERBPPROPformation_$
$ TC: VPIDrules$
$ T: VPID2a$

$ (*TYPE1*)$
$ (* lend sb an ear *)$

M1 : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/T1,
                                                   arg/T2]
M  : VERBPPROP{VERBPPROPrec1} [subj/T1,
                               pred/VERBP{VERBPrec1}[head/VERB{VERBrec1},
                                                     indobj/T2,
                                                     obj/NOUNP{NOUNPrec1}
                                         [det/ART{ARTrec1},
                                          head/NOUN{NOUNrec1}]]]

GEN COND    VERBrec1.vps=[vpid2a]
            ...

    ACTION  iddict2(VERBrec1.idkey,ARTrec1,NOUNrec1);
            VERBPPROPrec1.vps:=[vpid2a];
            percolate(NOUNrec1,NOUNPrec1);
            ...

AN COND     VERBPPROPrec1.vps=[vpid2a] and
            idmatch2(VERBrec1.idkey,ARTrec1,NOUNrec1)
            ...

   ACTION   VERBPPROPrec1.vps:=[]
            ...
$NP
$ _subgrammar: VERBPPROPformation_$
$ TC: VPIDrules$
$ T: VPID2b$

$ (*TYPE1*)$
$ (* break sb's heart *)$

M1 : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/T1,
                                                   arg/T2]
M  : VERBPPROP{VERBPPROPrec1} [subj/T1,
                               pred/VERBP{VERBPrec1}[head/VERB{VERBrec1},
                                                     obj/NOUNP{NOUNPrec1}
                                         [det/T2,
                                          head/NOUN{NOUNrec1}]]]

GEN COND    VERBrec1.vps=[vpid2b]
            ...

    ACTION  iddict1(VERBrec1.idkey,NOUNrec1);
            VERBPPROPrec1.vps:=[vpid2b];
            percolate(NOUNrec1,NOUNPrec1);
            ...

AN COND     VERBPPROPrec1.vps=[vpid2b] and
            idmatch1(VERBrec1.idkey,NOUNrec1)
            ...

   ACTION   VERBPPROPrec1.vps:=[]
            ...
$NP
$ _subgrammar: VERBPPROPformation_$
$ TC: VPIDrules$
$ T: VPID2c$

$ (*TYPE1*)$
$ (* break the heart of sb *)$

M1 : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/T1]
M  : VERBPPROP{VERBPPROPrec1} [subj/T1,
                               pred/VERBP{VERBPrec1}[head/VERB{VERBrec1},
                                                     obj/NOUNP{NOUNPrec1}
                                     [det/ART{ARTrec1},
                                      head/NOUN{NOUNrec1}]
                                      mod/PP{PPrec1}[head/PREP{PREPrec1}, 
                                                     obj/T2]]]

GEN COND    VERBrec1.vps=[vpid2c]
            ...

    ACTION  iddict3(VERBrec1.idkey,ARTrec1,NOUNrec1,PREPrec1);
            VERBPPROPrec1.vps:=[vpid2c];
            percolate(NOUNrec1,NOUNPrec1);
            ...

AN COND     VERBPPROPrec1.vps=[vpid2c] and
            idmatch3(VERBrec1.idkey,ARTrec1,NOUNrec1,PREPrec1)
            ...

   ACTION   VERBPPROPrec1.vps:=[]
            ...
$NP
$ _subgrammar: VERBPPROPformation_$
$ TC: VPIDrules$
$ T: VPID1$

$ (*TYPE2*)$
$ (* rule for every idiom taking one argument *)$

M1 : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/T1]
M  : VERBPPROP{VERBPPROPrec1} [mu1]

GEN COND    VERBrec1.vps*vpid1s<>[];
            ...

$ (* vpid1s is the set of idiomatic vps taking one argument *)$

    ACTION  mu1:=makeidtree1(VERBrec1.idkey,T1);
            VERBPPROPrec1.vps:=VERBrec1.vps;
            VERBPPROPrec1.idkey:=VERBrec1.idkey;
            ...

AN COND     VERBPPROPrec1.vps*vpid1s<>[] and
            matchidtree1(VERBPPROPrec1.idkey,mu1,T1)
            ...

   ACTION   VERBPPROPrec1.vps:=[]
            ...
$NP
$ _subgrammar: VERBPPROPformation_$
$ TC: VPIDrules$
$ T: VPID2$

$ (*TYPE2*)$
$ (* rule for every idiom taking two arguments *)$

M1 : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/T1,
                                                   arg/T2]
M  : VERBPPROP{VERBPPROPrec1} [mu1]

GEN COND    VERBrec1.vps*vpid2s<>[];
            ...

    ACTION  mu1:=makeidtree2(VERBrec1.idkey,T1,T2);
            VERBPPROPrec1.vps:=VERBrec1.vps;
            VERBPPROP.idkey:=VERBrec1.idkey;
            ...

AN COND     VERBPPROPrec1.vps*vpid2s<>[] and
            matchidtree2(VERBPPROPrec1.key,mu1,T1,T2)
            ...

   ACTION   VERBPPROPrec1.vps:=[]
            ...
$NP
$ _subgrammar: VERBPPROPformation_$
$ TC: VPIDrules$
$ T: VPID3$

$ (*TYPE2*)$
$ (* rule for every idiom taking three arguments *)$

M1 : VERBPPROP{VERBPPROPrec1} [head/VERB{VERBrec1},arg/T1,
                                                   arg/T2,
                                                   arg/T3]
M  : VERBPPROP{VERBPPROPrec1} [mu1]

GEN COND    VERBrec1.vps*vpid3s<>[];
            ...


    ACTION  mu1:=makeidtree3(VERBrec1.idkey,T1,T2,T3);
            VERBPPROPrec1.vps:=VERBrec1.vps;
            VERBPPROP.idkey:=VERBrec1.idkey;
            ...

AN COND     VERBPPROPrec1.vps*vpid3s<>[] and
            matchidtree3(VERBPPROPrec1.key,mu1,T1,T2,T3)
            ...

   ACTION   VERBPPROPrec1.vps:=[]
            ...
$NP
$ _subgrammar: VERBPPROPformation_
$ TC: Zichspellingrules$
$ T: ANTECEDENT1$

$ (* Problem: rules are not very efficient; other solution: make pron and refl
in vpidrules *)$ 
$ (* rule for antecedent=subject *)$

M1 : VERBPPROP{VERBPPROPrec1} [subj/VAR{VARrec1},
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu1,
                                            rel1/NOUNP{}[det/POSSADJ
                                                         {POSSADJrec1},
                                                         mu2],
                                            mu3]]
M  : VERBPPROP{VERBPPROPrec1} [subj/VAR{VARrec1},
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu1,
                                            rel1/NOUNP{}[det/POSSADJ
                                                         {POSSADJrec1},
                                                         mu2],
                                            mu3]]

GEN COND    VERBPPROPrec1.vps*[vpid1a,...]<>[] and
            POSSADJrec1.antecedent=subject
            ...

    ACTION  POSSADJrec1.number:=VARrec1.number;
            POSSADJrec1.person:=VARrec1.person;
            POSSADJrec1.gender:=VARrec1.gender;
            POSSADJrec1.antecedent:=omegaantecedent
            ...

AN COND     VERBPPROPrec1.vps*[vpid1a,...]<>[] and
            POSSADJrec1.number=VARrec1.number and
            POSSADJrec1.person=VARrec1.person and
            POSSADJrec1.gender=VARrec1.gender
            ...

   ACTION   POSSADJrec1.number:=omeganumber;
            POSSADJrec1.person:=omegaperson;
            POSSADJrec1.gender:=omegagender;
            POSSADJREC1.antecedent:=subject;
            ...
$NP
$ _subgrammar: VERBPPROPformation_
$ TC: Zichspellingrules$
$ T: ANTECEDENT2$

$ (* rule for antecedent=object *)$

M1 : VERBPPROP{VERBPPROPrec1} [mu1,
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu2,
                                            obj/VAR{VARrec1},
                                            mu3,
                                            rel1/NOUNP{}[det/POSSADJ
                                                         {POSSADJrec1},
                                                         mu4],
                                            mu5]]
M  : VERBPPROP{VERBPPROPrec1} [mu1,
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu2,
                                            obj/VAR{VARrec1},
                                            mu3,
                                            rel1/NOUNP{}[det/POSSADJ
                                                         {POSSADJrec1},
                                                         mu4],
                                            mu5]]

GEN COND    VERBPPROPrec1.vps*[vpid2c,...]<>[] and
            POSSADJrec1.antecedent=object
            ...

    ACTION  POSSADJrec1.number:=VARrec1.number;
            POSSADJrec1.person:=VARrec1.person;
            POSSADJrec1.gender:=VARrec1.gender;
            POSSADJrec1.antecedent:=omegaantecedent
            ...

AN COND     VERBPPROPrec1.vps*[vpid2c,...]<>[] and
            POSSADJrec1.number=VARrec1.number and
            POSSADJrec1.person=VARrec1.person and
            POSSADJrec1.gender=VARrec1.gender
            ...

   ACTION   POSSADJrec1.number:=omeganumber;
            POSSADJrec1.person:=omegaperson;
            POSSADJrec1.gender:=omegagender;
            POSSADJREC1.antecedent:=object;
            ...
$NP
$ _subgrammar: CLAUSEtoSENTENCE_$
$ RC: Whshiftsubstitution$
$ R: ARGSUBST1$ 

$ (* the heart of VAR in subjectposition *)$

M1 : NOUNP{NOUNPrec1} [mu1]
M2 : VERBPPROP{VERBPPROPrec1} [mu2,
                               rel1/NOUNP{NOUNPrec2}[mu3,
                                                     mod/PREPP{PREPPrec1}
                                               [head/PREP{PREPREC1},
                                                obj/VAR{VARrec1}]],
                               mu4]
M  : VERBPPROP{VERBPPROPrec1} [mu2,
                               rel1/NOUNP{NOUNPrec1}[mu3,
                                                     mod/PREPP{PREPPrec1}
                                            [head/PREP{PREPREC1},
                                             obj/NOUNP{NOUNPrec1}[mu1]]],
                               mu4]

pre-action: ...

GEN COND    VARrec1.index=LEVEL and
            VARrec1.sort=npvar and
            VARrec1.person=NOUNPrec1.person and
            VARrec1.number=NOUNPrec1.number and
            VERBPROPrec1.vps*idvps<>[]
            ...

    ACTION  assigncase(NOUNP{NOUNPrec1}[mu1],accusative);
            PREPPrec1.mood:=NOUNPrec1.mood;
            ...

AN COND     NOUNPrec1.cases*[dative,accusative]<>[] and
            VERBPPROPrec1.vps*idvps<>[]
            ...

   ACTION   undocase(NP{NOUNPrec1}[mu1]);
            VARrec1:={index:LEVEL,
                      sort:npvar,
                      person:NOUNPrec1.person,
                      number:NOUNPrec1.number};
            ...
$NP
$ _subgrammar: CLAUSEtoSENTENCE_$
$ RC: Whshiftsubstitution$
$ R: ARGSUBST2$ 

$ (* VAR's heart in subject position *)$

M1 : NOUNP{NOUNPrec1} [mu1]
M2 : VERBPPROP{VERBPPROPrec1} [mu2,
                               rel1/NOUNP{NOUNPrec2}[mod/VAR{VARrec1},
                                             head/NOUN{NOUNrec1}[mu3]],
                               mu4]
M  : VERBPPROP{VERBPPROPrec1} [mu2,
                               rel1/NOUNP{NOUNPrec2}
                                          [mod/NOUNP{NOUNPrec1}[mu1], 
                                           head/NOUN{NOUNrec1}[mu3]],
                               mu4]

pre-action: ...

GEN COND    VARrec1.index=LEVEL and
            VARrec1.sort=npvar and
            VARrec1.person=NOUNPrec1.person and
            VARrec1.number=NOUNPrec1.number and
            VERBPROPrec1.vps*idvps<>[]
            ...

    ACTION  assigncase(NOUNP{NOUNPrec1}[mu1],genitive);
            PREPPrec1.mood:=NOUNPrec1.mood;
            ...

AN COND     NOUNPrec1.cases=[genitive] and
            VERBPPROPrec1.vps*idvps<>[]
            ...

   ACTION   undocase(NP{NOUNPrec1}[mu1]);
            VARrec1:={index:LEVEL,
                      sort:npvar,
                      person:NOUNPrec1.person,
                      number:NOUNPrec1.number};
            ...
$NP
$ _subgrammar: CLAUSEtoSENTENCE_$
$ RC: NOWhshiftsubstitution$
$ R: ARGSUBST3$ 

$ (* at VAR's door *)$

M1 : NOUNP{NOUNPrec1} [mu1]
M2 : VERBPPROP{VERBPPROPrec1} [mu2,
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu3,
                                            rel1/PREPP{PREPPrec1}
                                                 [head/PREP{PREPrec1},
                                                  obj/NOUNP{NOUNPrec1}
                                                      [mod/VAR{VARrec1},
                                                       mu4]],
                                            mu5]]
M  : VERBPPROP{VERBPPROPrec1} [mu2,
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu3,
                                            rel1/PREPP{PREPPrec1}
                                                 [head/PREP{PREPrec1},
                                                  obj/NOUNP{NOUNPrec1}
                                             [mod/NOUNP{NOUNPrec1}[mu1],
                                                mu4]],
                                            mu5]]

pre-action: ...

GEN COND    VARrec1.index=LEVEL and
            VARrec1.sort=npvar and
            VARrec1.person=NOUNPrec1.person and
            VARrec1.number=NOUNPrec1.number and
            VERBPROPrec1.vps*idvps<>[]
            ...

    ACTION  assigncase(NOUNP{NOUNPrec1}[mu1],genitive);
            PREPPrec1.mood:=NOUNPrec1.mood;
            ...

AN COND     NOUNPrec1.cases=[genitive] and
            VERBPPROPrec1.vps*idvps<>[]
            ...

   ACTION   undocase(NP{NOUNPrec1}[mu1]);
            VARrec1:={index:LEVEL,
                      sort:npvar,
                      person:NOUNPrec1.person,
                      number:NOUNPrec1.number};
            ...
$NP
$ _subgrammar: CLAUSEtoSENTENCE_$
$ RC: NOWhshiftsubstitution$
$ R: ARGSUBST4$ 

$ (* VAR's heart in object position *)$

M1 : NOUNP{NOUNPrec1} [mu1]
M2 : VERBPPROP{VERBPPROPrec1} [mu2,
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu3,
                                            rel1/NOUNP{NOUNPrec2}
                                                    [mod/VAR{VARrec1},
                                                     mu4],
                                            mu5]]
M  : VERBPPROP{VERBPPROPrec1} [mu2,
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu3,
                                            rel1/NOUNP{NOUNPrec2}
                                           [mod/NOUNP{NOUNPrec1}[mu1], 
                                                     mu4],
                                            mu5]]

pre-action: ...

GEN COND    VARrec1.index=LEVEL and
            VARrec1.sort=npvar and
            VARrec1.person=NOUNPrec1.person and
            VARrec1.number=NOUNPrec1.number and
            VERBPROPrec1.vps*idvps<>[]
            ...

    ACTION  assigncase(NOUNP{NOUNPrec1}[mu1],genitive);
            PREPPrec1.mood:=NOUNPrec1.mood;
            ...

AN COND     NOUNPrec1.cases=[genitive] and
            VERBPPROPrec1.vps*idvps<>[]
            ...

   ACTION   undocase(NP{NOUNPrec1}[mu1]);
            VARrec1:={index:LEVEL,
                      sort:npvar,
                      person:NOUNPrec1.person,
                      number:NOUNPrec1.number};
            ...
$NP
$ _subgrammar: CLAUSEtoSENTENCE_$
$ RC: NOWhshiftsubstitution$
$ R: ARGSUBST5$ 

$ (* the heart of VAR in objectposition *)$

M1 : NOUNP{NOUNPrec1} [mu1]
M2 : VERBPPROP{VERBPPROPrec1} [mu2,
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu3,
                                            rel1/NOUNP{NOUNPrec2}
                                                 [mu4,
                                                  mod/PREPP{PREPPREC1}
                                                    [head/PREP{PREPREC1},
                                                     obj/VAR{VARrec1}]],
                                            mu5]]
M2 : VERBPPROP{VERBPPROPrec1} [mu2,
                               pred/VERBP{}[head/VERB{VERBrec1},
                                            mu3,
                                            rel1/NOUNP{NOUNPrec2}
                                                 [mu4,
                                                  mod/PREPP{PREPPREC1}
                                          [head/PREP{PREPREC1},
                                           obj/NOUNP{NOUNPrec1}[mu1]]],
                                            mu5]]

pre-action: ...

GEN COND    VARrec1.index=LEVEL and
            VARrec1.sort=npvar and
            VARrec1.person=NOUNPrec1.person and
            VARrec1.number=NOUNPrec1.number and
            VERBPROPrec1.vps*idvps<>[]
            ...

    ACTION  assigncase(NOUNP{NOUNPrec1}[mu1],accusative);
            PREPPrec1.mood:=NOUNPrec1.mood;
            ...

AN COND     NOUNPrec1.cases*[dative,accusative]<>[] and
            VERBPPROPrec1.vps*idvps<>[]
            ...

   ACTION   undocase(NP{NOUNPrec1}[mu1];
            VARrec1:={index:LEVEL,
                      sort:npvar,
                      person:NOUNPrec1.person,
                      number:NOUNPrec1.number};
            ...

