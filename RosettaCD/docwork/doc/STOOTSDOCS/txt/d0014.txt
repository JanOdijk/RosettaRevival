$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$XC ~`

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta2

    ---------------------------------------------------------







         Title        :  EXTENSIONS OF ROSETTA2

         Author       :  Jan Landsbergen









         Doc.Nr       :  0014

         Date         :  85/12/13

         Status       :  approved

         Supersedes   :  

         Distribution :  project

         Clearance    :  Philips

         Keywords     :  bonus, semantic type, robustness
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Copyright  Nederlandse Philips Bedrijven B.V.

$ph Rosetta                       Doc.nr: 0014                date:85/12/13
$UC _
$NP 1
$LD 4
$SC &%






_1. Introduction_


$ Rosetta2 as described in M.S. 12.950  and document 
R0011 is a system based on the definition
of isomorphic M-grammars. From these definitions Rosetta2 emerges as a
translation function from sentences of a source language to sets of 
sentences of a target language. There are a number of other aspects of
Rosetta2 which are important for practical translation systems. Some of them
are discussed - informally - in this document:$
 1) the various ways in which the implemented Rosetta2 system can be used,
 2) the bonus system,
 2) the semantic type system,
 4) robustness measures.
$ For all these topics holds that Rosetta2 has been used as a vehicle for
experiments, but that they have to be investigated - and documented -
more
thoroughly in the future.$
$NP

_2. The various modes of Rosetta2_

$ This document is not intended to give directions for use; it
does not specify the precise way in which the system can be called and used,
but it discusses only in a general way the various possibilities.$

$ Apart from the choice of the source language and the target language there
are in principle three choices to be made concerning the mode in 
which Rosetta2 is used:$
(i) normal (non-special) use or special use.
(ii) interactive use or non-interactive use.
(iii) all possible translations or one translation.

$ ad (i). The _special mode_ is intended for the developers of the system. In 
this mode one can ask the system to show intermediate expressions on the
screen, to trace certain components, to stop at a certain point or to
make a "short-cut" between analysis and generation at a certain point.
Obviously the latter is only possible if the source language and the target
language are the same. It can be useful for testing components separately,
e.g. A-MORPH and G-MORPH.$
$ The _non-special_ mode is the normal mode in which the system performs the
complete translation for the input sentence and only shows the resulting
translation(s).$

$ ad (ii). Rosetta2 is an interactive system (i.e. not a batch system):
the user types the sentence to be translated and waits for the appearance
of the translation on the screen. If we speak of the interactive mode
of Rosetta, we mean something more specific: the possibility for the user
to influence
the translation process in a way directed by the system.$
$ In the _interactive mode_ the system may ask the user for
information. At the moment there are two places in the system where this
is possible: A-MORPH and A-TRANSFER.$ 
$ In A-MORPH there is an interaction in case of an unknown word in the input
sentence. In that case the user is requested to type in an alternative word.$
$ In A-TRANSFER there is an interaction in case of ambiguity. If a word has 
more than one meaning (i.e. A-TR%B%(b) is a set with more than one element),
the system gives a listing of the possible meanings and asks the user to
choose one of them. After this choice has been made the system gives only
translations of the input sentence in accordance with this choice. (This
interactive mechanism has been implemented, but is only executed for
ambiguous words if
the transfer dictionaries 
contain meaning descriptions, which is only the case for
a few example words.)$
$ The extension of the interactive mode for the solution of 
syntactic ambiguities is planned for the future, but obviously
more difficult.$
$ In the _non-interactive_ mode there is no interaction with the user during
the translation process (except for the question whether the user is
interested in more translations).$

$ ad (iii). If the user asks for one translation, the system chooses the "best"
translation from the set of possible translations, i.e. the translation
with the highest bonus (discussed in section 2). If the user asks for
all translations the system delivers them in order of plausibility 
according to the bonuses that have been assigned.$
$NP

_3. The bonus system_


$ Bonuses are numerical values that are assigned to intermediate expressions 
(S-trees, derivation trees) in the system and ultimately to translated
sentences in order to indicate whether they are more or less plausible. 
The developer of the system has the possibility to assign a positive or
negative bonus to an expression in certain cases, e.g. when a particular
syntactic rule is applied or when a particular word meaning is chosen
in A-TRANSFER.$

$ Examples:
$ In the syntactic rule that "deletes" a non-obligatory argument of
a verb (e.g. the indirect object of "to give") a negative bonus is assigned
to the result (i.e. the negative bonus is added to the bonus that the
expression already has). If there is also an analysis of the sentence in
which all arguments are specified, this analysis will be preferred. In this
way "He gives (the book) (to Mary)" is preferred to "He gives (the book 
to Mary)".$
$ In A-TRANSFER the bonus system enables to order the various translations
of words in a similar way as in a normal dictionary. Thanks to that the
system's first translation of "vrouw" is "woman" and not "queen".$
$ The bonus system is particularly useful in combination with the type
system (cf. section 3).$

$ At the end of the translation process the possible translations are ordered
with respect to their bonus. In the mode with all translations 
the only effect is this ordering. In the mode
with one translation the assignment of bonuses may lead to a different
translation.$

$ Up till now the bonus system has been used experimentally and ad hoc.
A systematic study of its use is required. Presumably it is useful to
have more than one bonus, in order to be able to discriminate between
various aspects. Furthermore we need good criteria for the assignments
of bonuses.$

$NP

_4. Semantic types_


$ The expressions of a logical language as used by Montague, have a 
semantic type. For example: the type e for entities, the type t for
truth values, the type <e,t> for functions from entities to truth
values (one-place predicates). If the basic meanings of our intermediate
language would be expressed in such a logical language, they would have
types too. If the meaning rules of IL would be specified in this
logical language, each rule would be applicable to expressions of
specific types and deliver expressions of a specific type. The logical
variables of IL would have types as well, in accordance with the type
of the phrase substituted for the variables.$
$ Even if we have an IL that is not an explicit logical language, it is 
important
to determine the types of its expressions. In the first place because the
syntactic categories of the source and the target
language can be related systematically via the types of IL, which is 
important for establishing the isomorphy. In the second place because
we can use the types to discriminate between plausible and less plausible
interpretations of the input sentence. This is possible if we have not just
one type "entity", but a many-sorted type system with, for instance, types
like human, animate, concrete, abstract, etc., and some kind of inclusion
relation between types. In the current Rosetta system the framework for this
is present already, but there is not yet an elaborated type system.$
$ The framework is as follows:$
$ (i) Each basic expression of IL has a type, which 
indicates what kind of entities
are denoted by this expression. So the terms of IL corresponding to nouns have
a type, but also adjectives, adverbs and verbs. In the latter cases the denoted
entities are things like events, situations, etc.$
$ (ii) Furthermore, for basic expressions that behave like functions (e.g.
verbs, adjectives and adverbs) the expected types of the arguments 
are specified.
E.g. the argument (subject) of the Dutch verb "fietsen" gets the type 
"human".$
$ (iii) Logical variables get the type of the expression that is substituted
for them. This is done by the substitution rules for the variables.$
$ (iv) A type test is added to - in principle - all meaning rules of IL.
This holds in particular for the meaning rules that involve the application
of a function: in these rules it is tested whether the type of the argument
is in accordance with the argument types expected by the function. If a
typetest fails we may give a negative bonus, or a positive one if it succeeds.
N.B.: a failing type test does not lead to the rejection of a particular
interpretation of a sentence, it only becomes less plausible.$

$ In the current Rosetta2 system there are only 2 types (human and non-human).$

$ In the type system as described here, the type test is done at the level of
the intermediate language and completely in terms of this IL. The advantage
of this is that the same type system can be used for all languages. An
alternative approach would be to add the type tests to the translation
rules in A-TRANSFER and G-TRANSFER. For instance, we could have a basic
meaning "LONG" in IL, which would be translated into the word "tall" if 
applied to entities of the type "human" and into "long" in other cases.
In fact, the current implementation is (was?) according to the latter
approach, but it turned out to be very complicated and presumably not
more powerful than the first approach. Note that for the example with
"LONG" we can get the same results if we have two meanings in IL, "long"
and "tall". In general, it is difficult to discriminate between the "intrinsic
meaning" of a word and its type conditions (think of "new", "young", "fresh",
for example.).$
$NP

_5. Robustness_


$ A practical translation system should be "robust", i.e. it should deliver
useful output even in cases that the input is incorrect (according to
the system's own standards). If, for instance, an input sentence contains
an unknown word or if it is syntactically incorrect, 
we would like to get at least a partial translation of that
sentence. Though a systematic treatment of robustness has not yet been
set up, a number of measures have been taken from which such a systematic
treatment seems to emerge. The general strategy is: if in a certain
component a "deviation of the standard" is noticed, measures are taken
such that the following components can work with this case in a way as
normal as possible. This strategy may become more clear if we
look at a few examples:$   

$ - A-MORPH. An unknown word gets the category BUG. A BUG has one
attribute, which has the unknown word itself as its value. 
The next components,
S-PARSER and M-PARSER have syntactic rules for this category, e.g.
PROPER-NOUN ===> BUG. There are corresponding 
meaning rules and generative rules as well. Furthermore the transfer
components are able to translate basic expressions of the category BUG.$

$ - S-PARSER. If the input cannot be parsed to one syntactic category,
a top node with category UG is created of which the sub-trees are
a row of constituents that "cover" the input sentence. The next
component, M-PARSER, is able to handle S-trees with top node UG.$

$ - M-PARSER. If this component fails for the S-tree as a whole, a special
rule, R%0%, is applied which does nothing but breaking up the S-trees into
its direct sub-trees (a more intelligent approach should be considered in
the future). The rule R%0% is mapped by the transfer component onto a
corresponding generative rule that combines the translated subtrees to one
new S-tree. $
$ Application of R%0% in M-parser may lead to local translation
of phrases and ultimately word-by-word translation.
There are special rules for guaranteeing that these phrases and
words 
are translated in a sensible way. E.g.: "gelopen" ==> "walked".$

$ - A-TRANSFER, G-TRANSFER. In the pure definition of Rosetta2 the
transfer must be defined only for stems of content words, not for function
words. Because of the possible failing of the previous components it is
sometimes necessary to have local transfer rules defined for function
words as well. E.g.: "de" ==> "the".$
$ Note that robustness measures that enable to translate isolated 
phrases or words
partially coincide with additions to the system that we need if we
want to be able to use it as a phrase translator.$

$ M-GENERATOR. If the isomorphy fails, that is, if not one of a group of
rules is applicable, an emergency rule (possibly a more tolerant version of
an already existing rule) is called in the hope that it is applicable.$

$ It is important that the system remembers that something went wrong and
is able to warn the user.$

$ There is a danger in making a system robust too early, i.e. during
development. In the first place there may be a tendency to present
sloppy grammar rules as robust rules; for example if a grammar writer
finds the checking of
subject-verb agreement too complicated, he may discard it
altogether presenting this as a robustness measure. This can be avoided
by requiring a strict separation between the real grammar and the
robustness additions. In the second place there is a problem with testing.
Sentences may be translated correctly by accident, thanks to robustness 
measures, especially if source and target language are the same. This
may lead to overlooking errors in the grammar that would otherwise have
been noticed. This problem might be avoided by creating the possibility
to switch the robustness rules off. In the third place it is hard to
define the robustness measures correctly if the rest of the system is
still under development. A recent example of this is the following: the
robustness rules that enable to translate the isolated word "worden" into
"become" are formulated in such a way that after the addition of idioms to 
the system (e.g. "kwaad worden" ==> "lose one's temper") 
they may translate "worden" into "lose".$ 
$NP



            CONTENTS



1. Introduction

2. The various modes of Rosetta2

3. The bonus system

4. Semantic types

5. Robustness


