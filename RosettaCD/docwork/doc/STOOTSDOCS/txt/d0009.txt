$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$XC ~`

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta2

    ---------------------------------------------------------







         Title        :  M-SYNTAX FOR DUTCH IN ROSETTA2.
                         DEFINITION OF THE DOMAIN T.

         Author       :  Jan Landsbergen









         Doc.Nr       :  0009

         Date         :  85/04/25

         Status       :  concept

         Supersedes   :  

         Distribution :  project

         Clearance    :  project

         Keywords     :  syntax, records, attributes, categories
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Nederlandse Philips Bedrijven B.V.

$ph Doc.nr: 0009                date:85/04/25
$Np 1
$LD 4
$SC &%
$UC _


_Introduction_

$ In the syntactic component of an M-grammar the domain T of S-trees is 
defined by specifying the set SYNCATS (syntactic categories), the
attributes for each syntactic category and their values and the set
SYNRELS (syntactic relations). In this document the SYNCATS are specified
in section 1, the attributes and values in section 2, the SYNRELS in
section 3. In accordance with the PASCAL terminology the package of
attributes corresponding to a category is called a record. (In section 1
the record type for each category is given, in section 2 the attributes of
which the records consist are specified.) In section 3 the set of basic
categories and the set of final categories are specified as well. 
 In section 4 the use of the attribute/values
is briefly explained.$
$NP

_1. SYNCATS_

$ We specify the syntactic categories and give for each category the 
corresponding record type. For each record type the attributes of which
it consists will be 
defined in the next section. For most categories illustrative examples of 
words, phrases or intermediate expressions with that category will be given.$

NOUN,                               {aap, apen}
BNOUN        : nounrecord;          {aap}
VERB,                               {loop, lopen}   
BVERB        : verbrecord;          {lopen}
ADJ,                                {mooi, mooier, mooie} 
BADJ         : adjrecord;           {mooi}
ADV          : advrecord;           {vaak}
PREP         : preprecord;          {op, in}
REFLPRO      : reflprorecord;       {zich, me}
BPERSPRO,                           {ik} 
PERSPRO      : persprorecord;       {ik, mij}
INDEFPRO     : indefprorecord;      {iets, iemand, niets, iedereen}
PROPERNOUN   : propernounrecord;    {Spanje}
POSSADJ      : possadjrecord;       {mijn, zijn}
POSSPRO      : possprorecord;       {de mijne}
BQADJ,                              {sommige, veel, alle}
QADJ         : qadjrecord;          {sommige, veel, vele, alle}
ASCOMP       : ascomprecord;        {even, meer, minder (in comparatieven)}
DEMPRO       : demprorecord;        {dit, deze (zelfstandig gebruikt)}
WHPRO        : whprorecord;         {wie, wat, hoeveel}
VAR          : varrecord;           {x%1%}     
PUNC,                               {.}
PART,                               {op, af, mee, teleur} 
ART,                                {de het, een} 
COORD,                              {en, of}
NEG,                                {niet}
THERE,                              {er}
CONJ,                               {als, omdat} 
TE,                                 {te (in: hij wenste te vertrekken)} 
EXCLAM,                             {ja, hallo}
THANAS,                             {dan, als (in comparatieven)}
WHADJ,                              {welk, wat voor} 
DEMADJ,                             {dit, deze (als determiner gebruikt)}
RELPRO,                             {die, dat}
ORDINAL,                            {eerste, derde} 
NUMERAL,                            {een, twee, 3, 4} 
WHPOSSADJ,                          {wiens}
EMPTY        : keyrecord;           
NP           : nomrecord;           {de oude man}
CL0,                                
CL1,
CL2,
CL3,
CL4,
CL5,
CL6,
CL7,
CL8,
CL9,
RELCL,                              {x%2% lopen, x%3% appels eten}        
OPENCOMPLCL,                        {x%1% lopen, x%1% appels eten}
GESLCOMPLCL,                        {hij lopen, hij appels eten}} 
ANTERELCL,                          {x%4% lopende, x%5% gegeten}
SENT,                               {hij loopt} 
RELSENT,                            {die loopt, die appels eet, die hij eet}
SUBSENT,                            {dat hij loopt, wie loopt}
ADVSENT,                            {omdat hij loopt}
TECOMPLSENT,                        {te lopen, appels te eten}
COMPLSENT,                          {lopen, appels eten} 
ANTERELSENT  : clrecord;            {lopende, appels etende}
OPENADJP,                           {x%1% oud, x%2% ouder dan Marie} 
ADJP         : adjprecord;          {oud, ouder dan Marie}
OPENPP,                             {x%1% in Spanje}
OPENPPVAR,                          {x%1% in x%2%} 
PPVAR,                              {in x%2%}
PP           : pprecord;            {in Spanje} 
GLUE,
UTT,                                {hij loopt, de man, hallo}  
THANP,                              {dan Marie}
NUMP         : no attributes.       {drie, meer dan 3, 2 pond}

$ (Categories that play only a role inside the morphological component, are
not included in this list. The same holds for 
categories that have been introduced
for robustness reasons.)$
$NP
  
_2. The attributes and their values._

$ Inherent attributes are underlined. The notion "inherent attribute" is
relevant for records corresponding to word categories. An inherent attribute
denotes a property of the stem of that word. Its value will not be altered
by syntactic or morphological rules.$
$ In Pascal a set of attribute values is in general defined by an enumerated
type. In most cases the name of the type is derived from the name of the 
attribute, e.g. tijdtype characterizes the set of values of the attribute
tijd. The declaration of these types can be found in the file rectypedecl.
Here the set of values of each attribute is simply enumerated. In some cases
there is a minor difference with the Pascal types: two enumerated Pascal types
are not allowed to have elements in common, because of this the types
are sometimes unions of different but overlapping sets of values.$


verbrecord:        {tijd:         (TegenwTijd, Verltijd, GebWijsZijn, VoltDw,
                                   TegDw, VoltDwE, TegDwE, Infinitief, TeInf,
                                   omegatijd),
                    getal:        (enkelvoud, meervoud, omegagetal),
                    personen:      subset of (0,1,2,3,4),
                    _vervoegkl_:     0..118,
                    _part_:          key,
                    _possvoices_:    subset of (active, passive,erpassive)     
                    _reflexive_:    (true, false),
                    _vps_:           subset of  (vp0,vp1a,vp1b,vp1c,vpmodal1,
                                   vp2a,vp2b,vp2c,vp2d,vp2e,vp2f,vp2g,
                                   vp2h,vp2i,vpmodal2,
                                   vp3a,vp3b,vp3c,vp3d,vp3f,vp3g),
                    _aantalargs_:   0..3,
                    _voltvormen_:   subset of (isvorm, hebvorm),   
                    _prep_:         key,
                    _key_:          key                              }


nounrecord:        {_mvvormen_:     (OnregMv, AlleenEnk, AlleenMv, EnMv,
                                   GeenVerdEnMv, ScherpEnMv, MedVerdEnMv,
                                   NMv, SMv, ErenMv),
                    getal:         (enkelvoud, meervoud, omegagetal),
                    _verklvormen_:   (regelmverkl, inkje, VV1je, etje, 
                                   onregverkl, geenverkl),
                    verklwoord:    (true, false),
                    _genvorm_:       (geengen, regelmgen, onreggen),
                    genitief:      (true,false),
                    _soort_:         (aanspreeknoun, beroepnoun, eenheidnoun,
                                   anderenoun),
                    _genders_:       subset of (mnlgender, vrgender, 
                                   onzgender),
                    _natgeslacht_:   (mannelijk, vrouwelijk),
                    _subc_:          (count, mass),
                    _prep_:          key,
                    _key_:           key                           }

adjrecord:        { _negvorming_:    (OnNeg, GeenNeg, OnregNeg),
                    _compvorming_:   (RegErComp, ScherpErComp, MedVerdErComp,
                                    OnregComp, GeenComp),
                    _evorming_:      (RegEAdj, ScherpEAdj, MedVerdEAdj,
                                    GeenEAdj, OnregEAdj),
                    negvorm:        (true, false),
                    evorm:          (true, false),
                    genvorm:        (true, false),
                    trap:           (stellend, vergrotend, overtreffend), 
                    _prep_:           key,
                    _gebruik_:       (attrib, predic, omegagebruik),
                    _key_:            key                            } 


advrecord:       {  _mood_:         (whinterr, declarative, omegamood),
                    _soort_:        (tijdadv, plaatsadv, andereadv, antenpadv,
                                     eradv, waaradv, adjadv),
                    _key_:          key                              }


preprecord:      {  _soort_:        (gewoneprep, splitprep, postprep),
                    _postpkey_:     key,
                    _key_:          key                              }


reflprorecord:   {  _getal_:        (enkelvoud, meervoud, omegagetal),
                    _persoon_:      1..4,
                    _key_:          key                              }


persprorecord:   {  _gender_:       (mnlgender, vrgender, onzgender, 
                                     omegagender),  
                    cases:         subset of (nominative, dative, accusative),
                    _persoon_:       1..4,
                    _getal_:         (enkelvoud, meervoud, omegagetal),
                    _beleefdheidsvorm_: (true, false),
                    reduced:       (true, false),
                    _key_:         key                               }


indefprorecord:  {  _getal_:         (enkelvoud, meervoud, omegagetal),
                    _key_:           key                             }


propernounrecord: { _getal_:         (enkelvoud, meervoud, omegagetal),
                    _natgeslacht_:   (mannelijk, vrouwelijk)         
                    _key_:           key                             }



possadjrecord:    { _persoon_:       1..4,
                    _getal_:         (enkelvoud, meervoud, omegagetal),
                    _gender_:        (mnlgender, vrgender, onzgender),
                    evorm:         (true, false),
                    _key_:           key                             }


possprorecord:    { _bezpersoon_:    1..4,
                    _bezgetal_:      (enkelvoud, meervoud, omegagetal),
                    _bezgender_:     (mnlgender, vrgender, onzgender),
                    _key_:           key                             }


qadjrecord:       { _posscomanmrs_: subset of (plurcount, singmass, singcount),
                    comanmrs:       subset of (plurcount, singmass, singcount),
                    genders:        subset of 
                                    (mnlgender, vrgender, omegagender),
                    _key_:           key                             } 


ascomprecord:     {_trap_:          (stellend, vergrotend, overtreffend),
                   _key_:           key                              }


demprorecord:     {_getal_:         (enkelvoud, meervoud),
                   _key_:           key                              }

 
whprorecord:      {_getal_:         (enkelvoud, meervoud),
                   _key_:           key                              }



varrecord:        {_index_:         integer,
                   soort:         (npvar, predvar, clvar, othervar)
                   persoon:       1..4,
                   getal:         (enkelvoud, meervoud, omegagetal)}


 
keyrecord:        {_key_:           key                              }


nomrecord:        {getal:         (enkelvoud, meervoud, omegagetal),
                   soort:         (hetpro, persproniethet, wiewatsoort,
                                   indefprosoort, ditdatsoort, conjsoort,
                                   omeganomsoort),
                   persoon:        1..4,
                   natgeslacht:   (mannelijk, vrouwelijk, omegageslacht),
                   supertense:    (presenttense, pasttense, omegatense),
                   mood:          (whinterr, declarative, omegamood),
                   cases:         subset of (nominative, dative, accusative),
                   quant:         (defquant, indefquant, whquant, omegaquant)}


clrecord:       {  mood:          (yesno, whinterr, declarative, 
                                   impenk, impmv, omegamood),
                   voice:         (active, passive, erpassive, omegavoice),
                   tijd:          (ott,ovt,vtt,vvt,ottt,ovtt,vttt,vvtt,
                                   oinft,vinft,oinftt,vinftt,oteinft,vteinft,
                                   oteinftt,vteinftt,tegdwcltijd,voltdwcltijd,
                                   irrpres,irrpast,omegacltijd),
                   supertense:    (presenttense, pasttense, omegatense),
                   soort:         (hoofdzin, bijvbijzin,
                                   datdeelzin, ofdeelzin, whdeelzin,
                                   finietbijzin, voltdwbijzin, tegdwbijzin,
                                   opencomplzin, geslcomplzin, omegaclsoort),
                   vps:            subset of (vp0,vp1a,vp1b,vp1c,vpmodal1,
                                   vp2a,vp2b,vp2c,vp2d,vp2e,vp2f,vp2g,
                                   vp2h,vp2i,vpmodal2,
                                   vp3a,vp3b,vp3c,vp3d,vp3f,vp3g)    }


pprecord:        { mood:          (whinterr, declarative, omegamood),
                   soort:         (tijdadv, plaatsadv, andereadv, antenpadv,
                                   eradv, waaradv, adjadv),
                   prepkey:        key,
                   supertense:    (presenttense, pasttense, omegatense)   }
                   


advprecord:      { mood:          (whinterr, declarative, omegamood),
                   soort:         (tijdadv, plaatsadv, andereadv, antenpadv,
                                   eradv, waaradv, adjadv)                }


adjprecord:      { mood:          (whinterr, declarative, omegamood),
                   evorm:         (true, false),
                   gebruik:       (attrib, predic, omegagebruik)          }
                   
                   

_3. The sets SYNRELS, BASICCATS and TOPCATS_

SYNRELS = [_headrel_, _subjrel_, _postsubjrel_, _predrel_, _indobjrel_,
           _objrel_, _complsubjrel_, _danglingrel_, _complrel_, _shiftrel_,
           _conjrel_, _omrel_, _terel_, _postpreprel_, _ascomprel_,
           _detrel_, _reflrel_, _partrel_, _extraposrel_,
           prepobjrel, argrel, auxrel, modrel, gluerel, puncrel,
           ugrel]

$ The underlined relations may occur only once in a reltreelist.$


BASICCATS = [BNOUN, BVERB, BADJ, ADV, PREP, BPERSPRO, INDEFPRO,
             PROPERNOUN, POSSPRO, BQADJ,  DEMPRO,
             WHPRO, VAR, PUNC, COORD, NEG, CONJ, EXCLAM, WHADJ, ORDINAL,
             NUMERAL, WHPOSSADJ, EMPTY]   {the real basic cats of basic
             S-trees of the official M-grammar} +
            [TE, THANAS, ART, THERE, ASCOMP, POSSADJ, DEMADJ, RELPRO, GLUE ]
            {the additional basic cats for expressions that are also in B-LEX,
             for use in the morph. component and/or for local translation
             of the words with these categories}


TOPCATS = [UTT]
$NP

_4. Attribute values. Explanatory notes._

_4.1. Verbrecord_

$ Tijd, getal and personen are attributes that give information about
the form of the verb. In B-LEX: tijd = omegatijd, getal = omegagetal,
personen = []. Detailed information about the values of these three
form attributes is given in the documentation of Dutch morphology
(to appear).$

- vervoegkl (vervoegklasse = conjugation class)
$ value: a number in the range 0 - 114.$
$ The vervoegkl determines how the verb is to be 
conjugated. For each verb there is only one conjugation class. This
results in special conjugation classes for verbs with a combination
of conjugations, e.g. melkte/molk. $

- part: (particle)
value: a basic key.
$ It specifies the key of the particle (scheidbaar deel) of the verb. The
value is 0 if the verb has no particle. E.g. "opstaan" has itself a unique
key, which corresponds in AMDICT and GMDICT with the stem "sta", the attribute
part gives in that case the key of the particle "op". The verb "afstaan" has
a different key (which corresponds with "sta" too), 
its verbrecord contains the key of "af" as the value of the
part attribute.$
Cf. M-rule RTIJD1.

- possvoices: (possible voices)
value: a non-empty subset of [active, passive, erpassive].
$ It indicates if the verb can occur in the active and/or the passive 
voice. The erpassive indicates if the passive form with "er" is possible,
as in "er wordt geluisterd". N.B.: "er wordt iemand vermoord" is not
an erpassive. It is a transformational variant of "iemand wordt vermoord";
this use of "er" at subject position is possible in active sentences
as well, e.g. er loopt iemand".$
Cf. M-rules RVOICE1,2.

- reflexive: 
value: true or false.
$ Indicates whether the verb is reflexive or not. A verb that can be used
both reflexively and irreflexively must have two entries in the lexicon.
The reflexive pronoun is not considered as an "argument", e.g. "zich
schamen" has 1 argument.$
Cf. M-rule RTIJD1.

- voltvormen: (voltooid deelwoord-vormen, auxiliaries of the past participle)
value: a non-empty subset of [hebvorm, isvorm].
$ Indicates if the auxiliary verb is "zijn" (e.g. "is gekomen") or "hebben" 
(e.g. "heeft gegeten") or may be both ("heeft verloren", "is verloren").$
Cf. M-rule RTIJD1.

- prep: (preposition)
value: the key of a preposition.
$ If the verb has a prepositional object, the prep indicates what its
preposition is. In practice the notion prepositional object is 
interpreted in a rather broad-minded way.$
$ E.g.: "rekenen op" has a key that corresponds with the stem "reken"
(in AMDICT and GMDICT), the attribute prep specifies the key of the
preposition "op".$
Cf. M-rule RVP3.

- aantalargs (number of arguments).
value: 0, 1, 2 or 3.
$ Specifies the number of arguments that the verb has from a semantic point
of view. It must correspond with the number of arguments of the
corresponding IL function. Examples: "regenen": 0; "lopen": 1; "eten": 2;
"geven": 3.$
Cf. M-rules RSTARTCL0-3.

- vps: (verb patterns)
value: a non-empty subset of [vp0, vp1a, vp1b, vp1c, vpmodal1, vp2a, 
vp2b, vp2c, vp2d, vp2e, vp2f, vpmodal2, vp3a, vp3b, vp3c, vp3d, vp3f].
$ The original source of inspiration for this attribute is Hornby's OALD,
but by now we have deviated fairly strongly from the OALD system. There
is no precise definition of verb pattern at the moment. Hornby does not
give a definition either, he says: they "supply information on syntax".
A better term for verb pattern would be _sentence pattern_; it indicates
roughly 
what kind of arguments the verb may have and at what place and with what
syntactic relation they may occur in a decarative sentence.$
$ The names of the verb patterns have been chosen in such a way that
the number behind "vp" (0, 1, 2 or 3) 
indicates the number of arguments that occurs
in the sentence pattern. This number of actually occurring arguments
may not be more than the number of than the value of "aantalargs".
But it may be less. E.g. "eten" has aantalargs = 2, but one of its
verb patterns is vp1a of intransitive verbs: "Marie eet appels"
is allowed, but "Marie eet" as well.$
$ At the moment deletion of an argument means existential quantification
over that argument (there is an x such that "Marie eet x"), but one
might add extra verb patterns for deletions with a different meaning. 
Another current restriction is that only the last i (1 or 2) arguments
may be deleted, but that might be changed in a similar way by adding
more verb patterns. (At the moment the existential quantification
for a deleted argument is supposed to have the smallest scope, i.e.
"iedereen eet" means that for every person holds that there is something
he eats. Is that always the case?)$
$ A verb pattern provides the following information:$
$ (1) The number of arguments of the verb that is actually realized in
the sentence pattern.$
$ (2) The (syntactic) nature of the arguments: for each argument the
possible syntactic categories and the syntactic relation.$
E.g.: vp2a indicates that the first argument is a subject/NP and that
the second argument is an object with category NP or SUBSENT. If a vp
indicates that there is a prepositional object, the value of the 
attribute "prep" should specify the key of the corresponding preposition.$
$ (Whether there is a particle or not, is only indicated by the attribute
"part" and not by "vps"; in Dutch there seems to be no correlation
between the occurrence of a particle and the aspects described by verb
patterns.)$
$ (3) In principle the vp gives also information about the order of
the arguments in a declarative sentence, but at the moment this
information is redundant if we know the syntactic categories and
relations.$
$ (4) Information about the applicability of certain (optional or
obligatory) transformations. $
$ E.g.: vp1a tells that a verb like "lopen" with an indefinite subject
like "iemand" may have both the pattern "iemand loopt" and "er loopt 
iemand". Vp1c tells that only the pattern with "er" is allowed, only
the verb "zijn" has this pattern.$
$ I speak of "transformations" here, because that is the usual term,
but it would be preferable to speak of variants of a sentence pattern.
Whether this pattern is realized directly or by applying a
transformation to another pattern, is at the moment 
not prescribed by the vp. $
$ (5) Information about the identity relation between the (deleted) subject of
a complement sentence and an argument of the main sentence.
The distinction between "vragen" and "beloven" in sentences like "hij vraagt
mij te vertrekken" and "hij belooft mij te vertrekken" is expressed by 
means of the
verb patterns vp3c and vp3d.$

The current Dutch verb patterns:

- vp0
subj/ het + head/ VERB                (het regent)
Examples: regenen, sneeuwen, dooien.

- vp1a
subj/ NP + head/ VERB                 (Jan loopt)
For an indefinite NP transformation into the following pattern is allowed:
subj/ er + head/ VERB + postsubj/ NP  (er loopt iemand)
Examples: lopen, zitten, eten.

- vp1b
subj/ het + head/ VERB + extrapos/ SUBSENT  (het schijnt dat ...)
Examples: schijnen, blijken, lijken.

- vp1c 
subj/ er + head/ VERB + postsubj/ NP    (er zijn mensen)
Example: zijn.
vp1c is needed in addition to vp1a to indicate that "er zijn mensen" is
possible, but "mensen zijn" is not. This is a rather atypical, negative, use of
a vp, vp1c primarily indicates that the pattern subj/ NP + head/ VERB
is _not_ possible.$

- vpmodal1
For 1-place modal verbs.

- vp2a
subj/ NP%1% + head/ VERB + obj/ NP%2%   (Jan slaat Marie)
   ,,             ,,     obj/ SUBSENT%2%  (Jan belooft dat hij komt)
                                        (also "of" and "wie" - SUBSENT)
Example: slaan, eten, vergeten, beloven, zien.

$ Here and in the sequel an obj/ SUBSENT is allowed everywhere where an obj/ NP
is allowed. So no difference has been made between "eten" and "vergeten". This
should be changed in the future.$     

$ The subscripts in NP%1% and NP%2% indicate whether the first or the 
second argument is intended. One of the tasks of the vps is to show where
each argument has to be placed; I will use subscripts to show this.$

- vp2b
subj/ NP%1% + head/ VERB + prepobj/ PP(...NP%2%)
   ,,            ,,      er + PREP + extrapos/ SUBSENT
                                        (ik reken op hem;
                                         ik reken erop dat...)    
Examples: rekenen op, kijken naar.
Remark: in completed surface structures the relation is not prepobj, but mod.

- vp2c 
subj/ NP%1% + head/ VERB + compl/ INFCOMPL%2%
                                        (hij gaat vissen)
Examples: gaan, leren.
Remark: the deleted subject of the complement must be identical to the subject
of the main sentence: x%1% gaat (x%1% fietsen).

- vp2d 
subj/ NP%1% + head/ VERB + compl/ TEINFCOMPL%2%
                                        (hij beloofde te gaan)
Examples: beloven, schijnen, vergeten, verwachten.
Remark: the deleted subject of the complement must be identical to the subject
of the main sentence: x%1% beloofde (x%1% gaan).

- vp2e
subj/ NP%1% + head/ VERB + pred/ ADJP%2%
                                        (hij is oud)
Examples: zijn, lijken, schijnen, worden.
Remark: the argument of the predicate must be identical to the subject of the
main sentence: x%1% is (x%1% oud)

- vp2f
subj/ NP%1% + head/ VERB + complsubj/ NP + compl/INFCOMPL%2%
                                        (hij ziet mij komen)
Examples: zien, voelen, laten.
Remark: the complsubj is the subject of the complement, but is - in Dutch -
not part of the complement (hij ziet mij niet graag komen).

vp2g, vp2h and vp2i are verb patterns that were planned but have not been
realized in the current grammar:
vp2g for "hij is in de kamer",
vp2h for "ik betwijfel of hij komt",
vp2i for "ik vraag op te houden". 

- vpmodal2
For 2-place modal verbs.

- vp3a
subj/ NP%1% + head/ VERB + indobj/ NP%3% + obj/ NP%2%  (or SUBSENT%2%)
                                      (ik geef haar een boek,
                                       ik vertel haar dat ik kom)
Examples: geven, vertellen, zeggen.

- vp3b
subj/ NP%1% + head/ VERB + obj/ NP%2% + prepobj/ PP(...NP%3%)
                                      (ik geef het boek aan Marie)
subj/ NP%1% + head/ VERB + prepobj/ PP(...NP%3%) + obj/ SUBSENT%2%
                                      (ik vertel aan Marie dat ik kom)
Examples: geven, vertellen, zeggen.
Remark: in completed surface structures the relation is not prepobj, but mod.

- vp3c
subj/ NP%1% + head/ VERB + indobj/ NP%3% + compl/ TEINFCOMPL%2%
                                      (ik vraag haar te komen)
Examples: vragen, verzoeken, bevelen.
Remark: the deleted subject of the complement must be identical to the 
indirect object of the main sentence: x%1% vraagt x%3% (x%3% komen).

- vp3d
subj/ NP%1% + head/ VERB + indobj/ NP%3% + compl/ TEINFCOMPL%2%
                                      (ik beloof haar te komen)
Example: beloven.
Remark: the deleted subject of the complement must be identical to the subject
of the main sentence: x%1% belooft x%3% (x%1% komen).

- vp3f   
subj/ NP%1% + head/ VERB + obj/ NP%2% + pred/ ADJP%3%
                                      (ik verf de deur groen)
Examples: verven, maken.
Remark: the argument of the predicate is identical to the object:
x%1% verft x%2% (x%2% groen).

vp3g was planned as the verb pattern for zetten, leggen, but has not been
realized.

There are additional verb patterns for idiomatic expressions, they are 
not discussed here.

Cf M-rules RVP0 - RVP6.
$NP

_4.2. Nounrecord_

$ Mvvormen, verklvorm and genvorm give information about the possible forms
of the noun. These attributes are especially relevant for the morphological
component. However, they are relevant 
for the syntax as well. E.g. if mvvormen=[AlleenEnk] (only singular form 
allowed) the syntactic rules must not create a plural form, i.e. assign
the value meervoud to the attribute getal. Getal (number), 
verklwoord(diminutive) and genitief indicate 
the actual form. In the
basic lexicon, for category BNOUN, getal=omegagetal, verklwoord=false,
genitief=false.$

- soort:
value: aanspreeknoun, beroepnoun, eenheidnoun or anderenoun.
An example of an aanspreeknoun is "mevrouw",
an example of a beroepnoun is "minister" (may occur in constructions like
"minister Jansen", "hij is minister"),
"pond", "meter" are eenheidnouns, they occur in constructs like "2 pond kaas";
they have the singular form in constructs where other nouns would be plural.
All other nouns have soort=anderenoun.
$ Comment: The attribute soort gives a rudimentary subcategorization. 
It is very ad hoc and should be reconsidered in the future. In the 
current syntax only the difference between eenheidnoun and anderenoun is used.
If other soort's are added, it should be investigated to what extent they
are mutually exclusive, maybe an attribute "soorten" with a set of values is
needed.$

- genders:
value: a subset of [mnlgender, vrgender, onzgender].
It indicates the syntactic gender(s). In practice only the difference between
onzgender (onzijdig = neuter) and the other genders is relevant.
Cf M-rule RNP1.

- natgeslacht:
value:  mannelijk or vrouwelijk.
$ It indicates the natural gender. E.g. "meisje" has genders = [neuter], but
natgeslacht = vrouwelijk. It will be useful for the solution or determination
of anaphoric pronouns (a.o. in idioms like "zijn/haar opwachting maken"), 
but is not used at the moment. $

- subc:
value: count or mass.
$ It indicates the usual difference between count nouns (huis, boom) 
and mass nouns (water, melk). The problem here is that the distinction
is not always that clear. Many count nouns can be used as mass nouns too
(e.g. "appel"). The difference is of importance in the syntax for the
syntax and for translation, as mass nouns are always singular, but in a
way have "a plural meaning" and because a singular mass noun is a correct
NP and a singular count noun is not. (however: in current 
Dutch analysis singular
count nouns are allowed as NP's, with a negative bonus).$
Cf M-rule RNP1.

- prep:
value: the key of a preposition.
$ It indicates a "prepositional object" of the noun. E.g. "van" in a
function noun like "prijs", or "met" for "verschil".It is hardly used
at the moment.$
Cf M-rule RNP15. 

_4.3. Adjrecord_

$ The attributes negvorming, compvorming and evorming give information
about the possible forms of the adjective. They are especially relevant for the
morphological component. However, they are relevant
for the syntax too. E.g. if an adjective is added to an NP (RNP14), it must
get the e-vorm in some cases, but only if the e-vorm is allowed, according to
the attribute evorming. Similarly for the comparative and the negative form.
Cf. RAJP1.$
$ The attributes negvorm, evorm, genvorm and trap indicate the actual
form of the adjective.$
- negvorm: true for an adjective in negated form (e.g. ontevreden),
           otherwise false.
- evorm:   true for "dikke", false for "dik".
- genvorm: true for "goeds" (in "iets goeds"), otherwise false. Not used
           in the current syntax.
- trap:    stellend for "oud", vergrotend for "ouder",
           overtreffend for "oudst".
$ In BLEX, for the category BADJ, negvorm, evorm and genvorm are false
and trap=stellend.$

- prep:
Value: the key of a preposition.,
$ It indicates a "prepositional object" of the adjective. E.g. "met" for the
adjective "blij".$
Cf. M-rule RADJP5.

- gebruik:
Value: attrib, predic, or omegagebruik.
Indicates whether the adjective can be used attributively (in front of a noun),
predicatively (e.g. with "zijn") or both (omegagebruik).


_4.4. Advrecord_

$ Besides the key there are two inherent attributes (at the moment there are no
morphological rules for adverbs, so there is no difference between stems
and conjugated forms). The attributes are:$
- mood:
value: whinterr, declarative or omegamood,
$ Mood = whinterr for adverbs like "hoe" or "waar" and otherwise declarative.
The value omegamood is not used. ADVP's have the same attributes and
there the value omegamood is useful for intermediate results in the grammar,
i.e. for adverbial phrases in construction for which the mood is yet to
be determined.$
- soort:
value: tijdadv, plaatsadv, andereadv, antenpadv, eradv, waaradv or adjadv.
$ This attribute gives a rather primitive classification of adverbs. Some
of them (eradv, waaradv) are only useful in the surface syntax, where they
are used to recognize an ADVP consisting of the word "er" or the word "waar",
respectively. Tijdadv and plaatsadv indicate time and place adverbs 
respectively. Antenpadv is for adverbs like "zelfs" and "ook" that may be
at the beginning of an NP. Adjadv is for adverbs that may modify an
adjective or another adverb, like "erg", "tamelijk". Andereadv is the attribute
value for adverbs that do not belong to one of the other classes. One of
the problems with this classification is that adverbs may belong to more than
one class. A complete revision of this attribute is necessary and may lead 
to the introduction of additional attributes.$


_4.5. Preprecord_
- soort:
value: gewoneprep, splitprep or postprep.
$ Splitprep indicates that the preposition consists of a preposition and
a particle, e.g. "naar ... toe", "van ... af". Postprep indicates a preposition
that must be placed behind the NP in a PP, e.g. "in" in "de tuin in" ("in" will
be twice in the lexicon, as a postprep and as a gewoneprep). Gewoneprep is
the value for all other prepositions.$
- postpkey:
value: the key of a particle. 
$ It indicates the particle of a splitprep.
The value should be 0 for other kinds of prepositions.$


_4.6. Reflprorecord_
- getal:
value: enkelvoud, meervoud or omegagetal.
$ It indicates the number of the reflexive pronoun. "je" is "enkelvoud",
"ons" is "meervoud", "zich" must occur twice in the lexicon. "Omegagetal"
is intended for the case that a reflexive pronoun is created in the syntax
before one knows person and number, but this possibility is not used at the
moment and may never be used.$
-persoon:
value: 1..4.
$ Indicates the person of the reflexive pronoun. 4 is used as the person of
the polite form "u".$


_4.7. Persprorecord_
$ Besides the inherent attributes there are two form attributes: cases (for
the difference between "ik" and "mij") and reduced (for the difference 
between "mij" and "me"). In the basic lexicon cases=[] and reduced=false.
So in the basic lexicon there is one entry representing both "ik", "mij" and
"me", the morphological component must relate this to the actual words with
a particular value for cases and reduced.$ 
- gender:
value: mnlgender, vrgender, onzgender or omegagender.
$ Indicates the gender of the personal pronouns "hij", "zij", "het". Is
omegagender for other personal pronouns.$
- cases: 
value: subset of [nominative, dative, accusative],
"ik" has cases = [nominative], "mij" and "me" have cases = [dative, accusative]
The dative is only used for expressing the difference between "hen" and "hun".
- persoon:
value:  1, 2, 3 or 4,
persoon = 4 for "u". 
- getal: 
value: enkelvoud, meervoud or omegagetal.
$ The value omegagetal is not used for personal pronouns, but is used in other
records with the same attribute getal.$
- beleefdheidsvorm (polite form):
value: true or false.
$ Since there is a special value of person (4) for the polite form, this 
attribute is redundant.$
- reduced:
value: true or false.
Indicates the difference between e.g. "mij" and "me", "aan mij" is correct,
"aan me" is not.


_4.8. Indefprorecord_
$ At the moment INDEFPRO (indefinite pronoun) is a garbage category in which
very different kinds of words are put. They have in commom that they have
a quantifier aspect and that they can be used independently (as NP).
E.g. iets, alles, sommige, een beetje. Some of them (e.g. alles) are
obviously not indefinite. A complete reorganisation for these words is 
necessary.$
$ The only attribute is getal (number).$
- getal:
value: enkelvoud, meervoud or omegagetal.


_4.9. Propernounrecord_ 
$ PROPERNOUN is the category for names. Besides the key there are two
attributes: getal (number) and natgeslacht (natural gender). In the pure 
syntax all proper nouns have to be in the lexicon. In the robust extension
there is a syntax rule that converts an arbitrary unknown word into a
proper noun. In that case the values of getal and natgeslacht have to be
guessed.$ 
- getal:
value: enkelvoud, meervoud or omegagetal.
- natgeslacht:
value: mannelijk or vrouwelijk.
$ It indicates the natural gender. E.g. "Marie" has natgeslacht = vrouwelijk. 
 $


_4.10. Possadjrecord_  
$ POSSADJ is the category of possessive pronouns like "mijn", "jouw". 
(the category POSSPRO is reserved for independently used pronouns (in 
English "hers", for instance, in Dutch "de hare"). There is one form
attribute, evorm, for the difference between "ons" and "onze".$
$ In the syntax the possessives are derived from the personal pronouns
and the attributes persoon, getal and gender have the same value as
the corresponding personal pronoun.$


_4.11. Possprorecord_
$ POSSPRO is the category of an independently used possessive, e.g. "de
zijne", "die van jullie". They should be derived from personal pronouns,
it seems, but at the moment they are basic expressions. The attributes
bezpersoon, bezgetal and bezgender indicate the person, number and
gender of the corresponding personal pronoun and not of the possessive
itself. E.g. "de mijne" has bezpersoon = 1, but will be an NP with
persoon = 3.$


_4.12. Qadjrecord_
$ BQADJ and QADJ are garbage categories (like INDEFPRO) for adjectives 
with a quantifier aspect, e.g. alle, weinig, zoveel, beide, sommige, zulke.$
$ There are two attributes for indicating the form of the QADJ. 
The attribute comanmrs indicates whether this particular form can be
combined with a plural count noun (plurcount), a singular count noun 
(singcount) or a singular mass noun (singmass). The attribute genders 
indicates whether this particular form can be combined with a neuter,
a masculine or a feminine noun. E.g., there is one BQADJ for both "elk"
and "elke". The form "elk" has genders = [neuter], the form "elke" has
genders = [mnlgender, vrgender]. Both forms have comanmrs = [singcount].
Another example: "veel" and "vele" have the same BQADJ, but "veel" has
comanmrs = [pluralcount, singmass], "vele" has [pluralcount].$
- posscomanmrs:
value: a subset of [plurcount, singmass, singcount].
$ This inherent attribute indicates what the possible values of comanmrs are 
for this BQADJ. In the generative syntax, it has to be decided whether a
particular QADJ can be combined with a particular noun. Posscomanmrs tells
whether or not it can get a form that may 
be combined with a plural count noun etc. E.g. the
BQADJ for "elk" and "elke" has posscomanmrs = [singcount] 
can only be combined with a singular count noun.$
$ Presumably the translation of quantifiers like these should take place 
at a more
abstract level. One of the interesting translation problems is that a
singular mass noun can be translated into a plural count noun and that the
translation of the BQADJ must be able to cope with this.$   


_4.13. Ascomprecord_:
$ ASCOMP is the category for the words even, meer, meest, minder, minst, used
in comparatives and superlatives. Besides the key there is one attribute, trap,
that indicates the difference between the neutral (even), the comparative 
(meer, minder) and the superlative form (meest, minst). The difference between
meer and minder is not indicated by an attribute, but should be derived from 
the key. In case of categories for a very small set of words it may be sensible
to use the key itself as the source of information. But it does not make much
sense to have both an ordinary attribute for part of the information and the
key for the rest.$
- trap:
value: stellend, vergrotend or overtreffend.
Cf. M-rule RADJP1


_4.14. Demprorecord_
$ DEMPRO is the category of demonstrative pronouns that are used independently
as NPs (e.g. in "dit is ...", "dat zijn ..."). In contrast with DEMADJs (the
demonstratives that are use adjectively) they are translated locally. Besides 
the key there is one attribute, getal (number).
- getal:
value: enkelvoud or meervoud.
$ All Dutch DEMPROs can be both plural and singular. So for a purely Dutch
grammar the attribute number would be superfluous. Here the ambiguity
between the plural "dit" and the singular "dit" is useful, because it
can often be solved (by subject-verb agreement) and because the translations
differ (into "this" and "these", or "this one" and "these ones"). The problem
is that we have the ambiguity at other positions as well, e.g. in 
"hij zag dit" and in this case only the translation into "this" seems correct.
This matter should be investigated further. (for "het" there is a similar
problem)$

 
_4.15. Whprorecord_
$ WHPRO is the category of wie, wat, hoeveel etc. Besides the key there is
one attribute, getal.$
 - getal:
value: enkelvoud or meervoud.
$ Wie and wat have two entries in the lexicon, for 
the singular and the plural form.$


_4.16. Varrecord_
$ The variable record has no key (there are no explicit entries in the lexicon
for variables), but it has an index as its unique identification. The other
attributes indicate what kind of phrase is (has been, will be) substituted
for the variable. Cf. r2doc3 for the use of these attributes.$ 
- index:
value: an integer.
- soort:
value: npvar, predvar, clvar or othervar.
$ Indicates what kind of phrase is substituted for the variable. At the moment
only the difference between NP (npvar) and the rest (othervar) 
is relevant.$
- persoon: 
value: 1..4.
- getal:
value: enkelvoud, meervoud or omegagetal.
$ The attributes persoon and getal are only relevant if soort = npvar and
correspond with persoon and getal of the substituted NP.$
$ An additional attribute for the natural gender should be included in
the future (e.g. for being able to choose the right possessive in idioms
like "zijn / haar gram halen". In English there is already such an attribute).$

 

_4.17. Nomrecord_
$ The nomrecord is the record of the category NP, which is used not only
for a complete NP, but also for an NP in development.$
- getal:
value: enkelvoud, meervoud or omegagetal.
- persoon:
value: 1, 2, 3 or 4.
$ Getal and persoon indicate the number and person of the NP, in accordance
with the head of the NP. Persoon = 4 is used for the polite form (Cf.
persprorecord).
- soort:
value: hetpro, persproniethet, wiewatsoort, indefprosoort, ditdatsoort, 
       conjsoort or omeganomsoort.
$ Soort is a garbage attribute. It is mainly used in the surface syntax;
it gives information about the head in the top node. In the surface syntax
it is sometimes useful to know that we are not confronted with an
arbitrary NP, but with the NP "het" (hetpro), another personal pronoun
(persproniethet) etc. Conjsoort indicates whether or not we have a 
coordinate NP.$
$ This attribute should be abolished in the future.$
- natgeslacht:
value: mannelijk, vrouwelijk or omegageslacht.
Indicates the natural gender of the NP, i.e. of its head.
- supertense: 
value: presenttense, pasttense or omegatense.
$ The supertense is used to "transport" information about the tense from
the main sentence (more generally: a higher sentence) to a nested sentence.
In a completed surface structure supertense = omegatense (so the surface
rules do not have to bother about it). This transportation mechanism can
be explained best by  means of an example, the translation of "hij zag de
etende man" into "he saw the man that was eating".$
$ When in M-PARSER "de etende man" is deleted from the sentence (by an 
analytical substitution rule), it gets supertense = pasttense (because of
"zag"). When "etende" is deleted from this NP, the supertense of the NP
is copied in the supertense of the clause. This supertense is
one of the parameters of the TIJD rules. In G-TRANSFER the combination
of supertense = pasttense and tegdwcltijd (the time of "etende") has
several possible translations. One of them is a 
finite time: the past tense. This leads to the relative sentence 
"that was eating".$
- mood:
value: whinterr, declarative or omegamood.
$ Whinterr indicates the WH mood, otherwise the mood is declarative. 
Omegamood is only used for an NP in development.$
- cases:
value: subset of [nominative, dative, accusative].
$ For NPs with a personal pronoun as the head the cases are the same as for
that pronoun. For other NPs cases = [nominative, dative, accusative].$ 
- quant:
value: defquant, indefquant, whquant or omegaquant.
Indicates whether the NP is definite, indefinite or WH. 


_4.18. Clrecord_
$ The clrecord is used for sentences and clauses, i.e. sentences in 
development.$
- mood: yesno, whinterr, declarative, impenk, impmv or omegamood.
$ Yesno is the mood of yes/no questions, whinterr is used for WH questions,
declarative for declarative sentences, impenk and impmv for singular ("ga!")
and plural (gaat!) imperatives. Omegamood is used if the mood is not yet known;
in complete surface structures the mood is always known. A subsentence or
complement sentence from which a WH element has been shifted to the main
sentence, has mood = declarative. (e.g. the mood of "te kennen" 
in "welke man beweer je te kennen".)$
- voice:
value: active, passive, erpassive or omegavoice.
$ It indicates if the clause has the active or the passive 
voice. The erpassive indicates the voice of sentences like
"er wordt geluisterd".$
- tijd:
value: ott,ovt,vtt,vvt,ottt,ovtt,vttt,vvtt,oinft,vinft,oinftt,vinftt,
       oteinft,vteinft,oteinftt,vteinftt,tegdwcltijd,voltdwcltijd,
       irrpres,irrpast,omegacltijd.
$ Ott - vvtt are the usual Dutch verb times. Oinft - vinftt are the times that 
we get if we replace the finite verb in one of the usual times by an
infinitive (e.g. vinft is "gekocht hebben"). Oteinft - vteinftt are the same
times, but now with "te" (e.g. "gekocht te hebben"). Tegdwcltijd is the time
of "etende" (in "de etende man"), voltdwcltijd is the time of "gegeten" (in
"de gegeten appel"). Irrpres (irrealis present) and irrpast are created
especially for modal verbs and not discussed here. Omegacltijd is the
value of tijd when the time of the clause is still unknown (during the
development of a sentence). In a complete surface tree the tijd is never
omegatijd.$
- supertense: presenttense, pasttense or omegatense.
$ The supertense is used to "transport" information about the tense from
the main sentence (more generally: a higher sentence) to a nested sentence.
In a completed surface structure supertense = omegatense (so the surface
rules do not have to bother about it). Cf. the comments on the nomrecord.$
- soort: 
value: hoofdzin, bijvbijzin, datdeelzin, ofdeelzin, whdeelzin,
       finietbijzin, voltdwbijzin, tegdwbijzin,
       opencomplzin, geslcomplzin or omegaclsoort.
$ In complete surface structures the value of soort is omegaclsoort. This
attribute is used during the development of sentences, starting with the
STARTCL rules and ending with the ENDCL rules. This development process is
roughly the same for all kinds of sentences: main sentences, subsentences,
relative sentences and complement sentences. The soort indicates to
what extent it has been decided what kind of sentence will be constructed.$
$ Hoofdzin: main sentence; bijvbijzin: relative sentence (finite or not
finite); datdeelzin: a subsentence with "dat" ("dat hij komt");
ofdeelzin: a subsentence with "of" ("of hij komt");
whdeelzin: a subsentence with a WH ("wie er komt");
finietbijzin: a finite relative sentence ("die komt");  
tegdwbijzin: a non-finite relative sentence ("etend");  
voltdwbijzin: a non-finite relative sentence ("gegeten");  
opencomplzin: an infinitive complement sentence without subject ("te 
vertrekken"
in "hij besloot te vertrekken"); geslcomplzin: an infinitive complement
sentence with subject ("hij schrijven" during the development of the complement
sentence in "ik zag hem schrijven"). Omegaclsoort is both the unknown soort
and the irrelevant soort.$
- vps: 
value: a subset of [vp0,vp1a,vp1b,vp1c,vpmodal1,
                    vp2a,vp2b,vp2c,vp2d,vp2e,vp2f,vp2g,
                    vp2h,vp2i,vpmodal2,
                    vp3a,vp3b,vp3c,vp3d,vp3f,vp3g].
$ For the interpretation of the various verb patterns cf. the verbrecord. The
set of verb patterns in the clrecord has a somewhat different interpretation
during generation and during analysis (cf. R2doc3 for reassuring comments
concerning the symmetry). During generation the set of vps consists of exactly
one verb pattern (after application of a vp rule), the verb pattern that 
has been chosen. During analysis the set of vps indicates the set of verb 
that is still possible, in the analytical vp rule the final choice is made.$


_4.19. Pprecord_
$ The pprecord corresponds with a prepositional phrase, a completed PP or
a PP in development.$
-  mood: 
value: whinterr, declarative or omegamood.
Whinterr is the value for PPs with a WH-NP, like "in welke kamer".
Declarative is the value for PPs with a declarative NP.
Omegamood is the value for a PP in development, when the mood is not yet known.
- soort:
value: tijdadv, plaatsadv, andereadv, antenpadv,
       eradv, waaradv or adjadv.
$ This is the same set of values as for adverbs and a rather absurd set of
values for PPs. At the moment the soort is always andereadv. Tijdadv and
plaatsadv maybe useful in the future, the other values are irrelevant for PPs.$
- prepkey: 
value: the key of a preposition.
$ This is the key of the preposition in the PP. Its only use is that the
information what preposition it is, is available in the top node. This is
only useful in the surface parser.$
- supertense:
value: presenttense, pasttense or omegatense.
Cf. the explanation for the verbrecord and the nomrecord.


_4.20. Advprecord_
- mood: 
value: whinterr, declarative or omegamood.
$ The mood is whinterr for adverbial phrases with a WH element, 
like "when" and "how often", otherwise it is declarative.  Omegamood is only
used (if ever) for adverbial phrases under construction.$
- soort:
value: tijdadv, plaatsadv, andereadv, antenpadv,
       eradv, waaradv or adjadv.
$ This is the same set of values as for a simple adverb. In fact it is directly
copied from the head adverb.$
Cf. M-rule RADVP1. 


_4.21. Adjprecord_
- mood:
value: whinterr, declarative or omegamood.
$ The mood is whinterr for adjective phrases with a WH element, 
like "how big", otherwise it is declarative.  Omegamood is only
used (if ever) for adjective phrases under construction.$
- evorm:
value: true or false.
$ Indicates whether the head adjective in the phrase has the form 
with -e, e.g. "dikke", or without -e, e.g. "dik". This attribute is
presumably only useful in the surface syntax.$
- gebruik: 
value: attrib, predic or omegagebruik.
$ For an adjective phrase consisting of a single adjective this value is
the same as for the adjective itself. For complex adjective phrases it may
be different, e.g. "dik" is omegagebruik (i.e. both attributive and 
predicative), "dikker dan Jan" has gebruik = predic.$
$NP




                    CONTENTS



    Introduction

1.  SYNCATS

2.  The attributes and their values                   
 
3.  The sets SYNRELS, BASICCATS and TOPCATS

4.  Attribute values. Explanatory notes.

