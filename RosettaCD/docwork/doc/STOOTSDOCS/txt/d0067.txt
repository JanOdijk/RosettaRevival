$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$AC @
$XC ~`

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta3.linguistics

    ---------------------------------------------------------







         Title        :  Subgrammatica's en regelklassen

         Author       :  Lisette Appelo en Carel Fellinger









         Doc.Nr       :  67

         Date         :  86/01/29

         Status       :  informal

         Supersedes   :  

         Distribution :  project

         Clearance    :  project

         Keywords     :  subgrammatica, regelklasse, hyperregel
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Copyright (c) Nederlandse Philips Bedrijven B.V.

$ph Rosetta          Doc.nr: 67                    date:86/01/29
$LD 4
$Np 1
$C1 Inleiding
$QM
Dit document volgt op doc.nr. 31 en heeft hetzelfde thema: hoe kun je in
de grote verzameling M-regels een orde aanbrengen en wat heb je daaraan,
hoe complex mag een regel zijn en hoe kun je van "eenvoudige" regels een
"complexe"
maken.
$ Naar aanleiding van de bespreking van doc.nr. 31 hebben we geprobeerd de
daarin voorkomende begrippen naar twee kanten toe
duidelijker te maken: concreter
en formeler. De formele kant hebben we aan Rene@' Leermakers overgelaten. Voor
formele definities verwijzen we daarom naar doc.nr. 68. Daarbij moeten we wel
waarschuwen, dat de documenten toch nog vrij onafhankelijk tot stand gekomen
zijn en dat daardoor bepaalde begrippen misschien niet helemaal overeenkomen.
(Een indicatie is misschien, dat onze begrippen "subgrammatica", "regelschema"
en "subregelklasse" ongeveer overeenkomen met zijn begrippen "main subgrammar",
"M-rule class" en "rule class" resp.)$
$ De concretisering van de begrippen is uitgewerkt in sectie 2 door de ideee@"n
uit doc.nr. 31 toe te passen op de Rosetta2-grammatica. We laten in deze
sectie zien, dat er in die grammatica _groepen regels_ zijn die staan
voor een _linguistisch fenomeen_ dat _vertaalrelevant_ of _taalspecifiek_
is. Deze laatste regels noemen we _transformaties_ (2.1.).
Verder laten we zien, dat die grammatica bestaat uit een aantal
_deelgrammatica's_ (in doc.nr. 31 nog subgrammatica's geheten)
waarvan de topknopen
corresponderen met "frasen" (2.2.). Daarna proberen we aan te geven hoe de
relaties tussen die deelgrammatica's liggen (2.3.).$
$ Het zal blijken, dat de Rosetta2-deelgrammmatica's in zekere zin veel op
elkaar lijken met uitzondering van de Rosetta2-NP-deelgrammatica.$
$ In sectie 3 proberen we de noties _regel_, _transformatie_, _regelklasse_,
_operatieklasse_, _subgrammmatica_, _subregelklasse_, _hyperregel_ en
_regelschema_ uit te leggen en informele definities te geven. Tevens is het de
bedoeling uit te leggen wat je eraan zou kunnen hebben. Voornamelijk zal dat
zijn: overzicht en samenhang binnen de grammatica's, overzicht en inzicht in
vertalen, aangrijpingspunten voor robuustheid, interactie en bonustoekenning,
mogelijkheid tot modulaire ontwikkeling van de grammatica's, richtlijnen voor
de regelschrijver.$
$ Aangezien dit een informeel document is dat bedoeld is om een aantal ideee@"n
op papier te zetten, die als eerste aanzet kunnen dienen voor verder onderzoek
en/of uitwerking, moet niet verwacht worden, dat alles al tot in alle details
uitgewerkt is.$

$NP
$C1 Regelklassen en deelgrammatica's in Rosetta2
$C2 Overzicht van de "regelgroepen" in Rosetta2
$ In deze sectie wordt een overzicht van de "regelgroepen" in Rosetta2
geschetst.
In de eerste kolom staat de "regelgroep" zoals die informeel in de Rosetta2
grammatica bestaat. In de tweede kolom staan de semantische aspecten
weergegeven die ook vertaald moeten worden. In de derde kolom staan de
syntactische aspecten van zo'n regelgroep. Hier en daar heben we groepen
gecreeerd naar analogie van de CL-regels waarmee we dan ook beginnen.$

$LD 5
$RL 7
_Topcategorie:_  CL

_regelgroep_             _semantische aspecten_         _syntactische aspecten_

startclause regels     "thematische rollen          -
                       toekennen"
                       mood

empty subst. regels    existentie@"le quantificatie   -
                       van argumenten

vpregels               -                            "spell out"
                                                    ideosyncratische
                                                    eigenschappen van
                                                    werkwoorden

voiceregels            (pragmatiek/voorkeur,        argumenten krijgen andere
                        topic/focus)                syntactische rol

subst. regels          functie applicatie           argumenten substitueren
                       (subst. van argumenten)

tijdregels             toekennen v/d tijd           hulpwerkwoorden van tijd
                       (tijdoperatoren)

orderregels            -                            volgorde van constituenten

advsubst. regels       functie applicatie           substitutie van adverbia
                       (modificatie)

negatieregels          toekennen van polariteit     negatieelement invoeren of
                       (negatie operator)           niet

shiftregels            quantificatie?               verplaatsing van bepaalde
                                                    constituenten

inversieregels         -                            verplaatsing van bepaalde
                                                    constituenten

finalclauseregel       -                            in orde maken van aantal
                                                    syntactische zaken

endclauseregel         -                            toekenning top categorie
                                                    die functie in de rest v/d
                                                    grammatica uitdrukt


$RL 6
_Topcategorie:_  UTT

_regelgroep_            _semantische aspecten_         _syntactische aspecten_

utteranceregels        -                            punten en komma's
                                                    (robuustheid)



$RL 6
_Topcategorie:_  PP

_regelgroep_            _semantische aspecten_         _syntactische aspecten_

PPstartregels          "thematische rol             -
                       toekennen"

PPsubst. regel         functie applicatie           substitutie van argument


$RL 6
_Topcategorie:_  ADJP

_regelgroep_            _semantische aspecten_         _syntactische aspecten_

startADJPregel         "them. rol toekennen"        -    
                       (trap?)

ADVsubst. regel        functie applicatie           substitutie van adverbia
                       (modificatie)

negatieADJPregel       negatie operator             substitutie van negatie
                                                    element

SubstregelCOMP         functie applicatie           substitutie van comperatief
                       (modificatie)                element

ARGsubstregelPREParg   functie applicatie           substitutie van argument

EMPTYsubstPREParg      existentiele quantificatie


$RL 6
_Topcategorie:_  ADVP

_regelgroep_            _semantische aspecten_         _syntactische aspecten_

startADVP              "them. rol"
                       (1 plaatsige functie)

ADVPsubst              functie applicatie            substitutie van adverbium
                       (modificatie)

negatieADVP            negatie operator              substitutie van negatie
                                                     element



$RL 6
_Topcategorie:_  NUMP

_regelgroep_            _semantische aspecten_         _syntactische aspecten_

startNUMP              "them. rol"
                       (1 plaatsige functie)

(regels voor eenheids NOUN --> NP-grammatica)


$RL 6
_Topcategorie:_  NP

_regelgroep_            _semantische aspecten_         _syntactische aspecten_

RNP
(determiners           quantificatie, getal          lidwoorden invoeren
supertense,            tijdsoperator
verkleinwoord)         functieapplicatie             substitutie van verklein
                                                     element

DEMADJsubst,           functieapplicatie             substitutie van ...
WHADJsubst,            functieapplicatie                     "
QUADJsubst,            functieapplicatie                     "
POSSADJsubst,          functieapplicatie                     "
(NUMP,                 functieapplicatie)                    "
RELSENTsubst,          functieapplicatie                     "
ANTERELSENTsubst,      functieapplicatie                     "
(?ADJPsubst,           functieapplicatie)                    "
PPsubst                functieapplicatie                     "

coordinatie            functie applicatie
                       (and/or, 2 plaatsig)

RNP5..9
(startregels)          (0 plaatsige functies)
                       (geen quantificatie,
                       geen tijdsoperator,
                       geen verklein functie
                       uitzondering PROPERNOUN)

RNP13
(?robuustheid)

$LD 4
$ Opmerking: de NP lijkt iets moeilijker te "vertalen" in onze terminologie dan
andere categoriee@"n, doordat veel syncategorematisch geintroduceerd wordt en
de structuuur van de NP nogal onduidelijk is door deze regels.$ 

$RL 14
$C2 Overzicht van de "deelgrammatica's" in Rosetta2

$ Een _deelgrammatica_ H van een grammatica G is een grammatica met$
$ (i) domeinen
T%H%, T%M,H%, T&+&%M,H% (analoog gedefinieerd aan die van G)$
$ (ii) een verzameling M-rules$
$ (iii) een eindcategorie uit de verzameling SUBTOPCAT$
$ waarvoor geldt:$
$ (i) de verzameling welgevormde S-trees (T%M,H%) een subset is van de
verzameling T&+&%M% van G$
$ (ii) domein T%H% een subset is van domein T van G$
$ (iii) de verzameling M-rules van H een subset is van de verzameling M-rules
van G$
$ (NB: dit was de definitie van subgrammatica in doc.nr 31)$
$ In Rosetta2 kunnen we een aantal van die deelgrammatica's onderscheiden.
Hierbij kunnen we ook steeds aangeven welke categoriee@"n of externe parameters
in welke regels van buiten die deelgrammatica gesubstitueerd of "geimporteerd"
worden en van welk semantisch type die regels zijn. Bij elk van de
mogelijkheden tot substitutie of importeren - waarbij soms ook de
"niet-substitutie" - hoort een operatie in de IL.$ 

$RL 5
_deelgrammatica:_  Clause

_regelgroep_                  _importeren_                    _type_

1. startclauseregels        0,1,2 of 3 VAR's, BVERB       "thematische rol"

2. EMPTYsubst. regels       EMPTY                         "functieapplicatie"
                                                          (arg. subst.)

3. ARGsubst. regels         NP, SUBSENT, OPENCOMPLCL      "functieapplicatie"
                            GESLCOMPLCL, OPENADJP         (arg. subst.)

4. TIJDregels               (tijdparameters)              "tijdoperator"

5. ADVsubst. regels         OPENADVP's                    "functieapplicatie"
                            ADVSENT

6. Negatieregels            (negatieparameter)            "negatieoperator"


$RL 3
IL:

1. lstartcl0, lstartcl1, lstartcl2, lstartcl3
2. lemptysubst
3. largsubstent, largsubstpred, largsubstsubsent,
   largsubstopencl,largsubst
4. ltijdnonimp1, ltijdimp, ltijdnonimp2
5. ladvsubsttest, lclsubstadv, lclsubstadvsent
6. lclneg, lclpos



$RL 5
_deelgrammatica:_  PP

_regelgroep_                  _importeren_                    _type_

1. startPPregels            VAR's, PREP                  "thematische rol"

2. NPsubst. regels          NP                           "functieapplicatie"
                                                          (arg. subst.)

$RL 3
IL:

1. lppstart
2. lppsubstent


$RL 5
_deelgrammatica:_  ADJP

_regelgroep_                  _importeren_                    _type_

1. startADJPregels          VAR's, BADJ                  "thematische rol"

2. EMPTYsubst. regels       EMPTY                         "functieapplicatie"
   (robuustheid)                                             (arg. subst.)

3. ARGsubst. regels         PP,                           "functieapplicatie"
                                                             (arg. subst.)

4. Comperatiefregels        COMP                          "functie applicatie"

5. ADVPsubst. regels        OPENADVP, OPENADJP            "functieapplicatie"

6. Negatieregels            (negatieparameter)            "negatieoperator"

$RL 3
IL:

1. ladjpstart
2. 
3. ladjpp
4. ladjcomp
5. ladjpsubstadv
6. ladjpneg



$RL 5
_deelgrammatica:_  ADVP

_regelgroep_                  _importeren_                    _type_

1. startADVPregels          VAR's, ADV                    "thematische rol"

2. ADVPsubst. regels        OPENADVP                      "functieapplicatie"
                                                          (arg. subst.)

3. negatieregels            (negatie parameter)           "negatieoperator"

$RL 3
IL:

1. ladvpstart
2. ladvpsubstadv
3. ladvpneg


$RL 6
_deelgrammatica:_  NP
(wijkt af van Rosetta2 door gebruik van nog niet bestaande DETP, zie onder)

_regelgroep_                  _importeren_                    _type_

1. starNPregels             VAR's, NOUN                   "thematische rol"
   1a.                      BPERSPRO
   1b.                      PROPERNOUN
   1c.                      WHPRO
   1d.                      INDEFPRO
   1e.                      DEMPRO

2. empty subst. regels      EMPTY                         "functieapplicatie"
                                                             arg. subst.

3. arg. subst. regels       NP                            "functieapplicatie"
                                                             arg. subst.

4. DETP subst. regels       DETP                          "functieapplicatie"

5. ADJP subst. regels       OPENADJP                      "functieapplicatie"

6. RELSENTsubst. regels    RELSENT, ANTERELSENT          "functieapplicatie"

7. PP subst. regels         PP                            "functieapplicatie"


$RL 3
IL:

1. lnpnoun
2..4 zie DETP subgrammatica
5. lnpadjp
6. lnprelcl
7. lnppp


$RL 5
_deelgrammatica:_  DETP

_regelgroep_                  _importeren_                    _type_

1. startDETPregels          VAR's, ART, DEMADJ            "thematische rol"
                            QUADJ, BPERSPRO, NUMP

2. "distance"regels         far en near parameter         "functieapplicatie"

$RL 3
IL:

1. lnpquadj
   lnppossadj
   lnpwhadj
   etcetera
2. lnpneardemadj
   lnpfardemadj

$LD 4
$ Een aantal parameters die syntactische regels uitdrukken kunnen ook
categorematisch behandeld worden door een deelgrammatica.$

$LD 5
$RL 5
_deelgrammatica:_  COMP

_regelgroep_                  _importeren_                    _type_

1. startCOMPregels          VAR's, COMP                   "thematische rol"

2. EMPTYsubst. regels       EMPTY                         "existentiele
                                                          quantificatie"

3. arg. subst. regels       NP, CLAUSE?                   "functieapplicatie"
                                                          (arg. subst.)

4. negatieregels            NEG                           "negatie operatie"

$RL 6
_deelgrammatica:_  COORD

_regelgroep_                  _importeren_                    _type_

1. startCOORDregels         VAR's, COORD                  "thematische rol"
                                                          (arg. subst.)

$LD 4
$C2 Samenhang der deelgrammatica's
$ De deelgrammatica's worden gekenmerkt door:$
$ (i) het gebruik van bepaalde basisexpressies$
$ (ii) het importeren van bepaalde S-trees met bepaalde topcategorie die vaak
een topcategorie van een andere deelgrammatica zijn$
$ (iii) bepaalde topcategoriee@"en$

$LD 5
$RL 3
_deelgrammatica_   _basic expressie_     _importeren_            _topcategorie_

CLAUSE           BVERB               NP, SUBSENT,          SENT, RELCL,
                                     OPENADVP, PP,         ANTERELCL, SUBSENT,
                                     OPENCOMPLCL,          OPENCOMPLCL,
                                     GESLCOMPLCL,          GESLCOMPLCL,
                                     ADVSENT, OPENADJP     ADVSENT

PP               PREP                NP                    PP

ADJP             BADJ,               ADVP, NP, (OPENCOMP)  OPENADJP

(DETP)           DEMADJ                                    DEMADJP,
                 WHADJ,                                    WHADJP
                 QADJ,                                     QADJP,
                 BPERSPRO                                  POSSADJP

ADVP             ADV                 ADVP, (OPENCOMP)      OPENADVP

NP               BNOUN,              ADJP (alle soorten),  NP
                                     PP, RELCL,
                                     ANTERELCL

NP               BPERSPRO,                                 NP
                 PROPERNOUN,
                 WHPRO,
                 INDEFPRO,
                 DEMPRO

(COMP            COMP                NP, CLAUSE?           OPENCOMP)

(COORD           COORD               NP, CLAUSE            NP, CLAUSE?)

$NP
$LD 4
$C1 Informele definities en regelklassen en subgrammatica's
$C2 Regelklassen
$ Zoals duidelijk zal zijn geworden in 2.1. vallen _groepjes regels_ zoals
we die in de "clause grammatica" van Rosetta2
hanteerden in klassen.
Dit soort groepjes regels kun je weer terugvinden in de andere
deelgrammatica's van Rosetta2, al is dit in Rosetta2 niet zo bewust gedaan en
in de "NP-deelgrammatica" eigenlijk onmogelijk. (Het voorstel van Franciska
(doc.nr. 41) lijkt er zich beter voor te lenen)$
$ Niet alle groepjes vallen in
_regelklassen_, omdat we alleen die regels
regels willen noemen die een correspondent in de IL hebben,
die niet "semantisch leeg"
is, d.w.z. alleen die die betekenis hebben in de zin dat ze een rol
spelen in het vertaalproces. De groepjes regels die hier niet in vallen
noemen we _transformatieklassen_ en die regels noemen we _transformaties_.
(zie 3.2.)$
$ _Regels_,
zowel als transformaties, bestaan uit een conditie-actiepaar, waarbij
de actie geen condities meer mag bevatten.$

$ _Informele definitie van een regelklasse_$

$ Een regelklasse is de kleinste
verzameling regels die aan de volgende voorwaarden
(i) t/m (iv) moet voldoen:$

$ voorwaarde (i)$
$ De regels uit een regelklasse moeten semantisch verwant zijn in die zin
dat ze samen een bepaald linguistisch fenomeen beschrijven dat
_vertaalrelevant_ is. "Vertaalrelevant" wil zeggen, dat er in alle talen
eenzelfde fenomeen bestaat waarover de regels (vanuit vertaaloogpunt bekeken)
informatie verschaffen die niet verloren mag gaan. Die informatie hoeft echter
niet in eenzelfde aantal regels beschreven te worden in elke taal, maar wel
zodanig dat elke regel een "slice of the pie" van dat fenomeen voor
die taal beschrijft.$

$ voorwaarde (ii)$
$ Een regelklasse correspondeert met een semantische regelklasse ofwel
operatieklasse in de IL. De operatieklasse is de kleinste verzameling operaties
die een "overdekking" van
het vertaalrelevante fenomeen vormen, waarbij de operatie de eenheid is die
we met _"een betekenis"_ aanduiden (voorbeeld: een bepaalde tijdoperator).
De regels uit de regelklasse vormen ook een overdekking voor hetzelfde
fenomeen, waarbij de regels de (syntactische)
eenheden voor dat fenomeen in die taal vormen (voorbeeld: een regel voor
een bepaalde tijdvorm).$
$ Beide verzamelingen vormen dus een soort partitie over het fenomeen.
$ Elke regel correspondeert met een operatie. Een operatie mag corresponderen
met een verzameling regels, zodanig dat elke regel met die operatie
correspondeert. In generatie bestond voor deze verzameling al de _hyperknoop_
en hij werd door Jan L. in RN8406 ook al _hyperregel_ genoemd.
Hier is deze verzameling een subset van de regelklasse (hij kan ook de hele
regelklasse zijn!).$

$ Er zijn 3 gevallen te onderscheiden bij zo'n verzameling regels die met 1
operatie correspondeert:$

1) _parafrasen_
$ Er zij syntactisch gezien twee of meer manieren om hetzelfde uit te drukken.
In dit geval zijn de regels "gelijkwaardig" en zullen in principe
ook alle mogelijkheden
(eventueel toch gewogen) gegenereerd worden.$

voorbeeld:
             de gebakken aardappels
             de aardappels die gebakken zijn

$ (Over de vraag of 2 dingen "parafrasen", "synoniemen" of "goede vertalingen
van elkaar" zijn valt echter vaak te twisten)$

2) _slicing-the-pie-problemen_&1&
$ Een bepaalde vertaalrelevante betekenis kan in een taal op twee of meer
verschillende (syntactische) manieren tot uitdrukking gebracht worden, maar
afhankelijk van andere factoren zal slechts e@'e@'n de juiste zijn.$

voorbeeld: regels voor de "present" tijd in het Engels:

             R%1%: Simple Present Tense
             R%2%: Present Progressive Tense

$ De condities in deze regels kunnen zodanig zijn, dat ze "elkaar uitsluiten"
of er ontstaat een _tijdelijke (vertaal)ambiguiteit_
of _tijdelijke parafrasering_,
waarbij e@'e@'n van de paden later in het derivatieproces dood loopt.
(Tijdelijke en echte parafrasering kunnen natuurlijk tegelijk en meervoudig
voorkomen)$
$ Het gaat hier steeds om gevallen waarin een operatie met een verzameling
regels correspondeert en soms wil je deze verzameling onderbrengen in e@'e@'n
"regel" die verschillende conditie-actie paren heeft.$

$RL 8
         IL          taal         IL          taal
                      a                                              a
         A                   of   A             c        met   c  =
                      b                                              b

        A: "betekenis"            A: "betekenis"
        a, b: regels              c: "regel"
                                  a, b: conditie-actie paren

(zie ook 3.4.: regelschema's)

3) _specifiteitsprobleem_&1&
$ De operatie correspondeert in een bepaalde taal met twee of meer regels die
een subtiel betekenisonderscheid uitdrukken. _Voor het vertaalsysteem_ hebben
die regels echter dezelfde betekenis en hun betekenisonderscheid gaat verloren.
Ze worden beschouwd als _parafrasen_.$

voorbeeld: meervoud en dualis in het Grieks

              R%1%: pluralis
              R%2%: dualis

$ Het betekenisonderscheid kan eigenlijk niet worden opgenomen in de IL, omdat
andere talen het niet kennen.$

$ De eis dat elke regel correspondeert met 1 operatie houdt in, dat er geen
ambigue regels bestaan: een regel correspondeert nooit met meer dan e@'e@'n
operatie. Theoretisch is dit wel voorstelbaar, als we de operatieklasse zouden
"verfijnen", terwijl dat bij de regelklasse niet kan. (bijv.: we verfijnen de
IL met dualis en pluralis, terwijl er in het Nederland alleen de Meervoudregel
zou bestaan) Dat we dat niet doen, ligt voor de hand, want nu drukt de IL
precies uit wat de gegarandeerde "vertaalkwaliteit" van het systeem is.
Eventuele mogelijke semantische verfijningen liggen altijd aan dezelfde kant
(een syntactische component van een taal) en leveren (onterechte) parafrasen
op. Toch kan dit vervelend zijn, als er maar e@'e@'n taal is die een bepaald
betekenisonderscheid niet heeft. Bij basisexpressies geldt deze beperking
trouwens niet en deze kunnen met twee of meer "basic meanings" corresponderen.$
$ Ook bij
een ingewikkelder "slicing-the-pie-geval" dan hierboven werd beschreven
kan deze beperking een rol spelen.$

$RL 6
                 IL             taal
                                 a               bijv. A: "present"
                 A                                     B: "future"
                                 b                     a: Simple Present Tense
                 B                                     b: Present Prog. Tense
                                 c                     c: Future Tense

A en B zijn operaties; a,b,c zijn regels.

$ Regel b correspondeert met A en B. dit kan niet, dus regel b moet gesplitst
worden in twee delen, e@'e@'n regel voor geval A en e@'e@'n voor geval B. Dit
wordt in Rosetta2 gedaan met externe parameters, (bijv. tijdregels), waarbij
condities op deze parameters geformuleerd kunnen worden. Elke regel met de
actuele waarde van zijn parameter correspondeert nu weer met 1 operatie. De
condities in de regels a, b en c moeten nu zorgen voor het juiste resultaat.
Condities van a en b&A& moeten elkaar uitsluiten net als die van c en van b&B&,
of er ontstaat een tijdelijke parafrasering ((vertaal)ambiguiteit) of het zijn
parafrasen (voor het systeem). Door b te beschouwen als twee regels die
met parameters "in elkaar geschoven" zijn wordt
aan de ene kant voldaan aan de eis "1 regel correspondeert
met 1 operatie" en hoef je syntactisch gezien toch niet al die regels steeds
te dupliceren, wat een soort "overlap-effect" met zich mee zou brengen.
(Zie 3.4. regelschema's)$
$ Dat we geen ambigue regels, maar wel ambigue basisexpressies willen, is niet
zo vreemd, als men bedenkt, dat het in het dagelijks gebruik ook heel
gemakkelijk is aan een bepaalde string een extra betekenis toe te kennen, maar
dat dat met constructies veel moeilijker is. Een vertaalsysteem gedraagt zich
analoog ( Dit gedrag heet in de wandelgangen ook wel "_tolerant vertalen_". ).
$ Bij een basisexpressie hebben we intuitief niet zoveel problemen met
ambiguiteit. Een string kan best nog wel een betekenis hebben of eigenlijk
voor twee betekenissen staan, we nemen dan genoegen met een "te ruime" of
"ambigue" vertaling.$
    voorbeeld:
                pudding (ned)
                                     pudding (eng)
                vla (ned)
$ Bij regels willen we dit niet: een regel heeft e@'e@'n betekenis.$

$ voorwaarde (iii):$
$ Er bestaat voor iedere regelklasse in de grammatica van de ene taal een
corresponderende regelklasse in de andere taal ("corresponderen" houdt in
corresponderen via dezelfde operatieklasse). Dit betekent, dat er voor iedere
regel in de ene grammatica in elke andere grammatica minstens e@'e@'n regel
bestaat waarmee hij correspondeert, zodanig dat ze (intuitief)
vertalingen van elkaar zijn (isomorfie).$

$ voorwaarde (iv):$
$ Een
regel mag wel met de "kanonieke of ongemarkeerde" betekenis corresponderen
die als vertaalrelevante informatie wordt beschouwd (bijv. RPOS in Rosetta2),
maar niet met de _lege
betekenis_ (zie 3.2. transformatieklassen; er kunnen in de betreffende talen
hele verschillende dingen gebeuren; bijv. RFINALCLAUSE in
Rosetta2). Een regelklasse
kan dus niet met de "lege operatieklasse" corresponderen, waarbij lege
betekenis hier ook geinterpreteerd kan worden als: "buiten de vertaalinhoud
vallend" of "niet vertaalrelevant" (dit zouden transformatieklassen zijn).
(Als elke regelklasse een regel zou hebben voor het "kanonieke geval",
ook in de gevallen waar dat voor alle talen hetzelfde is of waar "het fenomeen
juist niet het geval is", dan zouden regelklassen in het derivatieproces een
"vast karakter" krijgen.)$

$ Samengevat kunnen we dus zeggen dat:$
$ Een regelklasse een verzameling regels is die:$
$ (i) voor een "linguistisch fenomeen" staat dat vertaalrelevant is,$
$ (ii) correspondeert met een operatieklasse die een "overdekking" vormt van
het fenomeen, waarbij elke regel correspondeert met 1 operatie,$
$ (iii) aan de isomorfie-eis voldoet via de klasse,$
$ (iv) waarvan de regels wel met de kanonieke of ongemarkeerde betekenis mogen
corresponderen, maar niet met de lege betekenis.$
$ _Ambigue_ expressies hebben twee of meer betekenissen, d.w.z. dat het
expressies zijn die corresponderen met meer dan e@'e@'n
semantische derivatieboom.$
$ _Parafrases_ zijn expressies die corresponderen met dezelfde semantische
derivatieboom; we noemden deze ook wel "vertaalambiguiteiten".$
$ _Tijdelijke parafrases of ambiguiteiten_ zijn tussentijdse expressies waarvan
er uiteindelijk maar e@'e@'n overblijft.$ 
$ Ambigue basisexpressies zijn bijv.
_homonymen_. "Parafrastische" basisexpressies zijn _synoniemen_.$
$ Regels zijn nooit ambigu. Als dat zo lijkt, zijn het regels met externe
(semantische) parameters. Een verzameling regels (of transformaties) kan wel
(tijdelijke) parafrasen (vertaalambiguiteiten)
opleveren, als ze corresponderen met dezelfde operatie.
Basisexpressies mogen wel ambigu zijn.$

$ De verzameling mogelijke vertalingen van een expressie kan dus expressies
bevatten die verschillen in betekenis, doordat de brontaal expressie
ambigu was en expressies bevatten
die  (voor het systeem) parafrasen van elkaar zijn. De
expressies die verschillen in betekenis kunnen dezelfde zijn, als de doeltaal
expressies dezelfde ambiguiteit vertonen. De expressies die (voor het systeem)
parafrasen van elkaar zijn kunnen weer tijdelijke parafrasen zijn, als het
systeem grotere gehelen zou bekijken of kennis van de wereld zou hebben.
(Bepaalde ambiguiteiten zouden dan ook opgelost kunnen worden in analyse)$
$ De kardinaliteit van de resultaatverzameling van het toepassen van een regel
is _<_ 1. Dit houdt in, dat je heel veel kleine, eenvoudige regels krijgt.
(Voor efficiente behandeling daarvan, zie 3.4. regelschema's.)$

$C2 Transformatieklassen
$ Transformatieklassen zijn de groepjes regels van Rosetta2 die buiten de
definitie van regelklassen vallen.$

_Informele definitie van transformatieklassen_

$ Een transformatieklasse is de kleinste
verzameling "regels" die aan de volgende
voorwaarden (i) en (ii) moeten voldoen:$

$ (i) de "regels" moeten een (syntactisch) fenomeen beschrijven dat niet
vertaalrelevant wordt geacht (of in het Rosettakader als niet-vertaalrelevant
behandeld wordt. Dit laatste levert dus onterechte parafrasen op en zal
misschien alleen in analyse worden toegestaan).$

$ (ii) de "regels" moeten een _overdekking_ van dit fenomeen geven.$

$ Omdat de transformaties geen vertaalrelevant fenomeen beschrijven, hoeven ze
ook niet te corresponderen met transformaties in de andere grammatica's ook al
bestaat daar iets dergelijks. Hierdoor is ook de plaats in de
derivatiestrategie niet meer afhankelijk van andere grammatica's. De regels in
Rosetta2 die in deze categorie vallen zijn voornamelijk syntactische regels:$
$ - regels die syntactische informatie uit het woordenboek "uitspellen"
(verbpatternregels, reflexieffunctie etc.)$
$ - ordeningsrgels van bepaalde constituenten.$
$ Je zou ook kunnen denken aan "percolatieregels" die bepaalde informatie van
dochters naar moeders overbrengen. Het
supertenseattribuut dat bij de startregels een waarde krijgt
leent zich hiervoor als
het doel ervan is de consecutio temporum te kunnen regelen zonder explosie van
ambiguiteiten.$
$ Maar ook regels die eigenlijk wel met een bepaalde betekenis corresponderen
die te subtiel is voor het vertaalsysteem van dat moment kunnen hieronder
vallen. Je krijgt dan in principe alle mogelijkheden bij de vertaling
(parafrasen). Om efficientieredenen of voorkeur voor dezelfde syntactische
structuur in bron- en doeltaal zouden puur syntactische regels wel in het
derivatieproces kunnen worden opgenomen als de syntaxis van talen overeenkomt.
(Bijv. verbpatternregels in Rosetta2. Als in de brontaal een bepaald
verbpattern optreedt, dan lijkt de verzameling mogelijke verbpatterns in andere
talen beperkt. Maar in hoeverre hangt dat af van de semantische informatie?)
Voor ideeen over de uitwerking van transformaties in het Rosettakader zie
RN8405 van Jan L.$

$ Hoewel het erg gemakkelijk is om van de "vrijheid" van een
transformatieklasse gebruik te maken door het syntactische deel van een regel
als transformatie voor te stellen, met name daar waar het prettig lijkt deze
syntactische operatie nog even uit te stellen in een derivatie (generatief
gesproken), bijv. vanwege explosie van ambiguiteiten, is dat niet het doel
van transformaties. Er ligt een onduidelijke marge tussen wat de "syntactische
operatie van een regel" en een "transformatie" is. Stel bijv. dat de
passiefregel een regel is, hoort het introduceren van het hulpwerkwoord voor
de passief dan bij de syntactische operatie van de passiefregel of is dat een
aparte transformatie?$

$C2 Subgrammatica's
$ Een _subgrammatica_ lijkt op wat we in 2.2. een deelgrammatica hebben
genoemd.$ 

$ Een _deelgrammatica_ H van een grammatica G is een grammatica met$
$ (i) domeinen
T%H%, T%M,H%, T&+&%M,H% (analoog gedefinieerd aan die van G),$
$ (ii) een verzameling M-rules,$
$ (iii) een eindcategorie uit de verzameling SUBTOPCAT$
$ waarvoor geldt:$
$ (i) de verzameling welgevormde S-trees (T%M,H%) een subset is van de
verzameling T&+&%M% van G,$
$ (ii) domein T%H% een subset is van domein T van G,$
$ (iii) de verzameling M-rules van H een subset is van de verzameling M-rules
van G.$
$ (NB: dit was de definitie van subgrammatica in doc.nr 31)$
$ SUBTOPCATS zou voor Rosetta2 { NP, OPENADVP, OPENPP, OPENADJP, ....CL,
....SENT} kunnen zijn.$
$ De regels van een deelgrammatica kunnen gegroepeerd zijn in klassen
(zie 2.1) en er geldt dat als H klassen heeft,
dan en slechts dan G die klassen ook heeft.$
$ Een deelgrammatica H is dus een subcomponent van de syntaxis en semantiek van
de grammatica G. SUBTOPCAT is niet willekeurig gekozen, maar de elementen
corresponderen met "frasen" en zijn afzonderlijk testbare delen van de
grammatica G, ook voor de vertaling daar waar talen m.b.t. soort deelgrammatica
overeenkomen.$
$ De definitie van een deelgrammatica geeft de relatie met de grammatica weer,
maar zegt weinig over die deelgrammatica zelf. Toch valt daarover wel iets te
zeggen. Daarom definieren we hier (_op informele wijze_) het begrip
_subgrammatica_ (geinspireerd op X-bar-theory).$

$ Een _subgrammatica_ H van G is een grammatica die
voldoet aan de volgende vii voorwaarden:$
$ (i) er is een speciale (abstracte) basiscategorie die de subgrammatica
triggert,$
$ (ii) er is een topcategorie,$
$ (iii) er is een karakterisering van de te gebruiken S-trees die basic S-trees
of S-trees met topcategorieen van subgrammatica's zijn en die samen de
verzameling "terminale" categoriee@"n voor de derivatiebomen of de
"inputcategorieen/expressies" van H oplevert,$
$ (iv) er is een verzameling "non-terminale" categoriee@"n waarvan de elementen
nooit basiscategorie of topcategorie van een subgrammatica zijn. Deze hebben
"locale waarde" (maar dit is niet helemaal waar vanwege (iii)).$
$ (v) Voor elke regelklasse is er een verzameling regels.
Deze verzameling hoeft niet de hele regelklasse te beslaan, maar mag een
deelverzameling zijn: een subregelklasse. Elke subgrammatica behandelt elk
linguistisch fenomeen voor zover relevant voor die subgrammatica.  Een 
_subregelklasse_
is verplicht (OB) of optioneel (OP), wat betekent dat de verzameling al dan
niet leeg mag zijn in een bepaalde subgrammatica.$
$RL 8
$ _Regelklassen_:$
1) startregels                                      OB
2) substitutieregels  voor empty (geen robuustheid) OP
                           argumenten               OP
                           "modificatoren"          OP
3) tijdregels                                       OP
4) negatieregels                                    OP
5) moodregels                                       OP
$ Het zal duidelijk zijn dat er een zekere relatie bestaat tussen de
regelklasse en de non-terminale categorie. Je kunt nu a) een vrij
produktiesysteem
op de regels in de subgrammatica hebben of b) een geordende toepassing
van regelklassen en/of regels.$
$ (vi) er is een verzameling transformatieklassen die leeg mag zijn.$
$ (vii) in geval (v)b een specificatie van mogelijke ordeningen: mogelijke
derivatiestrategiee@"n. Verschillende volgordes drukken scopeverschillen
uit. Transformatieklassen kunnen misschien wel gekoppeld worden aan
subregelklassen. De derivatiestrategiee@"n
in de op topcategorie corresponderende
subgrammatica's moet in alle talen hetzelfde zijn. De koppeling van
transformatieklassen is vrij.$
$ Een _grammatica_ G is nu
een verzameling subgrammatica's H met een verzameling
TOPCATS die een deelverzameling is van de verzameling SUBTOPCATS
die gevormd wordt door de topcategorieen van de subgrammatica's. Er is
geen subgrammatica met de topcategorie van een andere subgrammatica. De
subregelklassen van de subgrammatica's vormen samen de regelklassen van de
grammatica.$

$ _Opmerkingen_$

_Derivatiestrategie_
Wij hebben op dit moment enige voorkeur voor (v)b, waarbij de mogelijke
ordeningen van de regels expliciet gemaakt worden i.v.m. inzicht in de
mogelijkheden (vooral m.b.t. tot scope). Voorbeelden hiervan zijn:
RN8406 "Controlled M-grammars" en doc.nr. 40 "Context-free control grammars".

_Analyse_
$ In analyse worden de omgekeerde (generatieve) derivatiestrategiee@"n
toegepast,
waarbij bijv. per (sub)regelklasse alle regels geprobeerd worden.$

_Robuustheid en interactie_
$ Robuustheid en interactie kunnen nu in de analytische derivatiestrategie
ingepast worden, en wel per (sub)regelklasse.
Generatie is inherent al erg robuust.$

_Bonustoekenning_
$ Bonustoekenning kan in analyse en generatie gebruikt worden bij:$
$ - toepassing van een bepaalde derivatiestrategie$
$ - toepassing van bepaalde regels in een (sub)regelklasse$
$ - weging van bonussen die uit andere subgrammatica's komen.$

_Niet lexicaal getriggerde subgrammatica's_
$ Het is mogelijk dat er subgrammatica's bestaan die veel op elkaar lijken
in die zin, dat de e@'e@'n
grotendeels bevat is in de ander, bijv. doordat ze dezelfde speciale
basiscategorie hebben en de mogelijke "derivatiepaden" van de e@'e@'n
gedeeltelijk met die van de ander overeenkomen ( bijv. de clausegrammatica en
de openclausegrammatica in 3.6).$
$ Een andere mogelijkheid is, dat een regel eigenlijk te complex is
en er
stappen onderscheiden kunnen worden die alle regels van de regelklasse waartoe
de regel behoort eigenlijk hebben (bijv. tijdregels die allemaal een deictisch
en aspectueel aspect zouden hebben).$
$ In het bovenstaande zijn we er vanuitgegaan dat een subgrammatica een
speciale basic S-tree bij de input expressies heeft, maar het is heel goed
mogelijk dat er stukjes grammatica zijn binnen een subgrammatica die als
speciale input expressie een S-tree met bepaalde eigenschappen die niet basic
is, verwachten.
We kunnen bijv. in het eerste geval het overeenkomstige gedeelte een
subgrammatica noemen (bijv. een "VP-grammatica") en de twee oorspronkelijke
subgrammatica's die de output van die nieuwe subgrammatica als speciale
inputexpressie nemen (andere oplossingen voor het concrete voorbeeld in 3.6.
zijn natuurlijk ook mogelijk).
Of bijv. in het tweede geval
een tijdgrammatica die als speciale input expressie een
clause met een clausetype (Aktionsart) verwacht (doc. nr. 53 forthcoming).
Of zulke
subgrammatica's werkelijk bestaan, hangt af van de
"scope gevoeligheid" van de regels van de subgrammatica voor andere
regels daarbuiten.$
$ Het uiterste geval van zulke
subgrammatica's is de regel (of de transformatie).
Voor de isomorfie blijft gelden dat een regel met een regel
moet corresponderen en een subgrammatica met een subgrammatica
waarvan
de regels weer corresponderen. Het is uitgesloten dat een regel met een
subgrammatica die uit meer regels bestaat zou corresponderen.
Dat zou een schending van de isomorfie (maar niet
van compositionaliteit)
zijn. (Hierbij wordt alleen naar regels gekeken die voor
de isomorfie van belang zijn; een regel + een aantal transformaties wordt hier
even niet als subgrammatica beschouwd.)$

$C2 Regelschema's binnen de subgrammatica 
$ Aangezien je vaak regels hebt die op elkaar lijken, zou je ze graag willen
afkorten of erover generaliseren. Daarbij moet in de gaten gehouden worden
dat ze niet te ingewikkeld of onoverzichtelijk worden. Een manier is (zoals in
doc.nr. 31 al beschreven is onder _hyperregels_) om gebruik te maken van
subconditie-actie paren en/of getrapte condities. Een andere afkorting is
d.m.v. parameters.$

$ De behoefte doet zich vooral voor bij verzamelingen regels of transformaties
waar:$
$ a) de semantische operatie hetzelfde is, maar de syntactische conditie en
actie verschillend, maar niet erg veel. Dit zijn bijv. regels die
"elkaar uitsluiten" door
complementaire condities (if... then .... else....), tijdelijke parafrases
veroorzaken in afwachting van andere regels, of die
echte parafrasen opleveren . Het zijn hyperregels (in de zin van Jan L.)
binnen de subgrammatica.$
$ b) de semantische operaties verschillen, maar de syntactische conditie en
actie zijn hetzelfde. Deze regels zijn geen hyperregels (in de zin van Jan L.),
omdat ze niet corresponderen met dezelfde operatie.$
$ Voor a) kunnen we werken met subcondities en -acties, eventueel in
combinatie met getrapte condities, waarbij een pad tot een subactie een regel
is.$
$ Voor b) kunnen we werken met externe parameters en condities op deze
(semantische) parameters.$ 
$ Voor deze regelschema's geldt dat ze altijd generaliseren over een subset
van een subregelklasse.$
$ In de praktijk komen ook combinaties van a en b voor.$
$ (Het zijn in doc. nr. 68 mogelijke sub-subgrammatica's)

$C2 Regelschema's over subgrammatica's heen
$ Regels in lexicaal getriggerde
subgrammatica's corresponderen met operaties. Deze operaties zijn
echter niet allemaal verschillend per subgrammatica. We hebben al gezien
dat in dergelijke subgrammatica's dezelfde regelklassen met bijbehorende
operatieklassen zitten, maar maar niet elke operatie correspondeert met een
regel in elke subgrammatica.$
$ De IL volgt wel de indeling in klassen, maar niet in subgrammatica's.
Het is hierdoor niet mogelijk een regel uit de ene klasse in een regel uit
een andere klasse te vertalen (dus nooit een tijdregel in een negatieregel
bijvoorbeeld), maar wel om een regel uit de ene subgrammatica in een regel uit
een andere subgrammatica te vertalen. Het is mogelijk om per operatie te
bekijken welke regels ermee corresponderen, onafhankelijk in welke
subgrammatica deze regels thuishoren. Zo'n verzameling regels is dan een
verzameling regels die
"dezelfde betekenis" hebben
en dus in elkaar vertaald kunnen worden in principe.
(In doc.nr. 31 werden dit "dwarsverbanden" genoemd.)
Het is nu in principe ook mogelijk een regelschema voor zo'n verzameling regels
op te zetten die in z'n subcondities een conditie zal hebben die betrekking
heeft op de subgrammatica. Dit regelschema komt overeen met de
_hyperregel_ van Jan L.. Er kan nu ook een voorwaarde geformuleerd worden
wanneer vertalingen die tot stand komen via niet-corresponderende
subgrammatica's (hier wordt dus een syntactische correspondentie bedoeld)
mogelijk zijn. Dergelijke vertalingen komen tot stand wanneer ergens in de
derivatie corresponderende basisexpressies niet dezelfde syntactische categorie
hebben, d.w.z. niet dezelfde basiscategorie die inputvoorwaarde is voor een
(corresponderende) subgrammatica. (Er wordt ook wel gezegd dat dit soort
vertaalproblemen "lexicaal getriggerd" wordt.)
Vertalingen zijn nu alleen mogelijk wanneer
de (isomorfe) syntactische derivatiebomen van de betreffende subgrammatica's
alleen regelschema's bevatten met een regel voor elk van
die subgrammatica's. Bovendien moet de output
door corresponderende (substitutie)regels verwerkt kunnen worden.$
$ Dit is nodig voor gevallen als:$
graag - like - gustar
happen - toevallig
misschien - might
$ Er wordt in feite een
isomorfieconditie voor subgrammatica's geformuleerd. Als
dit mogelijk is kun je hiermee ook binnen een grammatica "vertalen", d.w.z.
parafraseren.$

$C2 Voorbeelden
_Opmerkingen vooraf_

$ De volgende voorbeeldgrammatica's dienen om de voorgaande secties te
_illustreren_ en zijn daarom _niet_ volledig en _niet_ bedoeld als een nieuw
voorstel, maar als e@'e@'n manier van "hoe je het ongeveer zou kunnen doen".$
$ _Notatie en naamgeving_:
In de derivatiebomen staan de basisexpressies weergegeven met hun
categorie en string, de regels met namen, en de transformaties met namen tussen
haakjes. De kaders geven de subgrammatica's aan. De naamgeving van de
categoriee@"n is voornamelijk gebaseerd op de Rosetta2-grammatica en heeft het
volgende schema in principe: (OPEN) X (P) (VAR), waarbij OPEN slaat op het nog
niet gesubstitueerd zijn van het eerste argument, X een basiscategorie is, P op
een voltooide frase duidt en VAR aangeeft, dat het tweede argument nog niet is
gesubstitueerd. De indeling (i) t/m (vii) per subgrammatica slaat terug op de
indeling in 3.3.$

$ _Een meer uitgebreide PP-subgrammatica_$

$LD 5
(i) basiscategorie: PREP
(ii) topcategorie: OPENPP
(iii) te gebruiken S-trees: o.a. S-trees met topcategorie PREP, VAR, NP, EMPTY
(iv) niet-terminale categorieee@"n: o.a. OPENPPVAR
(v) regelklassen: o.a. startregels: startPPregel1
                                    startPPregel2
                       substitutieregels: emptysubstitutie 2e argument
                                          substitutieregel 2e argument voor NP
(vi) transformatieklassen: o.a. PPpatternregels: RPPp1
                                                 RPPp2
                                                 RPPpid1
$RL 3
(vii) strategie: 1) startPPregel1   2)  startPPregel2      3) startPPregel2
                    RPPp1/RPPpid1       RPPp2                 RPPp1
                                        substregel 2e arg.    emptysubst 2e arg

$LD 4
voorbeelden: (hij is) in de tuin
             (hij vliegt) boven het huis
             (hij is) boven
             (hij is) in huis

$RL 19
in de tuin:

$LD 5
           OPENPP ----------------Rsubst 2e arg.

      VAR1  PREP  NP
             
             in de tuin
                               NP           (RPPp2)


                            de tuin          startPP2---------OPENPPVAR

                                                            VAR1 PREP VAR2

                                                                  in

                                         PREP VAR1 VAR2

                                          in

$LD 4
boven het huis: analoog

$RL 18
boven: a) boven heeft behalve PPp2 ook PPp1; het is pseudotransitief

$LD 5
    OPENPP --------------------  Emptysubst. 2e arg.

  VAR1  PREP  

       boven
                                  EMPTY      (RPPp1)


                                            startPP2-------OPENPPVAR

                                                          VAR1 PREP VAR2
                                                              boven

                                         PREP VAR1 VAR2

                                         boven

$LD 4
        b) boven is semantisch gezien niet alleen tweeplaatsig, maar ook
           eenplaatsig: het heeft twee keys.

$RL 8
$LD 5
     OPENPP----------------------------(RPPp1)

   VAR1  PREP
                                        StartPP1
        boven
                                      PREP    VAR1

                                     boven

$LD 4
           In dit geval zou boven dus heel goed kunnen corresponderen met een
           eenplaatsig adverbium.

$RL 12
in huis: idiomatische PP die als geheel eenplaatsig is en misschien als
         vertaalidioom wel met een (eenplaatsig) adverbium correspondeert.

$LD 5
   OPENPP                              (RPPpid1)

VAR1  PREP  NP

       in  huis                         StartPP1

                                       VAR1    IDPREP
 
                                               in huis

$LD 4
$RL 2
          Dit zou gebruikt kunnen worden voor het vertaalidioom "at home"(PP)
          en "thuis" (ADV of PP?)

$ Om deze mogelijke generalisaties uit te drukken zeggen we, dat startPPregel1
een subregel is van het regelschema voor de hyperregel startXregel1 die
correspondeert met
de startoperatie1 (X staat voor de topcategorieee@"n van de subgrammatica's)
Analoog is startPPregel2 een subregel van het regelschema voor hyperregel
startXregel2 die correspondeert met startoperatie2.
Startoperatie1 en 2 horen in de startoperatieklasse en startPPregel1 en 2 in de
startregelklasse die daarmee correspondeert. StartPPregel1 en 2 vormen een 
substartregelklasse in dit voorbeeld.$

_Happen/toevallig en graag/like-gevallen_&2&

$ Een paar misschien verhelderende opmerkingen:$
$ _NP_: we hebben aangenomen dat ee NP een start0regel heeft, d.w.z. dat een
NOUN
als een 0-plaatsige functie beschouwd wordt.$
$ _TIJD_: voor het gemak hebben we alleen deictische tijd in het voorbeeld
betrokken en alle aspectkanten weggelaten.$
$ _SENT_: een finiete clause wordt een sentence als hij "deictische tijd",
d.w.z. present, past of future "krijgt".$
$ _Finiete en infiniete tijdsvormen_: voor het gemak laten we clauses altijd
finiet en infiniet worden: de foute valt wel af (tijdelijke parafrasen).
Ook krijgen  de verbs in de
finiete
clauses voordat ze "af" zijn een deictische tempusvorm: ook hier valt de foute
wel af. Dit laatste kan efficienter door vanaf het begin een parameter
supertense mee te laten percoleren.$
$ _Percolatietransformaties_: 1) Om niet steeds diep in de S-tree
te hoeven kijken
laten we steeds de essentie@"le features naar boven percoleren: bijv. vragende
mood van wh-elementen
etc. Al deze attributen hebben een omega- of
defaultwaarde waarvoor de transformaties niets doen.$
$ 2) Om niet onnodig tijdelijke parafrases te hoeven maken, laten we informatie
uit de D-tree naar beneden gaan, bijv. "supertense", een atrribuut dat afgeleid
is van de deictische tijdregel in de hoofdzingrammatica om de tense in de
finiete complementzinnen te regelen. Supertense wordt in deze voorbeelden dus
niet gebruikt voor een locale vertaling. Het is meer een attribuut zoals in een
attribuutgrammatica.$
$ _Patternregels_: deze geven we namen met schema Xpix, waarin X een categorie,
p staat voor pattern, i een getal voor het aantal argumenten
en x een letter is. Voorbeeld: Vp3a.$

$LD 5
$RL 9
_SENT-grammatica_
(i) TIJD (deictische tijd)
(ii) SENT
(iii) TIJD, VAR, CLAUSE
(iv) -
(v) start: startsent1
    subst.: substarg1 voor finiete clause
(vi) -
(vii) start  subst.

$RL 21
_CLAUSE-grammatica_
(i) VERB
(ii) CLAUSE
(iii) VERB, VAR, NP, OPENADVP, OPENPP, OPENADVPVAR, OPENCLAUSE, CLAUSE
(iv) CL0, etc.
(v) start: startclause1,2,3
    subst.: substarg3 voor NP (+/- PREP)
            substarg2 voor NP (+/- PREP)
                           OPENCLAUSE (+/- PREP) met subj. control
                                                     ind.obj. control
                           CLAUSE (+/- PREP)
            substarg1 voor NP
                           CLAUSE
            emptysubst.
            mod.subst voor OPENADVVAR met subj. control
                           OPENADVP
                           OPENPP
(vi) Patternregels: Vp-regels
     Verplaatsingsregels: wh-shiftregels
                          subject raising
     percolatieregels: supertense
     tijdvormregels
     finietheidsregels
(vii) vele mogelijkheden:
      1) start (Vp) substarg3 substarg2 substarg1 modsubst (whshift)
         (finietheid) (tijdvorm)
      2) ....
      maar:  een substitutieregel met bepaalde control moet voorafgaan
             aan de substitutie van het element waarop de control
             betrekking heeft (dus control op variabelen nivo)

$LD 4
$ N.B. Substarg3 voor NP (+/- PREP) etc. zijn regelschema's in de zin van
sectie 3.4. soort a, hyperregels binnen de subgrammatica.$

$LD 5
$RL 24
_OPENCLAUSE-grammatica_
(i) VERB
(ii) OPENCLAUSE
(iii) VERB, VAR, NP, OPENADVPVAR, OPENCLAUSE, CLAUSE, OPENPP, OPENADVP
(iv) CL0, etc.
(v) start: startclause1,2,3
    subst.: subst.arg3 voor NP (+/- PREP)
            subst.arg2 voor NP (+/- PREP)
                            CLAUSE (+/- PREP)
                            OPENCLAUSE (+/- PREP) met subj. control
                                                      ind. obj. control
            emptysubst.
            modsubst. voor OPENADVPVAR met subj.control
                           OPENPP
                           OPENADVP
(vi) Patternregels: Vp-regels
     Verplaatsingsregels: wh-shiftregels
     percolatieregels: supertense
     tijdvormregels
     finietheidsregels
(vii) vele mogelijkheden:
      zie CLAUSE
$ Het verschil met de CLAUSE-grammatica is, dat het eerste argument niet 
gesubstitueerd wordt.$

$RL 8
_NP-grammatica_
(i) NOUN
(ii) NP
(iii) NOUN
(iv)
(v) start: startnp0
(vi) percolatieregels: supertense
(vii)

$RL 10
_OPENADVP-grammatica_
(i) ADV
(ii) OPENADVP
(iii) ADV, VAR, OPENADVP
(iv)
(v) start: startadvp1
    subst: modsubst voor OPENADVP
(vi) patternregels: ADVp1regels
     percolatieregels: supertense
(vii) start (ADVp) (mood) (supertense) modsubst
$ DE ADVp1regels geven aan wat er - semantisch gezien - voor de variabele
gesubstitueerd mag worden: een CLAUSE of een OPENADVP$

$RL 10
_OPENADVPVAR-grammatica_
(i) ADV
(ii) OPENADVPVAR
(iii) ADV, VAR, OPENADVP
(iv)
(v) start: startadvp2
    subst.: modsubst. voor OPENADVP
(vi) patternregels: ADVp2regels
     percolatieregels: supertense
(vii) start (ADVp) (supertense) modsubst
$ De ADVp2regels geven aan wat er voor de variabelen gesubstitueerd mag worden,
bijv. voor de tweede variabele een OPENCLAUSE met control voor de eerste
variabele en een NP voor de eerste variabele (maar dan wel in de clause)$

$RL 23
$LD 4
Jan kwam toevallig/ John happened to come
$LD 5
Nederlands:                            SENT
                                Startsent1
              CLAUSE
                  (tijdvormpast)           PAST

                    (finiet)

              Modsubst. voor OPENADVP
 OPENADVP
     (ADVp1..)                    substarg1 voor NP
                                                     NP
    (supertense)             (Vp1..)         (supertense)

    startadvp1             (supertense)       startNP0
 
 VAR1      ADV            startclause1          NOUN

        toevallig        VAR2     VERB           Jan

                                 komen          

$RL 26
Engels:                                    SENT
                                    Startsent1
        CLAUSE
                     (tijdvormpast)              PAST

                       (finiet)

                    (Raising subject)

                  Subst.arg1 voor CLAUSE
                                           CLAUSE
     (Vp1..)                      (infiniet)

   (supertense)                   (supertense)

  startclause1                  subst.arg1 voor NP
                                                         NP
 VAR1      VERB             (Vp1..)            (supertense)

          happen        (supertense)            startNP0

                         startclause1             NOUN

                       VAR2      VERB             JOHN

                                 come


$RL 23
$LD 4
Jan komt graag/ John likes to come

Nederlands:                                 SENT
$LD 5
                                     Startsent1
             CLAUSE
                          (tijdvormpres)       PRESENT

                            (finiet)
 
                            Substarg1 
                                                  NP
     Substarg2 met arg1 control           (supertense)
 OPENADVPVAR
  (ADVp2..)          (Vp1..)                 start0

 (supertense)       (supertense)              NOUN

    start2             start1                 Jan

VAR1  ADV  VAR2     VAR1   VERB

     graag                  komen

$LD 4
$ _Substarg2 met arg1 control_ is de hyperregel voor:$
1. Substarg2 voor OPENCLAUSE met subj. control
2. Modsubst. voor OPENADVP met subj. control
3. etc.
$ _Start1_ is de hyperregel voor:$
1. startclause1
2. startadvp1
3. etc.
$ _Start2_ is de hyperregel voor:$
1. startclause2
2. startadvp2
3. etc.

$LD 5
$RL 23
Engels:
                                             SENT
                                     startsent1
             CLAUSE
                        (tijdvormpres)           PRESENT

                          (finiet)

                          Substarg1 
                                                   NP
        Substarg2 met arg1 control         (supertense)
                             OPENCLAUSE
   (Vp2..)               (infiniet)           start0

  (supertense)            (Vp1..)              NOUN

    start2              (supertense)           John

VAR1 VERB VAR2            start1

     like               VAR1  VERB

                              come

$LD 4
$ In deze twee voorbeelden zien we dus dat een modifier substitutieregel in
de ene taal met een argumentsubstitutieregel in de andere taal correspondeert.
Semantisch zijn ze hetzelfde, maar syntactisch worden ze anders bekeken.
Daarom maken ze deel uit van verschillende subgrammatica's, maar zitten wel
in dezelfde hyperregel. De syntaxis van deze regels is verschillend, maar
de semantiek niet.$ 

$C1 Samenvatting en opmerkingen
_Regels en transformaties_
$ Regels en transformaties
zijn actie-conditieparen waarbij de actie geen conditie meer mag
bevatten. Regels corresponderen met operaties in de IL, transformaties zijn
taalspecifiek en corresponderen niet met operaties in de IL of met de lege
operatie.$

$RL 3
_Regelklassen, transformatieklassen en subgrammatica's_
$ Door de grammmatica op te delen in subgrammatica's (een syntactische
indeling, geinspireerd op X-bar-theorie)
worden eenheden gecreeerd die redelijk op zich zelf staan en
afzonderlijk getest kunnen worden (tot op zekere hoogte).$
$ Elke (lexicaal getriggerde) subgrammatica bevat:$
(i) een speciale (basis)categorie (de trigger)
(ii) een topcategorie (het resultaat)
(iii) een karakerisering van te gebruiken S-trees
(iv) een verzameling "hulp"categoriee@"n (de lokale)
(v) een verzameling regelklassen met regels
(vi) een verzameling transformatieklassen
(vii) een verzameling mogelijke derivatiepaden (stategiee@"n)
$ De regelklasseindeling die semantisch van aard is, is bedoeld om inzicht te
geven in de vertaalrelevante fenomenen die in principe in elke lexicaal
getriggerde subgrammatica
zouden kunnen voorkomen.$
$ Die fenomenen zijn in ieder geval de toekenning van "thematische rollen" aan
de basisexpressie, waarbij het aantal rollen de arigheid van de functie is
die correspondeert met de basisexpressie, substitutie van elementen voor
variabelen, tijd, mood
en negatie.$
$ Met elk fenomeen correspondeert een operatieklasse
die bestaat uit een verzameling operaties.$
$ De reden, dat er naast operaties operatieklassen en analoog daaraan naast
(hyper)regels regelklassen onderscheiden worden, is, dat er operaties resp.
(hyper)regels zijn die in zekere zin over hetzelfde gaan; tesamen beschrijven
ze een vertaalrelevant linguistisch fenomeen:$
$RL 6
     _IL_                           _G_                       _fenomeen_
startoperaties               startregels           thematische rollen toekennen
tijdoperatoren               tijdregels                     tijd
substitutieoperaties         substitutieregels       argumenten substitueren
negatieoperatoren            negatieregels                negatie
moodoperatoren               moodregels                     mood
$ Operaties corresponderen met regels
in de grammatica. Elke operatieklasse correspondeert met een regelklasse.
Subgrammatica's bevatten niet alle regels uit een regelklasse, maar een deel:
een _subregelklasse_, die soms ook leeg mag zijn. Veel regelklassen zijn
optioneel in subgrammatica's.$
$ De (sub)regelklassen vormen aanknopingspunten voor robuustheid,
interactie en bonustoekenning.$
$ Analoog aan regelklassen worden transformatieklassen gedefinieerd die staan
voor een syntactisch fenomeen. Vele daarvan komen in alle talen voor, maar dat
hoeft niet. Evenmin is het noodzakelijk dat transformatieklassen in alle
subgrammatica's voorkomen, al zal dat vaak het geval zijn. In voorbeelden was
er sprake van patternregels, percolatieregels en verplaatsingsregels.$
$ Fenomenen die misschien vertaalrelevant zijn, maar die in dit document niet
zijn behandeld zijn: modaliteit, topikalisatie en voice.$

$RL 3
_Hyperregel_
$ Een hyperregel (in de definitie van Jan L.) is een verzameling regels die
correspondeert met dezelfde operatie. Zo'n hyperregel kan binnen een
subgrammatica vallen, maar ook regels uit verschillende subgrammatica's
bevatten. Een hyperregel is altijd een deelverzameling van een regelklasse.
Het komt overeen met een bepaald soort regelschema.$

$RL 3
_Regelschema's_
$ Regelschema's (hyperregels in doc.nr. 31) zijn afkortingsmechanismen die
altijd generaliseren over regels binnen een regelklasse. Binnen een
subgrammatica lijken zij prettig om  regels die syntactisch hetzelfde zijn
of veel op elkaar lijken af te korten. Regelschema's over subgrammatica's
heen lijken in eerste instantie minder overzichtelijk. Voordeel is dat de
transfercomponenten eenvoudiger worden en er gegeneraliseerd wordt over iets
dat dezelfde betekenis heeft in geval van "syntactisch moeilijke vertalingen".$

$RL 3
_Derivatiestrategie_
$ Wij vinden, dat de derivatiestrategiee@"n expliciet moeten zijn, zodat
inzicht in wat wel en niet vertaalbaar is verkregen kan worden. Onderzoek
naar scope, weerspiegeld in de derivatieboom, is in dit kader belangrijk.$
$ We hebben regels en transformaties streng van elkaar gescheiden om wat
vertaalrelevant is goed te kunnen scheiden van taalspecifieke zaken. Vooral
bij het bepalen van de mogelijke derivatiestrategiee@"n, die behouden moeten
blijven bij vertalen (isomorfieschema), is dat prettig.$

$RL 3
_Syntactisch moeilijke vertalingen_
$ Syntactisch moeilijke vertalingen ontstaan wanneer een basisexpressie in de
ene taal correspondeert met een basisexpressie in de andere taal en de
syntactische categoriee@"n ervan
niet overeenkomen, d.w.z. dat ze in "syntactisch
niet
corresponderende subgrammatica's" terecht komen. Wanneer we nu alle
subgrammatica's op dezelfde manier inrichten, kunnen we voorwaarden opstellen
wanneer zo'n vertaling toch mogelijk is, nl. als de derivatiebomen van die
expressies die door de betreffende subgrammatica's gegenereerd worden
isomorf zijn en het
resultaat in beide talen door corresponderende regels behandeld kan worden.
Wat daarvoor nodig is, is dat er "isomorfe subgrammatica's binnen een taal"
geschreven worden. Als dat mogelijk is, zou elke syntactische basiscategorie
in elke andere syntactische basiscategorie vertaald kunnen worden.
Waarschijnlijk is dit gedeeltelijk mogelijk. Het regelschema
over subgrammatica's heen is een middel om dit soort isomorfie uit te drukken.
Het
voordeel in het vertaalsysteem is, dat de grammatica's van de talen
voor wat
betreft de syntaxis minder afhankelijk van elkaar worden en toch bepaald kan
worden in hoeverre moeilijke gevallen als graag/like in elkaar vertaald
_kunnen_ worden. N.B. Het is dan ook mogelijk alle mogelijke parafrasen die
een dergelijk categorieverschil vertonen binnen een taal te genereren.$

$RL 3
_Niet lexicaal getriggerde subgrammatica's_
$ Er zijn twee manieren om binnen wat in bovenstaande secties als (lexicaal
getriggerde)
subgrammatica's is gepresenteerd (gebaseerd op de Rosetta2-grammatica) een
onderverdeling te zien die je ook subgrammatica's zou kunnen noemen, maar
dan zonder een speciale inputexpressie die een _basic_ S-tree is:$
$ 1) een regel is eigenlijk te complex en er zijn een aantal stappen
te herkennen die in alle regels van de regelklasse waartoe de regel
behoort voorkomen. Deze stappen kun je "regelklassen van de regelklasse"
noemen of je kunt de regelklasse promoveren tot subgrammatica. Voorbeeld:
tijdregels die zowel een deictisch als een aspectueel aspect hebben.$
$ 2) Twee subgrammatica's lijken erg veel op elkaar in die zin dat de ene
grotendeels overeenkomt met
de andere, d.w.z. dat ze bijv. dezelfde speciale basisexpressie hebben en
de mogelijke derivatiepaden van de e@'e@'n een gedeelte van de mogelijke
derivatiepaden van de ander is. Voorbeeld: OPENCLAUSE en CLAUSE uit sectie
3.6. Het resultaat van het gemeenschappelijke deel (een subgrammatica) wordt
dan bijv. de input voor beide.$

$RL 3
_Optimalisaties_
$ Door expliciete derivatiestrategie kunnen binnen de grammatica
"optimalisaties"
uitgevoerd worden, doordat men weet wat bekend verondersteld kan worden.$
$ Maar het is ook heel goed voorstelbaar een ander soort optimalisatie uit
te voeren, nl. door "syntactische IL-regels" toe te staan als talen syntactisch
veel op elkaar lijken.$
_Voorbeeld_:
$ Verbpatternregels in Rosetta2 kunnen in groepen verdeeld worden, zodanig dat
alleen verbpatterns uit zo'n groep met elkaar corresponderen. Elke groep
correspondeert dan met een "syntactische IL-regel". Criteria voor die
groepenindeling zijn a) aantal argumenten en b) aard van de argumenten. Dit
wordt in de feitelijke Rosetta2-grammatica ook gedaan.$
$ Door een dergelijke IL-regel op te nemen wordt de efficientie bevorderd, maar
het draagt in principe niet bij tot betere vertaling, als vertaling alleen
zoiets betekent als "behoud van betekenis". Wanneer we onder het begrip
"goede vertaling" ook verstaan dat de "constructie uit de brontaal zoveel
mogelijk behouden moet blijven", dan worden syntactische IL-regels of
syntactische aspecten van semantisch equivalente regels ook veel belangrijker
om de ene vertaling te prefereren boven de andere vertaling.$

_Voorbeeld_
a) de etende ezel             1. the eating donkey
                              2. the donkey that is eating
b) de appels etende ezel         the donkey that is eating apples

$ In a) kunnen we dan een voorkeur uitspreken door in de semantische
derivatieboom syntactische informatie toe te voegen
aan de operatie die de substitutie van een relatieve zin in de NP voor zijn
rekening neemt, bijv. M%22% (anterelsent). In b) is
die constructie niet mogelijk en vervalt de voorkeur.
De syntactische informatie in de semantische derivatieboom fungeert dan als
vertaalbonus.$

$ Met bovenstaande begrippen hopen we een beetje orde in de grote verzameling
regels van een grammatica als de Rosetta2-grammatica aangebracht te hebben
die niet alleen inzicht geeft in de vertaalproblematiek, maar ook als
uitgangspunt kan dienen voor richtlijnen aan de grammaticaregelschrijver,
modulaire ontwikkeling van het Rosetta-vertaalsysteem en onderzoek naar
interactie, robuustheid en bonustoekenning.$
$ Het zal duidelijk zijn, dat veel van deze ideee@"n nog nadere (concretere)
uitwerking
behoeven, bijv.:$
- het onderscheid regel/transformatie
- het onderscheid regel/regelschema
- lexicaal en niet-lexicaal getriggerde subgrammatica's
- mogelijkheid tot "isomorfe subgrammatica's"
- percolatietransformaties
- robuustheid
- interactie
- bonustoekenning
- derivatiestrategie m.b.t. regels en transformaties
- optimalisaties
$ Maar we hopen, dat in dit document de grote lijn duidelijk is geworden.$

$C1 Noten
1) zie doc.nr. 42: Translation of Time
2) De uitwerking van dit voorbeeld is gebaseerd op Landsbergen (1984)

$A1 Het beeldverhaal
$ Voor de meer visueel ingestelde medemens brengen wij de in dit document
behandelde begrippen in tekening. In een paar stappen wordt de samenhang tussen
subgrammatica's, regelklassen en operatieklassen in kaart gebracht. Vervolgens
krijgen de verschillende soorten regelschema's hun plaats binnen de tekening.$
$ In figuur 1 zien we dat de regels van elke grammatica corresponderen met
operaties uit de IL, en wel middels een volledige bidirectionele afbeelding. In
figuur 2 zijn de verzamelingen regels en operaties onderverdeeld in
deelverzamelingen, namenlijk de regelklassen respectievelijk de
operatieklassen. Uit de informele definities volgt dat iedere grammatica het
zelfde aantal regelklassen heeft en dat dit aantal gelijk is aan het aantal
operatieklassen. In figuur 3 zijn de regelklassen onderverdeeld in
subregelklassen. Een rijtje, eventueel lege, subregelklassen (uit elke
regelklasse precies 1) te samen vormen een subgrammatica. In figuur 4 tenslotte
vinden we drie voorbeelden van regelschema's: a is het meest simpele geval
waarin elke operatie correspondeert met 1 regel, en omgekeerd; b is een
voorbeeld van een regelschema dat overeenkomt met Jan's hyperregel; c is een
voorbeeld van een regelschema dat juist niet overeenkomt met Jan's hyperregel.$

$ De in de tekening gebruikte symbolen :$



                     =  grammatica



                     =  regelklasse / operatieklasse


                     =  subregelklasse

       ...                 ...                  =  subgrammatica

                     =  subregelklasse


                     =  afbeelding van regel op operatie
$NP





              G%1%                   IL                   G%2%
  fig. 1













              G                      IL
  fig. 2













              G                      IL
  fig. 3
$NP



   a


   b




   c


              G                      IL
  fig. 4
