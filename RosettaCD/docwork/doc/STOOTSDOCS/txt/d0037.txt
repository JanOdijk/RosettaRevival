$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$AC @
$XC ~`

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta2

    ---------------------------------------------------------







         Title        :  Use of Rosetta2

         Author       :  Carel Fellinger









         Doc.Nr       :  37

         Date         :  23/08/85

         Status       :  concept

         Supersedes   :  

         Distribution :  project

         Clearance    :  project

         Keywords     :  software
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Nederlandse Philips Bedrijven B.V.

$ph Rosetta          Doc.nr: 37                      date:23/08/85
$Np 1
_Content_
$ This document describes the modes in which Rosetta2 can be used. It also
describes the way Rosetta2 should be invoked.$

_Conventions_
$ The same terms are used as in R18 and its derivates. VAX/VMS specific things
are not explained, nor is it the aim of this document to instruct an 'end user'
in the use of Rosetta2.$
$NP
$C1 How to invoke Rosetta2.
$ To start with some symbols and logicals should be created, this is done by
activating the command file "syslibdir:grouplogi". (It is handy to incorporate
this activation in your login command file).$
$ In order to be able to translate between the source and target language of
your choice you simple have to type "execrosetta <source> <target>
<interaction>", with <source> replaced by the chosen source language name,
<target> by the chosen target language name, and <interaction> by the name of
the language in which you want to have the dialogue between you and the
Rosetta2 program.$
$ The only language for which the interaction dictionary exists is Dutch, with
the name 'Dutch'. It is very easy to make the other interaction dictionaries (a
tool already exists), but this still has to be done. The source and
target languages that are available are Dutch and English, and for both a demo
and a work version exist. The work version for Dutch is called 'workDutch', the
demo version is simply called 'Dutch'. The names for the English versions are
similar.$
$C1 What happens using Rosetta2.
$ After you invoked Rosetta2 the environment in which the program will run is
created. Mostly this will give rise to many VAX/VMS messages on your screen.
As long as they are not error messages you can ignore them.$
$ Next the dictionaries are initialised, this may take quite a while. First a
message is displayed and then the dictionary is read into main memory.$
$ Now some general initialisations are done. At this moment the program gives
you the opportunity to adjust its behaviour to your specific needs. This is
done by interactively altering its 'mode'.$
$ Finally the program is ready to translate. It will now keep on asking you for
input sentences and will try to translate them. After every translated input
sentence it will ask whether you want to continue or not, and at the same time
it will give you the opportunity to adjust its mode in case your needs have
changed.$
$ Every translation will be preceded by at most four stars. For every error
that occurred in one of the eigth components one star less will be printed.
This gives a very fast indication of how well a sentence could be translated
according to the grammar applied by Rosetta2.$

$C2 The different modes.
$ Rosetta2 offers the possibility to adjust its behaviour to your personal
needs by maintaining a list of parameters. These parameters receive their
default value when the general initialisation is done, and they maintain their
current values until you change them. This changing is done interactively
whenever you chose to change the mode of Rosetta2.$
$ During the translation process some other questions are put forth. For this
see the description of the mode parameter and the seperate paragraph on
interaction.$
$ All questions are formulated in the chosen interaction language, and they all
have a default anwser. This default answer is taken to be meant whenever
you anwser with a simple <CR>.$

$C2 The parameters, their values and their effect.
$ Here a description of the parameters and their effect is given, they appear in
the same order as they will appear on your screen.$
shortcircuit :
$MA 2
$ Every analytic component can be 'shortcircuited' with its corresponding
generative counterpart. For instance when you shortcircuit S-PARSER, then
M-PARSER, A-TRANSFER, G-TRANSFER and M-GENERATOR are skipped. The shortcircuit
of M-PARSER is complicated and therefore not yet implemented.$
$ It is obvious that shortcircuit is only meaningful when the source and target
language are the same, and even of the same version. That is why the program
refuses to shortcircuit when this is not the case.$
$ Initial = no shortcircuit$
$ Default = no change$
$MA 0
stop level :
$MA 2
$ It is possible to only use the first n components, in that case n is called
the stop level.$
$ Initial = 8$
$ Default = no change$
$MA 0
trace :
$MA 2
$ It is possible to monitor the process of translation. You can choose what
components should be traced. If a component is traced then also some
intermediate results are displayed.$
$ Initial = nothing is traced$
$ Default = no change$
$MA 0
print :
$MA 2
$ It is possible to print the result of a component as a whole, this result is
the interface between two successive components. Again this can be done for
every component.$
$ Initial = no interface is printed$
$ Default = no change$
$MA 0
specials :
$MA 2
$ By answering this question positively you get the opportunity to change the
following parameters.$
$ Default = the following questions are not given$
$MA 0
  time limit for surfparser:
$MA 4
$ This controls the amount of  time the surface parser may work without its
intermediate result being purged. This helps in giving the surface parser a
more linear behaviour.$
$ Initial = 30 seconds$
$ Default = no change$
$MA 0
  extra :
$MA 4
$ This parameter makes it possible to show how many errors occurred in each
component. If no error occurred then no message is generated.$
$ Initial = doesn't show the error rate$
$ Default = no change$
$MA 0
  mode :
$MA 4
$ The program can be used in different modes, some of these modes can be valid
at the same time. The modes of which only one can by valid at the same time
are listed in one line. When you use more then one of these to specify the
mode, the program thinks that you meant the last one.$
$MA 0
    int/nonint :
$MA 6
$ Determines whether the interactive mode is active or not, only valid in
analysis. In case of difficulties the program asks for help. See also the
paragraph on interaction.$
$MA 0
    one/more/all/allandall :
$MA 6
$ This parameter is responsible for the way in which the translations of one
sentence appear on your screen.$
$ An alternative is the set of translations derived from one and the same
IL-expression. Rosetta2 produces all alternatives of one input sentence ordered
according to the bonus.$
$ A variant is an element of an alternative. Variants are also produced
ordered according to their bonus.$
$MA 0
$HR 7,-
$ one gives only the translation with the highest bonus,$
$HR 7,-
$ more asks whether you want more or not after every variant and after every
alternative (the default awnser here is no),$
$HR 7,-
$ all asks whether you want more or not after every alternative (the default
awnser here is no),$
$HR 7,-
$ allandall simply gives all variants and all alternatives.$
$UM
    spec/nospec :
$MA 6
$ Determines if Rosetta2 is willing to adjust itself to changing needs.$
$MA 0
$MA 4
$ Initial = spec nonint all$
$ Default = no change$
$ A question mark ('?') as input gives a survey of the possible modes, you can
then make your choise.$
$MA 0
  terminal :
$MA 4
$ To be able to give a nice output the program must know what kind of terminal
you are using.$
$ Initial = VT100$
$ Default = no change$
$ A question mark ('?') as input gives a survey of the possible terminals,
you can then make your choise.$
$MA 0
$C2 Interaction
$ There are three different kinds of interaction possible in Rosetta2. There is
interaction in order to control the flow of the program and to adjust the mode
in which the program works; there is the interaction involved in the
desambiguation in analysis, and there is some interaction for the sake of
robustness.$
$ The interaction giving control over the program flow makes it possible to
influence the number of generated translations, see the description of the mode
parameter for more information. It also helps to adjust the mode in which the
program works, this is described in the paragraph on the parameters and their
values.$
$ At this moment interaction assisting in the desambiguation in
analysis only takes place in the A-TRANSFER component, and only if you have
chosen the interaction mode (see the discription of the mode parameter). This
interaction consists of the following :$
$MA 2
$ Whenever a basic expression with more then one possible translation,
according to ATDICT, is encountered during the translation of the analytic
derivation tree into its logical equivalent, a description of the meaning of
these variants is displayed. Then the user is asked which description fits best
to what he meant. The default answer gives unpredictable results here,
so don't use it here.$
$ By the way, these descriptions are part of ATDICT, but only for a few words
something different from the empty description is in the dictionary.$
$MA 0
$ Only in A-MORPH it was nice to have interaction to implement robustness. This
interaction consists of the following :$
$MA 2
$ The user is offered a rephrasing chance in case a word of the input sentence
is not found in AMDICT. The default answer directs the program to treat this
word as a bug, that is to put brackets around it and make a PROPERNOUN of it.
Unfortunately this doesn't work as one would expect in case a proposed stem of
the word is in the dictionary but according to the lextree rules the proposal
is wrong.$
$MA 0
