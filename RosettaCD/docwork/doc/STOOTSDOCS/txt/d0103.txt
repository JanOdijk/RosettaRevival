$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$AC @

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta3.linguistics

    ---------------------------------------------------------







         Title        :  The organisation of the ADVP-subgrammar

         Author       :  Franciska de Jong









         Doc.Nr       :  103

         Date         :  06/13/86

         Status       :  concept

         Supersedes   :  

         Distribution :  iso's

         Clearance    :  project

         Keywords     :  adverb, ADVP, substitution, degree, 
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Copyright (c) Nederlandse Philips Bedrijven B.V.
$PL 274,16
$LD 5
$OP SH=U,HY=1,la=E,ph=r,pn=c,AN=N
$np 1
$UC `
$SC ^_
$AC @
$ph Rosetta          Doc.nr: 103                       date:06/13/86
$C1 Introduction
$ This document is a proposal for organisation of the ADVP-subgrammar. It is
meant to deal with the phrases with a head that traditionally belongs to the
category of adverbs. One category of adverbs is supposed to be dealt with by a
second subgrammar for adverbials, i.e. the category of adverbs that can get a
translation by means of a verb, e.g. `graag`. It is to be decided later on
whether these two subgrammars should be considered as one or not. (For the time
being, the two types of phrases can be distinguished by using different labels
for top-node: adverbial phrases with the `graag`-type adverbs as a head are
called ADVPProp, the others are called ADVP.)$ 
$ For several of the proposals in this document a more detailed argumentation
can be found in doc. 98. As the proposals in doc.98 are slightly different from
the proposals in this document, an appendix is added containing some
exemplifying derivations.$ 

$np
$c1 The control expressions

`Dutch`

import: `BADV`, VAR, ADVP, QP, COMPL
export: ADVP, ADVPProp

control expression:
RC: startadvprules.TC: advpatternrules.[RC:complmodrules].
[RC: degreemodrules].?TC: complextraprules?.{TC: morfadaprules}.
[RC: substitutionrules]

`English`

import: `BADV`, VAR, ADVP, QP, COMPL
export: ADVP, ADVPProp

control expression:
RC: startadvprules.TC: advpatternrules.[RC:complmodrules].
[RC: degreemodrules].?TC: complextraprules?.?TC:muchinsertion?.
{TC: morfadaprules}.[RC: substitutionrules]

`Spanish`

import: `BADV`, VAR, ADVP, QP, COMPL
export: ADVP, ADVPProp

control expression:
RC: startadvprules.TC: advpatternrules.[RC:complmodrules].
[RC: degreemodrules].?TC: complextraprules?.{TC: morfadaprules}.
[RC: substitutionrules]
$np
$c1 The function of the various rule classes

$ 1. In accordance to the conclusion drawn in the iso-meeting of 03.06.86 the
rules of RC:startadvprules which build the ADVP introduce a subject-var for
every ADVP. But unlike the sentential grammar where a syntactic VERBP is
supposed to be introduced by RC:verbpatternrules, proliferation within the the
ADVP is considered dispensable. (This might be different for the ADVPProps.) $

$ Except the subject-var no other vars are supposed to be introduced by the
startadvprules. The complements of adverbs such as `zo` and `meer` that show up
in (i) are inserted directly, not by substitution. That is, they are treated as
modifiers.$ 

    (i) a. Piet is meer tevreden `dan ooit`
        b. Piet is zo lang `dat hij overal opvalt`

$ The assumption that complements of Adverbs are generated as part of the ADVP
is problematic for cases where the complement doubly linked. E.g. in
(ii). For this case the complement should be regarded as independent.$
 
    (ii) Hij is zo vaak zo hard gevallen dat hij niet meer durft

$ 2. TC:advpatternrules - specification of the proliferation (which is absent)
and relations of the elements in ADVP.$

$ 3. RC:complmodrules  - introduction of complements of adverbs such as
`zo`, `meer` and `even`. As adverbial complementation is not 
without complications lots of the relevant cases have been assigned a low
priority. The complmodrules are supposed to deal only with the more easy cases,
i.e. cases where the complement does not involve gapping.$
Each adverb selects complements with different complementizers.
Some of the adverbs might even select more than one different kind of 
complement. Some examples:$

   (iii) a. Piet is meer tevreden `dan ooit`
         b. Piet is zo lang `dat hij overal opvalt`
         c. Piet is niet zo lang `als Klaas`
         d. Piet is even lang `als Kees`

$ The syntactic structure of the complements is not very transparent. For the
moment I presume that there is a set of rules that takes care of the generation
of the underscored phrases with COMPL as their top-node.$ 

$ Note that if `zo`/`so` occurs without complement it has a different meaning
which can be paraphrased by 'in a high degree' istead of 'in such a degree'.$

$ 4. RC:degreemodrules  - the import of degree-ADVPs, e.g. `te` in `te vaak`.
Within the surface tree degreemodifiers are treated as expressions that are
modifiers to the head. That is, they are a sister of the head, with
a modifier relation (relation name: mod) 
to the dominating ADVP-node.$
$ A degreemodifier such as `te` is considered to be an 
ADVP occurring within an ADVP. Before the import of
the modifier takes place, both the phrase that is to be modified e.g. `vaak` 
as well as the modifier itself contain a subject-var. 
As an effect of the degreemodrules the var within the modifier disappears.
Semantically this var is substituted by the ADVP that contains the head of 
the phrase. `te VAR` is supposed to denote a function that takes an ADVP to
yield an ADVP. Note that what counts semantically as the functor is not 
the head in the derivation, nor in the surface tree.$

$ 5. TC: complextraprules (complement-extrapositiorules) account for the
rightward movement of embedded complements. An adverb that is modified by a
preceding complemented adverb requires that the complement be moved to the
right such that it follows  the main adverb instead of preceing it. The adverb
of which the complement is dependent needs not be submitted to rightward
movement.$ 
$ Constructions with more than one complement which might occur in
case of double embeddeding, e.g. in `zo veel langer dan gemiddeld dat hij
overal opvalt`, extraposition can apply to all complements:$ 

  (iv) Omdat hij zoveel langer is dan gemiddeld dat hij overal opvalt, .....

$ This implies a recursive application of the rules. On the other hand,
application is obligatory: *`minder dan gemiddeld lang`. The notation available
thusfar can not express this restricted form of non-optionality. The question
marks in the control expression indicate that a suitable notation is not yet
available.$ 
$ Note that some complements do not remain in the position to which
the extraposition rules within the ADVP-subgrammar move them. Within the clause
that contains the proliferated ADVP they might again be moved to the right.$ 

$ 6. TC:muchinsertion  - English degreeADVPs with `very` as the head must be
accompanied by `much` in order to occur as a modifier within aVERBPhrase. For
these cases the transformation muchinsertion inserts `much` as a
syncategorematic expression within the ADVP. The rule is optional, so the
ADVP-subgrmmar is supposed to yield both `very` and `very much`. Which form
occurs in the final string is decided by the category of the phrase into which
`very`/`very much` is imported.$ 

$ 7. TC:morfadaprules  - the spelling out, cq. morphological incorporation of
degreemodifiers. Examples:$
                                 meer lang --> langer, more long --> longer
                                 muy mucho --> muchi@'simo
                                 tan mucho --> tanto
                                   
$ 8. RC: substitutionrules  - the substitution of embedded vars. (Probably 
embedded vars will occur very rarely within ADVPs. If they do and if they are
not too deeply embedded (a measure is to be established), they should 
not be substituted within the ADVP, but rather on sentential level. If it 
can be guaranteed that in ADVPs embedded vars never occur below a certain depth
the ruleclass should not be part of the ADVP-subgrammar.)$
$np
$c1 The import of the ADVP-subgrammar export within other subgrammars

$ The AdvPsubgrammar export can serve as import for several subgrammars:$

a. as adjunct in a VERBP/Sentence-subgrammar
           - De overwinning van Barcelona verbaasde ons `zeer`
           - De beslissing werd `later` genomen `dan gisteren`
           
b. as adjunct in a AdjP-subgrammar
           - De reactie was `heel` voorspelbaar
           - Klaas is lang`er dan Piet`

c. as adjunct in a PP-subgrammar
           - De pers was `zeer goed` op de hoogte
           - De aardappelen zijn `bijna` gaar           

d. as adjunct in a QP-subgrammar
           - Jan is `zo` veel langer dan gemiddeld `dat hij opvalt`
           - Kees is `veel` minder besluiteloos
           - Klaas slaapt `te` weinig

e. as adjunct in a ADVP-subgrammar (recursively): 
           - Klaas zwemt hard`er dan Piet`
           - Piet heeft `te` hard  gewerkt
           - Jan is `zo` lang `dat hij opvalt`

f. as substituent for vars occurring with abstract prepositions in the relevent
   subgrammars. It is not a priori clear which subgrammars are 'relevant', but
   obviously the CLAUSE-to-SENTENCE-subgrammar is one of them. 
$np
$c1 The very/very much-alternantion & the muy/mucho-altenantion
(This section incorporated because section 5 in doc. 98 addressed to the
same issue is not as transparent as is should be.)

The relevant expressions are given in (1,2)

(1) a. `very`  (geen import voor VERBP's: *Everybody loves her very)
    b. `very much` (alleen import voor VERBPs: *She is very much cute)

(2) a. `muy` (geen import voor VERBP's)
    b. `mucho` (alleen import voor VERBPs: *Es mucho agradable)

$ Intuitively, all expressions in (1,2) have a meaning that can be paraphrased
by 'in a high degree', a meaning which they share with the Dutch `zeer` (and
its synonyms). Therefore it is plausible that alle these so-called boosters
be mapped on the same meaning. This strategy requires an answer to the questions
a. how `very much` is derived from a basic meaning, and b. what relation is 
assumed between `muy` and `mucho`.
The proposal -already agreed 
upon (cf. doc. 102)- is to map the basic meaning corresponding to `zeer` 
on the English form `very` and on the Spanish forms `muy` and `mucho`. 
There is no basic meaning corresponding to `much`. This element is introduced
syncategorematically by an 
optional transformation in the Englisch ADVP-subgrammar that replaces `very` by
`very much`. As a result `zeer` has two translations in both English and 
Spanish without being considered ambiguous within 
Dutch grammar. The temporary ambiguity 
(paraphrases) in the English and Spanish derivations is solved as soon as the
ADVP is embedded in a complex expression. Depending on the syntactic category
of the complex expression one of either paraphrase is selected.$

Derivation:

$rl 14
import: BADV *very*/*zeer*/*muy*/*mucho*, VARi
RC: startadvprules
TC: advpatternrules

Eng:  ADVP{type:degree}      NL: ADVP{type:degree}     SP: ADVP{type:degree}


    subj   head             subj      head           subj       head

    VARi   ADV              VARi      ADV            VARi       ADV

           BADV                       BADV                      BADV
          *very*                     *zeer*                    *muy*
                                                               *mucho*
$rl 10
eTC: muchinsertion
                          
Eng             ADVP{type: degree}                 

     subj       head         rel_i_
                                                   
     VARi       ADV          CAT

                BADV      
               *very*       *much*                    
 
$rl 12
(3) a. Syntactic derivation trees
                                               ...

       ...               ...                eTmuchinsertion        ...

    nlTadvpattern       eTadvpattern        eTadvpattern         spTadvpattern 

    nlRadvpstart        eRadvpstart         eRadvpstart          spRadvstart

      BADV              BADV                BADV                   BADV       
      zeer              very                very                   muy
                                                                   mucho


(4) b. Semantic                     S1
       derivation:


                                    B1
$np
$c1 The ADVP=PP-analysis
$ The present proposal presumes that ADVPs be imported within a derivation 
directly, i.e. not by substitution of a var. This would imply that the scope 
of scope-bearing ADVPs be linked to the moment of insertion. Now sometimes
this turns out
to be incorrect, 
e.g. for 'Waar heeft hij (allemaal) een boek achtergelaten', where
`waar` can have scope over `een boek`. $

$ In order to avoid this misinterpretation it is assumed that scope-bearing 
adverbs are considered to occur within a PP, initially 
consisting of an abstract 
preposition and a var. On the sentential level this var 
is substituted by a real ADVP. Under this approach 
the scope of an adverb is not
a priori linked to the moment the ADVP is inserted within a phrase. Instead the
position within the surface S is crucial.$

$ The underlying PP does not necessarily show up in the final surface tree. 
During generation, 
the abstract preposition can freely be deleted as soon as the PP-var that
eventually is to be substituted by an ADVP, is introduced
within the derivation.$

$ The set of scope-sensitive ADVPs is supposed to include spatio-temporal
expressions like `waar`, `wanneer`, `ooit`, `overal`, etc. Degree-adverbs
are supposed not to affect the scope-relations within a sentence
and therefore are not assigned an underlying PP-status.$
$np
$c1 Required attributes and attribute values
$ For Rosetta3 the following attributes/attribute values should be 
added to the Rosetta2-set.$

For BADVs in general:
    - semantic type
        kind (degree, duration?, ...)
    - advppattern to indicate the number of (syntactic) vars 
        advppattern  : (0, 1,...)
    - .....

For Dutch and English basic adverbs and adjectives: 
    - superlative-incorporation 
         superinc: (possible, impossible, obligatory, ....)
    - comparative-incorporation 
         comparinc: (possible, impossible, obligatory, ....)
    - .....

For Spanish  basic adverbs and adjectives: 
    - muy-incorporation
        muyinc : (possible, impossible, obligatory, .....)
    - .....
$np
APPENDIX

NB. Most records are left out

(1) Simple ADVPs: a. te
                  b. opzettelijk

import: BADV *te*, *opzettelijk*, VARi
RC: startadvprules
TC: advpatternrules

a.     ADVP{type: degree}         b.     ADVP{type: manner}
 
    subj     head                      subj    head

    VARi      ADV                      VARi     ADV

             BADV                              BADV
             *te*                              *opzettelijk*

(2) Complex ADVPs: a. te vaak
                   b. veel te vaak
                   c. iets meer dan gisteren
                   d. iets langer dan gisteren

(2a) `te vaak`
import: BADV *vaak*, VAR1
RC: startadvprules
TC: advpatternrules

$rl 6
       ADVP{type: duration}            
 
    subj     head                  

    VAR1     ADV                   

             BADV
             *vaak*                  

import: ADVP *te*
        [derivatie: import: BADV *te*, VAR2
                            RC: startadvprules
                            TC: advpatternrules
$rl 6
                                ADVP{type: degree}            
 
                            subj     head                  

                            VAR2     ADV                   

                                     BADV
                                     *te*                  ]

RC: degreemodrules
                                      
           ADVP{type: duration}

   subj    mod       head       
      
   VAR1    ADVP      ADV        

           ADV       BADV       
                    *vaak*          
           BADV
           *te*      

NB. VAR2 disappears as an effect of the degreemodrule

(2b) `veel te vaak`
import: BADV *vaak*, VAR1
RC: startadvprules              cf. above
TC: advpatternrules
import: ADVP `veel te`
        [derivation: import: BADV *te*, VAR6
                     RC: startadvprules
                     TC: advpatternrules
                     import: QP *veel*
                     RC: degreemodrules

$rl 8
                         ADVP{soort: degree}            

                 subj    mod       head                 
     
                 VAR6    QP{}      ADV                            

                         BQ        BADV                           
                       *veel*      *te*                  ]

$rl 18
RC: degreemodrules

              ADVP{type: duration}

   subj       mod         head       
      
   VAR1       ADVP        ADV        

          mod     head    BADV       
                          *vaak*                     
           QP     ADV  

           Q      BADV 
                  *te*     
           BQ
          *veel*

NB. VAR6 disappears as an effect of the degreemodrule


(2c) `iets meer dan gisteren`

$rl 10
import: BADV *meer*, VAR8
RC: startadvprules
TC: advpatternrules

        ADVP{type: degree}                 

     subj     head                              

     VAR8     ADV                               
              *meer*                              

RC:complmodrules
import: COMPL{}
        [derivation: not yet specified; should at some level of embedding
                     involve the import of `gisteren` as ADVP, which in turn
                     involves the import of `gisteren` as a BADV.           ]
                                             
$rl 6
           ADVP{type: degree}             
 
  subj     head      compl                                      
                                    
  VAR8     ADV       COMPL{}                   

           BADV 
          *meer*   *dan gisteren*

$rl 11
import: QP *iets*
        [derivation: parallel to derivation of `veel` above]
RC: degreemodrules
                                                  
                ADVP{type: degree}          

   subj      mod       head       compl              
      
   VAR8      QP{}      ADV        COMPL              

             Q         BADV
                      *meer*   *dan gisteren*
             BQ
             *iets*   

$rl 16
(2d) `iets langer dan gisteren`

import: BADV *lang*, VAR5
RC: startadvprules
TC: advpatternrules

$rl 7
         ADVP{type: duration}               
 
    subj        head             

    VAR5        ADV                            
  
                BADV
               *lang*            

$rl 8
import: ADVP *iets meer dan gisteren* 
        [derivation: cf. (2c) above]
RC: degreemodrules

                 ADVP{type: duration}          

    subj          mod                 head
      
    VAR5          ADVP                ADV

                                      BADV
       *iets meer dan gisteren*      *lang*              
    

NB. VAR8 disappears as an effect of the degreemodrule

$rl 10
TC: complextraprules

                 ADVP{type: duration}          

    subj         mod           head       extrapos
      
    VAR5         ADVP          ADV          COMPL

                               BADV
           *iets meer*        *lang*     *dan gisteren*          

$rl 10               
TC: morfadaprules
 
                 ADVP{type: duration}          

    subj         mod           head       extrapos
      
    VAR5         ADVP          ADV          COMPL

               *iets*        *langer*     *dan gisteren*          


$rl 27
$ In (3a,b) the 
syntactic and semantic derivation trees for `iets langer dan gisteren` are
given. 
(NB. The d preceding 
the rulenames indicates that a rule of Dutch grammar is used,
while the indices mark the different 'projectionpaths' through the 
subgrammars. Note that during the derivation of (2d) 
the ADVP-subgrammar is called more than once.)$

(3a)                                 
                             dTmorfadap_i_

                             dRdegree_i_                        


                                                   dTadvpattern_i_

       dRdegree_j_                                   dRstartadvp_i_            
      
                 dRcomplmod_j_                        
 BQ                                                VAR5      BADV    
iets      dTadvpattern_j_      dcomplform_k_                     lang

          dRstartadvp_j_      
                               
                             ...     BADV
         VAR8     BADV              gisteren                
                  meer

$rl 14
(3b)                         S1,i


             S1,j                             S2,i



                       S4,j
     IETS                                VAR5         LANG


               S2,j            S8,k



         VAR8     MEER     
                           ...   GISTEREN

