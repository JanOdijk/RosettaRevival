< BVERB
:  IMPLIES((particle <> 0), (verbraiser = noVR))    
            "Particle and verbraiser mutually exclusive"           
:  IMPLIES((reflexivity=reflexive), (verbraiser = noVR)) 
            "Reflexive verbs are no verbraisers"
:  IMPLIES((reflexivity=reflexive), (perfauxs = [hebaux]))     
            "reflexive verbs are have [hebben] as perfaux"
:  IMPLIES((IPP IN [obligatoryIPP, optionalIPP]),
                   (verbraiser IN [obligatoryVR, optionalVR]))           
            "IPP is only relevant for verbraisers"
:  IMPLIES((controller = subject), (thetavp IN [vp120, vp123]))
            "subject controller requires vp120 or vp123"
:  IMPLIES((controller = object), (thetavp IN [vp012, vp123])) 
            "object controller requires vp012 or vp123"
:  IMPLIES((controller = indobj), (thetavp IN [vp123, vp012])) 
            "indobject controller requires vp123 or vp012"
:  IMPLIES((controller = prepobj), (thetavp IN [vp123, vp012])) 
            "prepobject controller requires vp123 or vp012"

:  IMPLIES((subc = modalverb), (IPP = obligatoryIPP))          
            "modalverbs must have IPP=obligatoryIPP"
:  IMPLIES((reflexivity IN [reflexive, reciprocal]),
                   ((possvoices*[Passive, DoorActive, AanActive]) = [])) 
            "reflexive and reciprocal verbs can appear in active only"
:  IMPLIES((synvps * LSAUXDOM_oblVRvps <> []),
                   (verbraiser = obligatoryVR))                          
            "verbpattern requires obligatoryVR"
:  IMPLIES((verbraiser = obligatoryVR),(IPP = obligatoryIPP)) 
            "obligatory verbraisers have IPP=obligatoryIPP"
:  IMPLIES((verbraiser IN [obligatoryVR, optionalVR]),
           (synvps * LSAUXDOM_VRvps <> [])
          )           
            "verbraisers require an appropriate verbpattern"
:  IMPLIES((thetavp=vp000), (synvps <= LSAUXDOM_vp000vps ))       
            "synvps inconsistent with thetavp"
:  IMPLIES((thetavp=vp100), (synvps <= LSAUXDOM_vp100vps ))       
            "synvps inconsistent with thetavp"
:  IMPLIES((thetavp=vp010), (synvps <= LSAUXDOM_vp010vps ))       
            "synvps inconsistent with thetavp"
:  IMPLIES((thetavp=vp120), (synvps <= LSAUXDOM_vp120vps ))      
            "synvps inconsistent with thetavp"
:  IMPLIES((thetavp=vp123), (synvps <= LSAUXDOM_vp123vps ))      
            "synvps inconsistent with thetavp"
:  IMPLIES((thetavp=vp012), (synvps <= LSAUXDOM_vp012vps ))       
            "synvps inconsistent with thetavp"
:  IMPLIES((synvps * LSAUXDOM_opensentvps <> []), 
                       (controller <> none)
                  )                                                       
            "open complement sentences require a controller "
:  IMPLIES((controller <> none),
                       (synvps * LSAUXDOM_opensentvps <> [])
                  )                                                       
            "controller indicated but no appropriate verbpattern"

:  IMPLIES((synvps * LSAUXDOM_prepobjvps <> []), (prepkey1 <> 0))
            "verbpatterns require specification of prepkey1"

:  IMPLIES((prepkey1 <> 0), (synvps * LSAUXDOM_prepobjvps <> []))
            "prepkey1 <> 0 requires appropriate verbpattern"

:  IMPLIES((reflexivity IN [reflexive, reciprocal]),
           (Caseassigner = true)
          )
            "reflexive and reciprocal verbs are caseassigners"

:  IMPLIES((Caseassigner = false),
           ([reflexivity] * [reflexive, reciprocal] = [])
          )
            "Noncaseassigners cannot be reflexive or reciprocal"

: IMPLIES((thetavp IN [vp120, vp100, vp123, vp000]),
          (caseassigner = true)
         )
         "Thetavp and caseassigner incompatible"

: IMPLIES((synvps=[]),false)
         "patterns must be specified"

: IMPLIES((synvps * LSAUXDOM_wrongvps <> []),false)
        "synvps contains wrong patterns"

: IMPLIES(((thetavp = vp010) AND (synPREPNP IN synvps)),(caseassigner = true))
         "thetavp=010,synPREPNP requires caseassigner=true"


: IMPLIES(((thetavp= vp010) AND
           (synvps * [synPREPNP] = []) AND
           (reflexivity <> reflexive) 
          ), 
          (caseassigner = false)
         )
         "VP010 verbs usually are not caseassigners"

{ After this line the elements from peculiar, in a special way }


:  IMPLIES(((Caseassigner = true) AND
            (reflexivity = notreflexive) AND
            (thetavp = vp012)
           ),
           false
          )
          $P  "Caseassigners usually are not be dyadic ergative"


:  IMPLIES(((prepkey1 <> 0) AND 
                    (verbraiser IN [optionalVR, obligatoryVR])),
                    false)                                             
            $P "verbraisers take no prepositional objects"
:  IMPLIES(((isaux In perfauxs) AND (passive IN possvoices)),
                   false)                                                
            $P "verbs conjugated with [zijn] usually do not passivize"
:  IMPLIES(((isaux In perfauxs) AND (doorActive IN possvoices)),
                   false) 
            $P "verbs conjugated with [zijn] usually do not allow dooractive"
:  IMPLIES((AanActive In possvoices), false)                     
            $P "aanactive only holds for zien, horen, 
                    lezen, ruiken, voelen,proeven"
:  IMPLIES((perfauxs = [hebaux,isaux]),false)
            $P "most verbs do not allow both [hebben] and [zijn]"

> 

< BNOUN
:  IMPLIES((human = yeshuman),(animate = yesanimate)) 
           "yeshuman implies yesanimate"
:  IMPLIES(true,(animate <> omegaanimate))           
           "there are no omegaanimate bnouns"
:  IMPLIES(true,(human   <> omegahuman))              
           "there are no omegahuman bnouns"
:  IMPLIES ( (sexes <> []), (animate=yesanimate)
         )
          "sexes specified require animate=yesanimate"
:  IMPLIES ( (class <> omegatimeadvclass),
           (temporal =true)
         )
         "nondefault specification of class requires temporal =true"
:  IMPLIES ( (deixis <> omegadeixis),
           (temporal =true)
         )
         "nondefault specification  of deixis requires temporal =true"
:  IMPLIES ( (aspect <> omegaaspect),
           (temporal =true)
         )
         "nondefault specification  of aspect requires temporal =true"
:  IMPLIES ( (retro<> false),
             (temporal =true)
           )
         "nondefault specification  of retro requires temporal =true"
:IMPLIES ( (possgeni = true),
           (animate= yesanimate)
         )
         "possgeni=true implies animate = yesanimate"
:IMPLIES( (animate = noanimate),
          (possgeni = false)
        )
        "nonanimate nouns do not allow genitive forms"
:IMPLIES ( (subcs * [vocativenoun, professionnoun, relationnoun] <> []),
           (human = yeshuman)
         )
        "vocativenouns, professionnouns, relationnouns must be yeshuman"
:IMPLIES ( (human = nohuman),
           (subcs * [vocativenoun, professionnoun, relationnoun] = [])
         )
        "nohuman nouns cannot be vocativenoun, professionnoun, or relationnoun"

:IMPLIES((omegagender IN genders), false)
         "Omegagender is no valid value"

:IMPLIES(((count IN posscomas) AND (Noplural IN pluralforms)),false)
         $P "most count nouns do have a plural"

:IMPLIES(((posscomas = [mass]) AND ([Noplural] <> pluralforms )), false)
         " Mass nouns do not have a plural"

:IMPLIES(((mass IN posscomas) AND (count IN posscomas)), false)
         " noun entries should not have both count and mass"


:IMPLIES((prepkey <> 0), (nounpatterns * LSAUXDOM_prepobjvps <> []))
            "prepkey <> 0 requires appropriate nounpattern"

:IMPLIES((thetanp <> omegathetanp), (nounpatterns <> []))
            "thetanp <> omegathetanp requires nounpattern(s)"

:IMPLIES((thetanp=thetanp1), (nounpatterns <= LSAUXDOM_vp120vps))
           "nounpatterns and thetanp incompatible"

:IMPLIES((thetanp=thetanp2), (nounpatterns <= LSAUXDOM_vp123vps))
           "nounpatterns and thetanp incompatible"

>

<COORD
:  IFF((correlative1 IN kinds), (correlative2key <> 0))
            "correlative requires correlative2key and vice versa"
:  IMPLIES((patterns=[]),false)
            "patterns must be specified"
:  IMPLIES(Sintroducer, (simple IN kinds))
            "An Sintroducer must be a simple COORD"
:  IMPLIES((kinds * [simple] =[]), (Sintroducer=false))
            "A correlative cannot be an Sintroducer"
:  IMPLIES((patterns * LSAUXDOM_coordvfcps<>[]),(LSAUXDOM_coordvfcps <= patterns))
         $P "Not all verb final COORD patterns have been included"
:  IMPLIES((patterns * LSAUXDOM_coordv2cps<>[]),(LSAUXDOM_coordv2cps <= patterns))
         $P "Not all verb second COORD patterns have been included"
>

<CONJ
:  IMPLIES((class <> omegatimeadvclass),(temporal =true))
        "non default class requires temporal=true"
:  IMPLIES((deixis <> omegadeixis),(temporal =true))
        "non default deixis requires temporal=true"
:  IMPLIES((aspect <> omegaaspect),(temporal =true))
        "non default aspect requires temporal=true"
:  IMPLIES((retro <> false),(temporal =true))
        "non default retro requires temporal=true"
:  IMPLIES((conjpatterns=[]),false)
            "conjpatterns must be specified"
:  IMPLIES((distri=[]),false)
            "distri must be specified"
:  IMPLIES(temporal, adverbial)
            "A temporal CONJ is adverbial"
>

<BADV
:  IMPLIES((class <> omegatimeadvclass),(tempadv IN subcs))
        "non default class requires tempadv IN subcs"
:  IMPLIES((deixis <> omegadeixis),(tempadv IN subcs))
        "non default deixis requires tempadv IN subcs"
:  IMPLIES((aspect <> omegaaspect),(tempadv IN subcs))
        "non default aspect requires tempadv IN subcs"
:  IMPLIES((retro <> false),(tempadv IN subcs))
        "non default retro requires tempadv IN subcs"
>

<PREP
:  IMPLIES((class <> omegatimeadvclass),(temp IN subcs))
        "non default class requires temp IN subcs"
:  IMPLIES((deixis <> omegadeixis),(temp IN subcs))
        "non default deixis requires temp IN subcs"
:  IMPLIES((aspect <> omegaaspect),(temp IN subcs))
        "non default aspect requires temp IN subcs"
:  IMPLIES((retro <> false),(temp IN subcs))
        "non default retro requires temp IN subcs"
:  IMPLIES((preptype=splitprep),(postpkey<>0))
        "Circumposition requires specification of 2nd part"
:  IMPLIES((thetapp=pp100),(synpps=[synnovpargs]))
        "synpps and thetapp incompatible"
:  IMPLIES((thetapp=pp120),(synpps <= LSAUXDOM_pp120pps))
        "synpps and thetapp incompatible"
>

<BADJ
:  IMPLIES((class <> omegatimeadvclass),(temporal =true))
        "non default class requires temporal=true"
:  IMPLIES((deixis <> omegadeixis),(temporal =true))
        "non default deixis requires temporal=true"
:  IMPLIES((aspect <> omegaaspect),(temporal =true))
        "non default aspect requires temporal=true"
:  IMPLIES((retro <> false),(temporal =true))
        "non default retro requires temporal=true"
:  IMPLIES((adjpatterns=[]),false)
            "adjpatterns must be specified"
:  IMPLIES((thetaadj=adjp100), (adjpatterns = [synnoadjpargs]))
           "adjpatterns and thetaadj incompatible"
:  IMPLIES((thetaadj=adjp120), (adjpatterns <= LSAUXDOM_adjp120vps))
           "adjpatterns and thetaadj incompatible"
:  IMPLIES((thetaadj=adjp123), (adjpatterns <= LSAUXDOM_adjp123vps))
           "adjpatterns and thetaadj incompatible"
:  IMPLIES((thetaadj=adjp010), (adjpatterns <= LSAUXDOM_adjp010vps))
           "adjpatterns and thetaadj incompatible"
:  IMPLIES((thetaadj=adjp012), (adjpatterns <= LSAUXDOM_adjp012vps))
           "adjpatterns and thetaadj incompatible"
:  IMPLIES((adjpatterns * LSAUXDOM_adjprepobjvps<>[]),(prepkey<>0))
           "adjpatterns require that prepkey<>0"
:  IMPLIES((prepkey<>0),(adjpatterns * LSAUXDOM_adjprepobjvps<>[]))
           "prepkey<>0 incompatible with adjappatterns"
>
@
