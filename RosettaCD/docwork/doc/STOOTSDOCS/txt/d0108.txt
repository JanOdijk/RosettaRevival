$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$XC ~`
$AC @
   

            Project ROSETTA : Machine Translation


            Topic     :  linguistics

    ---------------------------------------------------------







         Title        :  Verbpatterns in Rosetta3

         Author       :  Agnes Mijnhout









         Doc.Nr       :  108

         Date         :  01/12/86

         Status       :  approved

         Supersedes   :  

         Distribution :  linguists

         Clearance    :  project

         Keywords     :  verbpatterns
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Copyright (c) Nederlandse Philips Bedrijven B.V.

$ph Rosetta          Doc.nr:  108                    date: 01/12/86
$LD 4
$Np 1
$C1 Introduction
$ This note contains a proposal for the handling in Rosetta3 of what was called
"verbpatterns" in Rosetta2. Doc. nr. 43, _On Verbpatterns_, contains 
a general overview of the content of the attribute _vps_ in Rosetta2 and some
general considerations as to the handling in Rosetta3 of this notion. The 
approach that was taken in doc. nr. 43 was that "verbpatterns" should be seen as
syntactic properties of verbs (that need therefore not be translated) and that
semantic aspects should be separated. This note contains specific proposals on
"semantic" and "syntactic" attributes that should take over the role of the
attribute _vps_ of Rosetta2 and shows how StartVPPROP-rules and 
Verbpattern-transformations can be formulated to account for the range of 
construction-types
that are encountered in the three languages involved. This note will outline
the approach and give a provisional formulation of the rules for Rosetta3.
Each verbpattern of Rosetta2 will be compared to the approach outlined here for
Rosetta3. At the moment of appearrance of this document, there was no complete
inventory of construction-types of the three languages involved (Dutch, English
and Spanish) yet, nor a list of atytribute-values for the verbpatterns.
What will be clear, however, is how the
properties that are subsumed under the notion "verbpattern"
can be handled in Rosetta3 and thereby the framework for specific 
analyses of verbs in the three languages will be ready.$
$ Section 2 discusses the separation of "semantic" and "syntactic" information
into two different attributes that will be employed by two different kinds of
rules. Section 3 gives the StartVPPROP-rules. Section 4 compares the Rosetta2
verbpatterns to the proposal for Rosetta3. Section 5 contains the Verbpattern-
transformations.$ 
$ In doc. nr. 43 the problem of assigning verbpatterns to verbs in the
dictionary was mentioned. Section 6 contains some criteria that can be used
for assigning the correct values to the attributes that replace the attribute
"verbpatterns" of Rosetta2. These criteria can be used for filling the 
dictionary.$


$C1 Verbpatterns in Rosetta3
$ In section 2 I will take the general proposals of doc. nr. 43 and work them
into specific proposals for Rosetta3. The general proposals of doc. nr. 43 
were:$
1. Verbpatterns should be seen as expressing syntactic restrictions that verbs
   place on their environment. This means that semantic&1& properties of verbs
   should be in different attributes.
2. The information of the syntactic verbpatterns should preferably be spelled 
   out in one set of rules. In Rosetta2, the _vps_ were spelled out partly by
   means of verbpattern rules, partly by argument-substitution rules. There will
   be one set of rules in Rosetta3 that spell out syntactic verbpatterns and 
   they will be transformations, that need not be translated&2&.
3. The notion control was mentioned as a specific example of something that 
   would probably have to be handled in an attribute separate from _vps_.
4. Some specific types of verbs were mentioned that had not been incorporated
   into Rosetta2 yet (ergatives and middles).
$ The points mentioned above will be worked out in the following subsections:
2.1 and 2.2 will be addressed to the separation of semantic and syntactic 
information,
2.3 to the idea of one set of rules for verbpatterns and 2.4 to control.
For the treatment of ergatives I refer to document nr 47 (Ergative Verbs)
of Jan Odijk
and at the moment I have not looked into the analysis for middles yet. Section 
2.5 will discuss
the treatment of EMPTY-substitution in Rosetta3.$

$C2 Semantic information
$ The restrictions that a verb places on its environment are partly semantic and
partly syntactic. The number of arguments a verb expects is a semantic aspect:
verbs which take a different number of arguments do not have the same 
meaning&3&. This means that there should be a _rule_-class (as opposed to a 
transformation-class, the members of which will not be translated) containing
rules that combine a verb with the number of arguments it expects. As in 
Rosetta2, this is the first rule class (in generation) and I will refer to these
rules in Rosetta3 as the StartVPPROP-rules. The next question is whether there 
are any other properties of verbs with respect to their environment that are
relevant to translation. Apart from the number of arguments that a verb expects
and the categorial realization of these arguments that a verb allows, a verb 
also determines what thematic roles (often called Agent, Patient, Theme, etc.)
are assigned to its arguments. One might assume that this kind of information
can be relevant to translation.
It is not clear,
however, which thematic roles exactly exist and how they can be assigned to a 
verb's arguments. This means that it would be problematic (if at all desirable)
to introduce the notion thematic role into Rosetta. What we can use, however, is
the idea that, to a certain extent, different thematic roles correspond to 
different positions in deep structure. 
In GB-theory, the assignment of thematic roles is 
assumed to take place in the deep structure of a sentence (among others); there
is a relation
between the place an argument occupies in deep structure and the thematic role
that it receives. In this way, monadic ergatives differ from intransitives: 
both take one argument, but this argument appears in object position for 
ergatives (receiving the thematic role Theme), whereas it appears in subject 
position for intransitives (receiving the thematic role Agent).
To represent this, we can use the approach taken by Jan Odijk in doc. nr. 93
(Subgrammatica-indeling).
He proposes
a way to represent for a verb the number of arguments that it takes and the 
place where it realizes these arguments. Verbs are divided in the following
way:$

 vp00     "weather" verbs
 vp10     intransitive verbs
 vp01     monadic ergative verbs and verbs such as _seem_
 vp11     transitive verbs
 vp02     dyadic ergative verbs
 vp12     ditransitive verbs

$ The first number indicates if the subject is an argument of the verb: 0 means
no argument, 1 means the subject is an argument of the verb. The second number
indicates the number of arguments in the VERBP. 
We might now say that this information of verbs is relevant to translation and 
that there be an
attribute _thetavp_ (thematic verbpattern) with the above list as values.
This information is to be spelled out by the StartVPPROP-rules. 
For each value of _thetavp_ there is a
StartVPPROP-rule, which takes 0, 1, 2 or 3 VARs and a VERB and makes an S-tree
with the VARs in the right place. This means that the StartVPPROP-rules make,
dependent on the _thetavp_, a VPPROP with VARs either in subject position, in
object position, or in both.$
$ We may even extend the above notation a little further, to include the order
of the variables. If we were to translate _like_ into _please_, e.g., the
arguments should be reversed in order to arrive at the correct translation:$

(1)a. John likes Mary
   b. Mary pleases John

$ In the above notation, both _like_ and _please_ would have _vp11_ as the value
for _thetavp_. This would lead to an incorrect translation&4&. If we change the
values ot _thetavp_ into those in (2), however, we can indicate for each 
variable the position it occupies.$

$RL 6

(2) vp000       "weather" verbs
    vp100       intransitive verbs
    vp010       monadic ergative verbs and verbs such as _seem_
    vp120       transitive verbs
    vp012       dyadic ergative verbs
    vp123       ditransitive verbs

$ There are now three numbers, corresponding to three positions in which the
variable can occur: the first position is the subject, the second position is
the first argument in the VERBP and the third position is for the second 
argument in the VERBP. 0 indicates that this position contains no argument of
the verb, no variable occurs in this position. 1 indicates the first variable,
2 the second variable and 3 the third. So, the values in (2) represent the same
information as the earlier ones. _Vp000_ means that there is no argument in 
either of the three positions, _vp010_ means that there is one argument, in
second position. _Vp120_ means that there are two arguments (one in the first
and one in the second position) and that the first variable (1) is in subject
position and the second variable (2) is in object position. We can now see how
we are able to translate _like_ into _please_. If _like_ has _vp120_, _please_
will have to receive a different value: _vp210_. This _thetavp_ means that the
second variable is in subject position and the first in object position. The 
values in (2) can be seen as the 'unmarked' cases, values expressing 
permutations of the ordering of the variables can be added in case of 
translation problems such as _like_/_please_.$
$ Note that the option of permuting the order of variables should preferably
only be chosen if no translation of a verb giving the same order of variables
is available. If surface order reflects scope relations, sentences with _like_
and _please_ do not have the same meaning if quantified NPs are substituted
instead of _John_ and _Mary_. _Like_ and _please_ were chosen in the example
because of the similarity with a translation problem of this kind that 
sometimes has been claimed to exist
between English and French: _like_ should be translated into _plaire_. It is
not clear yet if we will encounter the same problem, but a solution is available
the moment we do. So, the values of _thetavp_ will be the values in (2).
Other values expressing permutations may be added when necessary.$
$ The approach outlined above suggests that ergativity is relevant to 
translation. Each verb has one value for the attribute _thetavp_, for each 
value of _thetavp_ there is a StartVPPROP-rule (the
StartVPPROP-rules are in section 3), and these
rules are translated. It is not clear, however, that this should be the case.
Even if ergativity were relevant to translation, it may be the case that
ergative verbs need to be translated into unergatives, and vice versa.
The iso-group has decided that it is
desirable to be able to translate vp120 into vp012 (and probably vp100 into 
vp010
as well). In this approach this can be handled easily: the StartVPPROP-rules
that apply to these values should be translatable into each other. So, the
StartVPPROP-rules applying to _vp120_ and _vp012_ will be related to one 
IL-rule (and the same for vp100 and vp010). This approach
may still make the possibility available to express a preference for translation
of ergatives into ergatives and unergatives into unergatives, a desire that was
also expressed in the iso-group.$
$ The attribute _thetavp_ replaces the attribute _aantalargs_ of Rosetta2. 
The number of 'not-zeros' is the number of arguments of the verb.
_Thetavp_ includes more information than _aantalargs_, however. _Aantalargs_
indicated the maximal number of arguments a verb had, whereas _thetavp_ also
indicates where the arguments are realised in "deep" structure (this was part
of _vps_ in Rosetta2). Verbs with a different number of _aantalargs_ should not
be translated into each other and this will now also apply to _thetavp_: 
_thetavp_'s
in which a different number of arguments are mentioned should not be translated
into
each other. This means that the value of _thetavp_ should be the same for two 
verbs if they are translations of each other, except for vp100/vp010 
and vp120/vp012 and possible permutations.$
$ In Rosetta2, EMPTY-substitution was possible if the verbpatterns allowed less
arguments to be realized than _aantalargs_. In Rosetta3, the syntactic verb-
patterns will indicate if EMPTY-substitution is possible (see section 2.5).$
$ An advantage of separating thetavp from syntactic information in this way, is
that the syntactic part of verbpatterns need only refer to arguments inside the
VERBP. The question whether the subject is an argument or not is stated in
_thetavp_. The category realizing the subject is not influenced by the verb
and need therefore not be expressed in the syntactic verbpattern.
If this position had to be mentioned by the syntactic
verbpatterns, the number of verbpatterns would have to be doubled: for every
verbpattern in the VERBP there would be a choice between an argument subject 
and a non-argument subject, and this would have to be represented in the 
verb-pattern. This supports the decision of representing the distribution of
arguments in "deep" structure in _thetavp_.$
$ The approach outlined here has an undesirable consequence for the analysis
of idioms, however. Idiomatic verbpatterns now have to be divided into
_thetavp_ and syntactic verbpattern too. For idioms, it is not so relevant
_where_ the argument(s) appear, only the number of arguments is important.
For idioms in which the subject is no argument, as e.g. in (3),$

(3) the cat has got Mary's tongue

$ the value of _thetavp_ should be _vp010_. To the extent that the values of
_thetavp_ have some semantic content, this is irrelevant to idioms. For idioms
the division into thematic verbpatterns spelled out by the StartVPPROP-rules
and syntactic verbpatterns spelled out by transformations is not desirable and
it would be preferable to spell out all the information in one set of rules. If
this approach were chosen, however, it would amount to nearly a doubling of the
verbpatterns for the 'normal' verbs, as was noticed above (for every verbpattern
in the VERBP the subject may either be an argument or not). This result seems
even more undesirable than the fact that _thetavp_ for idioms is awkward.
Considering the fact that it is not impossible to assign values of _thetavp_
to idioms and the fact that for normal verbs the treatment would become less
neat if verbpatterns were not divided into thematic and syntactic, I retain
the proposal made above.$
$ Notice that we now have two ways of handling the alternation in (4):$

(4)a. I gave John a book
   b. I gave a book to John

$ In Rosetta2, _give_ has two verbpatterns to account for these
sentences. In the second sentence, the second variable occupies the first
position following the verb and the third variable the second. The 
verbpattern-rule for the first sentence reverses the order of the arguments.
In Rosetta3 this can be done in the same way: the StartVPPROP-rules have put
the arguments in, e.g., the order of the first sentence and the 
Verbpattern-transformations either leave the order unchanged or change the
order to get the second sentence. Another possibility would now be to assign
_give_ two values of _thetavp_: _vp123_ and _vp132_. The 
Verbpattern-transformations now need not reverse the order. Under the assumption
that _thetavp_ has only one value, this would mean that there would have to be
two verbs _give_, each with one value of _thetavp_. Furthermore, we have noticed
that permutations in _thetavp_ should only be used to solve translation 
problems. So, the best approach is to handle dative alternations in the
Verbpattern-transformations.$

$C2 Syntactic aspects
$ In section 2.1 we have argued that the number of arguments a verb takes as 
well as the place where these arguments are realized in "deep" structure may
be relevant for translation and should be spelled out by rules. 
Syntactic aspects can be handled separately and may be spelled out by 
transformations (as was suggested in doc.nr. 43).$
$ The syntactic restrictions a verb places on its arguments are the category by 
means of which the argument is realized (NP, PP, AP, etc), the grammatical
relation of this argument in the sentence and possibly more
specific restrictions on the form of the arguments. _Wonder_, e.g., can take a
clause as argument, but  this must be a _wh_-clause or a yes/no question:
_I wonder when he comes_, *_I wonder that he comes_. A verb (in one of
its meanings) can often realize its arguments in different ways, and if my
assumption that these realizations are syntactic is correct, these
different possibilities should be possible translations of each other&5&. 
If the verb in the target
language allows different categorial realizations than the verb in the source
language, this is no problem for translation if the subgrammars that make those
categories are isomorphic, because if
these realizations are spelled out by means of transformations, the categorial 
restrictions on the arguments are not translated. It will also be possible
to generate paraphrases of sentences in one language. If the subgrammars that
make APPROP's and SUBSENT's are isomorphic, it may be possible to generate both
(5a) and (5b):$

(5) a. Ik vind hem leuk
    b. Ik vind dat hij leuk is

$ How this syntactic information is encoded in 
attributes and spelled out by transformations is discussed in the next section.$

$C2 Verbpattern-transformations
$ Verbpattern-transformations operate on the output of the StartVPPROP-rules
The StartVPPROP-rules have
produced S-trees with variables in the places indicated by the attribute 
_thetavp_ (see section 3). 
The Verbpattern-transformations now have to make sure that the
correct phrases will eventually substitute for the variables.
For this purpose I propose the attribute _synvps_ (syntactic 
verbpatterns), which has as its value a set of syntactic verbpatterns. The 
values of _synvps_ indicate the restrictions verbs place on their arguments 
inside the VERBP (verbs place no syntactic restrictions on their subjects,
although they may restrict the "semantic type" of the subject in terms of
human, animate, etc.)
Possible values of _synvps_ are: NP, NPPP, APPROP, OPENINFSENT, WHSENT, PREPNP,
etc. These values indicate the category of the phrase that may be substituted 
for
a variable and possibly more specific restrictons (such as wh-mood) or the
relation of the argument (PREPNP). _NP_ means that a variable may be 
substituted by an NP, _NPPP_
means that with two variables, the first may be substituted by an NP and the 
second by a PP. If _thetavp_ has a value with one variable inside the VERBP 
(vp010
and vp120), the value of _synvps_ mentions one category, if _thetavp_ has a 
value
with two variables inside the VERBP (vp012 and vp123), _synvps_ mentions two
categories, where the first category generally refers to the
first argument and the second category to the second argument. For verbs with
_thetavp_ = vp000 or vp100, the value for _synvps_ is the empty set.
It is now clear that it is practical to
separate _thetavp_ and _synvps_, _synvps_ can be the same for verbs with a 
different value for _thetavp_.$
$ The Verbpattern-transformations take as input an S-tree with VARs and give
as output an S-tree where the relation of the VARs are replaced by different 
relations, based on information in _synvps_. The information on the category of
the VAR is compared to the value of _synvps_.
If _synvps_ contains an NP, e.g., the Verbpattern-transformations
check if the VAR also has category NP (and similarly for other categories). 
A VAR of category NP is a variable that is to be
substituted by an NP. Some verbs put more specific restrictions on their
arguments than just category status. This can be handled in the following way:
the value of _synvps_ can contain category names that do not correspond to
categories in the M-grammar, such as WHSENT (for _wonder_, e.g.). The
Verbpattern-transformations will check if the relevant VAR has the category 
Sentence and if the value for its attribute mood is _wh_.
(The categories mentioned here are just an example
of how it could be done. The choice of categories depends on the definition of
domain T) In this way information about attribute-values of categories can be
expressed in category names that only exist in the attribute _synvps_.$ 
$ The output of the Verbpattern-transformations are S-trees where the attribute
_cat_
of the variables that indicates what category must be substituted has been 
checked with the verbpattern and where other
attribute values express further restrictions on the arguments to be 
subsituted. This approach makes it possible
to shift variables before they are substituted. All 
the relevant information for substitution is present on the variable and there
is no need to look indefinitely deep for a verb to check whether the 
restrictions are met. Verbpatterns are now spelled out by one set of rules, the
Verbpattern-transformations. Argument-substitution rules (that in Rosetta2 
spelled out part of _vps_) can now be quite simple. Section 3 contains 
StartVPPROP-rules and some examples of possible Verbpattern-transformations.$
$ In an earlier formulation of the Verbpattern-transformations, I had chosen to
give the VARs the name of the category that was to be substituted for it, e.g.:$

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               obj/NPVAR{NPVARrec1}]]

C: VARrec1.cat = NP and
   NP in VERBrec1.synvps

$ The reason for the choice for this formulation was that it is immediately
clear in _m_ what the result of applying the transformation is. A disadvantage
of this notation is that we now both have VARs with VARrec's (in transfer and
in the StartVPPROP-rules) and NPVARs, INFSENTVARs, etc. This is redundant, so
one of the two options should disappear.$
$ The notation VARrec.cat = NP is equivalent to NPVAR. An advantage of
differentiating the VARs in category names and not by means of the attribute
_cat_ is that the record of a VAR should at most contain all the attributes
appearing in the records of the different categories, whereas the record of an
NPVAR contains at most the attributes that are also found in an NPrecord, etc. A
disadvantage, however, would be the fact that the StartVPPROP-rules could not
refer to VARs anymore, but should mention all possible combinations of NPVARs,
SENTVARs, etc. For the moment, I have chosen for the Rosetta2 
approach with one category VAR, and an attribute _cat_.$

$C2 Control
$ In doc. nr. 43 I suggested that control might have to be handled apart from
the notion verbpattern. Jan Odijk informed me that the control relation must
be made much later in the grammar than the application of the Verbpattern-
transformations and that it was indeed useful to have a separate attribute.
I will therefore assume that control is no longer part of verbpatterns. See
Jan Odijk's document (111, The interpretation of nonovert subjects in Rosetta3)
on control.$

$C2 EMPTY-substitution
$ In section 2.1 it was noted that in Rosetta3 the syntactic verbpatterns will
indicate if EMPTY-substitution is possible. Whereas in Rosetta2 _eat_ had both
_vp1a_ and _vp2a_ while _aantalargs_ was 2 and therefore allowing EMPTY-
substitution, in Rosetta3 the same can be done by assigning _eat_ thetavp: vp120
and one of its synvps: EMPTY. So, _synvps_ indicates by which category a 
variable can be substituted, but also if it can be substituted by EMPTY. 
In Rosetta3, EMPTY-substitution will not take place before the 
Verbpattern-transformations. The Verbpattern-transformations will indicate if a 
variable may be substituted by EMPTY, in the same way that they indicate if a
variable may be substituted by NP, WHSENT, etc.$

$C1 StartVPPROP-rules
$ In this section rules are given, although I would not want to claim that this
is their final form. There is a StartVPPROP-rule for every value of _thetavp_.
If the subject is not an argument, there is no subject node, except for vp000,
where the subject is _het_ in Dutch and _it_ in English.$
$ The relation for the non-subject VARs is, like in Rosetta2, arg. These are
the arguments that appear in the VERBP.$

$NP

RSTARTVPPROP000    {Dutch, English and Spanish}

m1: SUBVERB{SUBVERBrec1}[mu1]

m:  VPPROP{VPPROPrec1}[subj/T1, pred/VERBP{VERBPrec1}
                                            [head/VERB{VERBrec1}
                                                  [head/SUBVERB{SUBVERBrec1}
                                                                   [mu1]]]]

GEN

C:  SUBVERBrec1.thetavp = vp000

A:  T1 := makehetnp;       {makeitnp for English and makeellonp for Spanish}
    VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)



{I only give the generative parts of the rules.
 In each rule VPPROPrec's and VERBPrec's should be made as well.}

$NP

RSTARTVPPROP010 {English and Spanish}

m1: SUBVERB{SUBVERBrec1}[mu1]
m2: VAR{VARrec1}

m:  VPPROP{VPPROPrec1}[pred/VERBP{VERBPrec1}
                        [head/VERB{VERBrec1}
                          [head/SUBVERB{SUBVERBrec1}[mu1]],
                           arg/VAR{VARrec1}]]

GEN

C:  SUBVERBrec1.thetavp = vp010

A:  VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)

$NP

RStartVPPROP010 {Dutch}

m1: SUBVERB{SUBVERBrec1}[mu1]
m2: VAR{VARrec1}

m:  VPPROP{VPPROPrec1}[pred/VERBP{VERBPrec1}
                        [arg/VAR{VARrec1},
                         head/VERB{VERBrec1}
                           [head/SUBVERB{SUBVERBrec1}[mu1]]]]

GEN:

C: SUBVERBrec1.thetavp = vp010

A: VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)

$NP

RSTARTVPPROP100 {English, Spanish and Dutch}

m1: SUBVERB{SUBVERBrec1}[mu1]
m2: VAR{VARrec1}

m:  VPPROP{VPPROPrec1}[subj/VAR{VARrec1}, pred/VERBP{VERBPrec1}
                                           [head/VERB{VERBrec1}
                                            [head/SUBVERB{SUBVERBrec1}[mu1]]]]
                                                         

GEN

C: SUBVERBrec1.thetavp = vp100


A: VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)


$NP

RSTARTVPPROP012 {English and Spanish}

m1: SUBVERB{SUBVERBrec1}[mu1]
m2: VAR{VARrec1}
m3: VAR{VARrec2}

m:  VPPROP{VPPROPrec1}[pred/VERBP{VERBPrec1}
                        [head/VERB{VERBrec1}
                           [head/SUBVERB{SUBVERBrec1}[mu1]],
                         arg/VAR{VARrec1},
                         arg/VAR{VARrec2}]]

GEN

C: SUBVERBrec1.thetavp = vp012

A: VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)

$NP

RSTARTVPPROP012 {Dutch}

m1: SUBVERB{SUBVERBrec1}[mu1]
m2: VAR{VARrec1}
m3: VAR{VARrec2}

m: VPPROP{VPPROPrec1}[pred/VERBP{VERBPrec1}
                       [arg/VAR{VARrec1},
                        arg/VAR{VARrec2},
                        head/VERB{VERBrec1}
                          [head/SUBVERB{SUBVERBrec1}[mu1]]]]

GEN:

C: SUBVERBrec1.thetavp = vp012

A: VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)

$NP

RSTARTVPPROP120 {English and Spanish}

m1: SUBVERB{SUBVERBrec1}[mu1]
m2: VAR{VARrec1}
m3: VAR{VARrec2}

m:  VPPROP{VPPROPrec1}[subj/VAR{VARrec1}, pred/VERBP{VERBPrec1}
                                           [head/VERB{VERBrec1}
                                              [head/SUBVERB{SUBVERBrec1}[mu1]],
                                            arg/VAR{VARrec2}]]

GEN:

C: BVERBrec1.thetavp = vp120

A: VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)

$NP

RSTARTVPPROP120 {Dutch}

m1: SUBVERB{SUBVERBrec1}[mu1]
m2: VAR{VARrec1}
m3: VAR{VARrec2}

m: VPPROP{VPPROPrec1}[subj/VAR{VARrec1}, pred/VERBP{VERBPrec1}
                                           [arg/VAR{VARrec1},
                                            head/VERB{VERBrec1}
                                              [head/SUBVERB{SUBVERBrec1}[mu1]]]]

GEN:

C: BVERBrec1.thetavp = vp120

A: VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)

$NP

RSTARTVPPROP123 {English and Spanish}

m1: SUBVERB{SUBVERBrec1}
m2: VAR{VARrec1}
m3: VAR{VARrec2}
m4: VAR{VARrec3}

m:  VPPROP{VPPROPrec1}[subj/VAR{VARrec1}, pred/VERBP{VERBPrec1}
                                           [head/VERB{VERBrec1}
                                              [head/SUBVERB{SUBVERBrec1}[mu1]],
                                            arg/VAR{VARrec2},
                                            arg/VAR{VARrec3}]]

GEN:

C: BVERBrec1.thetavp = vp123

A: VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)

$NP

RSTARTVPPROP123 {Dutch}

m1: SUBVERB{SUBVERBrec1}[mu1]
m2: VAR{VARrec1}
m3: VAR{VARrec2}
m4: VAR{VARrec3}

m: VPPROP{VPPROPrec1}[subj/VAR{VARrec1}, pred/VERBP{VERBPrec1}
                                           [arg/VAR{VARrec2},
                                            arg/VAR{VARrec3},
                                            head/VERB{VERBrec1}
                                              [head/SUBVERB{SUBVERBrec1}[mu1]]]]

GEN:

C: SUBVERBrec1.thetavp = vp123

A: VERBrec1 := copySUBVERBtoVERBrec(SUBVERBrec1)


$C1 Verbpatterns Rosetta2 compared to Rosetta3
$ In this section I will take the English verbpatterns of Rosetta2 and sketch
what they look like in the approach outlined above for Rosetta3. In preparing
this document, I have not been able to spend much time on this part of the work.
Both the assignment of values of _synvps_ to verbs and the 
Verbpattern-transformations in section 5 are provisional, nor will they be
complete. Still, comparison of Rosetta2 and Rosetta3 already leads to some
improvements and extensions.$
$ In Rosetta2, the relevant attributes were _aantalargs_ (number of arguments,
ranging from 0 to 3) and _vps_ (verbpatterns). In Rosetta3 these attributes
are replaced by _thetavp_, _synvps_ and an attribute for control. The left-hand
column (Rosetta2) indicates the value for _vps_, the rules that had to be 
applied in order to spell the verbpatterns out, and some examples. The 
right-hand column (Rosetta3) indicates the values for _thetavp_ and _synvps_
and the rules that apply.$
$ Values of _synvps_ used up till now:$

NP                  (the boy)
THATSENT            ((that) he goes)
OPENINFSENT         (x go)
CLOSEDINFSENT       (he go)
OPENTOSENT          (x to go)
CLOSEDTOSENT        (he to go)
FORTOSENT           (for John to go)
CLOSEDAPPROP        (he old)
OPENAPPROP          (x old)
GERUND              (John ('s?) running)
OPENGERUND          (x running)
PREPNP              (NP in prepobj)
WHSENT              (what to do, what he did)
NPNP                (him a book)
NPTHATSENT          (me that I should leave)
EMPTY           
NPOPENTOSENT        (her x to leave)
NPPREPNP            (the book to Mary)
NPOPENAPPROP        (the door x green)

$RL 15
          Rosetta2                                     Rosetta3          
                                       |
vps: vp0                               | thetavp: vp000
(it rains)                             | synvps: []
                                       | 
RSTARTCL0                              | StartVPPROP000
RVP0                                   | no Verbpattern-transformation
no RARGSSUBST                          | no substitution-rules
                                       |
ex: thaw                               |
    hail                               |  ex: same verbs  
    rain                               | 
    blow                               |
                                       |
--------------------------------------------------------------------------------
$RL 20
vps: vp1a                              | thetavp: vp100 
(John insists)                         | synvps: []
                                       | or: thetavp: vp010
                                       |     synvps: [NP]
                                       | 
RSTARTCL1                              | StartVPPROP100
RVP1                                   | no Verbpattern-transformation
RARGSSUBST1                            | argument-substitution rule for subject
                                       |
                                       | or: StartVPPROP010
                                       |     TVerbpattern1
                                       |     argument-substitution rule for NP
                                       |
ex: drive                              | ex: vp100: drive
    insist                             |            insist
    arrive                             |     vp010: arrive
    eat                                | _eat_: vp120
                                       | synvps: [EMPTY] (TVerbpattern11)
                                       |
--------------------------------------------------------------------------------
$RL 12
vps: vp1b                              | thetavp: vp010
(it seems that John is a liar)         | synvps: [THATSENT]
                                       |
RSTARTCL1                              | StartVPPROP101
RVP1                                   | TVerbpattern2
RARGSUBST7 (substitutes a SUBSENT      | argument-substitution rule for THATSENT
            and extraposes it)         | _it_ must be made
                                       |
ex: appear                             | ex: appear
    seem                               |     seem
                                       |
--------------------------------------------------------------------------------
$RL 7
vps: vp1c                              | This verbpattern is only for _be_. In
(there are people)                     | Rosetta3 there will be separate
RSTARTCL1                              | subgrammars for sentences containing
RVP1                                   | _be_.
RARGSUBST3 (only for be)               |
                                       |
--------------------------------------------------------------------------------
$RL 18
vps: vp2a                              | thetavp: vp120
(John beats Mary                       | synvps: [NP]
John announces his arrival             |     or: [NP, THATSENT]
John announces that he will go)        |     or: [THATSENT]
                                       |
RSTARTCL2                              | StartVPPROP120
RVP2                                   | TVerbpattern1 and TVerbpattern2
RARGSUBST1-RARGSUBST5                  | substitution-rules for NPs and
or: RARGSUBST1-RARGSUBST1              | THATSENTs
                                       |
ex: recommend                          | [NP]: recommend
    offer                              |       offer
    indicate                           | [NP, THATSENT]: indicate
    announce                           |                 announce
    think                              | [THATSENT]: think
    wonder                             | _wonder_ will be analyzed differently
                                       |
--------------------------------------------------------------------------------
$RL 18
vps: vp2c                              | thetavp: vp120
(I must go)                            | synvps: [OPENINFSENT]
                                       | or: thetavp: vp010
                                       |      synvps: [CLOSEDINFSENT]
                                       |
RSTARTCL2                              | StartVPPROP120 or StartVPPROP010
RVP2                                   | TVerbpattern3 or TVerbpattern7
RARGSUBST1-RARGSUBST9                  | substitution-rule for OPENINFSENT
                                       | 
                                       | ex: modals
                                       | 
                                       | The value of thetavp with two arguments
                                       | is for the root meaning of the modals.
                                       | The value of thetavp with one argument
                                       | is for the epstemic meaning of the 
                                       | modals. (Jan Odijk provided me with 
                                       | this analysis)
                                       |
--------------------------------------------------------------------------------
$RL 22
vps: vp2d                              | thetavp: vp120
(I try to leave)                   | synvps: [OPENTOSENT]
                                       |
RSTARTCL2                              | StartVPPROP120
RVP2                                   | TVerbpattern4
RARGSUBST1-RARGSUBST9                  | argument-substitution rule for
                                       | OPENTOSENT (x to go, index variable
                                       | should be the same as index subject
                                       | matrix sentence)
                                       |
ex: offer                              | ex: offer
    announce                           |     announce
    decline                            |     decline
    threaten                           |     threaten 
    begin                              |     begin
    love                               |     love
    try                                |     try
    want                               |
    prefer                             |     (_want_ and _prefer_ will be
                                       |      treated differently)
                                       |
--------------------------------------------------------------------------------
$RL 14
vps: vp2e                              | thetavp: vp010 (different number of
(he seems old)                         |                 arguments than in Ros2)
                                       | synvps: [APPROP]
                                       |
RSTARTCL2                              | StartVPPROP010
RVP2                                   | TVerbpattern5
RARGSUBST1-RARGSUBST4                  | argument-substitution rule for APPROP
                                       | transformation moving subject of APPROP
                                       | to matrix clause
                                       |
ex: be                                 | ex: separate subgrammar for be
    seem                               |     seem
                                       |
--------------------------------------------------------------------------------
$RL 17
vps: vp2f                              | thetavp: vp120
(she loves playing tennis)             | synvps: [OPENGERUND]
                                       |
RSTARTCL2                              | StartVPPROP120
RVP2                                   | TVerbpattern6
RARGSUBST1-RARGSUBST9                  | argument-substitution rule for 
                                       | OPENGERUND (index subject variable must
                                       |             be identical to subject 
                                       |             variable of matrix clause)
                                       |
ex: finish                             | ex: same verbs
    consider                           |
    begin                              |
    intend                             |
                                       |
--------------------------------------------------------------------------------
$RL 16
vps : vp2g                             | thetavp: vp120
(I saw him run)                        | synvps: [CLOSEDINFSENT]
                                       |
RSTARTCL2                              | StartVPPROP120
RVP2                                   | TVerbpattern7
RARGSUBST1-RARGSUBST10                 | argument-substitution rule for 
(RARGSUBST10 takes the subject of the  | CLOSEDINFSENT (the substitution rule 
substituted phrase and puts it in the  | leaves the subject in the substituted
main clause)                           | phrase)
                                       |
ex: watch                              | ex: same verbs
    hear                               |
    feel                               |
    see                                |
                                       |
--------------------------------------------------------------------------------
$RL 12
vps: vp2h                              | thetavp: vp120
(I saw him running)                    | synvps: [GERUND]
                                       |
RSTARTCL2                              | StartVPPROP120
RVP2                                   | TVerbpattern8
RARGSUBST1-RARGSUBST10                 | argument-substitution rule for GERUND
                                       | (leaves the subject of the substituted
                                       |  phrase in place)
                                       |
ex: see                                | ex: see (and other perception verbs)
                                       |
--------------------------------------------------------------------------------
$RL 18
vps: vp2i                              | thetavp: vp120
(I expect him to come)                 | synvps: [CLOSEDTOSENT]
                                       |
RSTARTCL2                              | StartVPPROP120
RVP2                                   | TVerbpattern9
RARGSUBST1-RARGSUBST10                 | argument-substitution rule for 
                                       | CLOSEDTOSENT (leaves the subject of the
                                       | substituted phrase in place)
                                       |
ex: advise                             | ex:advise
    tempt                              |    tempt
    order                              |    order
    press                              |    press
    expect                             |    expect
    want                               |
                                       | (_want_ will be treated differently)
                                       |
--------------------------------------------------------------------------------
$RL 20
vps: vp2b                              | thetavp: vp120
(I count on him)                       | synvps: [PREPNP]
                                       |
RSTARTCL2                              | StartVPPROP120
RVP3                                   | TVerbpattern11
RARGSUBST1-RARGSUBST2                  | argument-substitution rule for NP in PP
(or: RARGSUBST1-RARGSUBST6, for        |
substitution and extraposition of a    |
clause: I count on it that he leaves.  |
This is not correct in English.        |
                                       |
ex: insist                             | ex: same verbs
    join                               |
    extort                             | This analysis is for prepositional 
    deviate                            | verbs. Phrasal verbs (e.g. _call up_)
                                       | get a different analysis. They have 
                                       | synvps [NP]. Somewhere in the grammar
                                       | the particle is introduced.
                                       |
--------------------------------------------------------------------------------
$RL 25
vps: vp3a                              | thetavp: vp123
(I gave him a book                     | synvps: [NPNP]
 I told him that he should go)         |     or: [NPTHATSENT]
                                       |     or: [NPNP, NPTHATSENT]
                                       |
RSTARTCL3                              | StartVPPROP123
RVP4                                   | TVerbpattern12 and TVerbpattern13
RARGSUBST1-RARGSUBST1-RARGSUBST1       | argument-substitution rule for NP and
or: RARGSUBST1-RARGSUBST1-RARGSUBST5   | for THATSENT
    (substitutes a SUBSENT for the     |
     object variable)                  |
                                       |
ex: answer                             | [NPNP]: pay
    promise                            |         order
    pay                                |         bring
    order                              |         give
    bring                              |         pour
    give                               |         lend
    pour                               |         owe
    lend                               |         send
                                       |         answer
    teach                              | [NPTHATSENT]: warn
    owe                                | [NPNP, NPTHATSENT]: promise
    send                               |                     teach
                                       |
--------------------------------------------------------------------------------
$RL 21
vps: vp3c                              | thetavp: vp123
(I asked her to leave)                 | synvps: [NPOPENTOSENT]
                                       |
RSTARTCL3                              | StartVPPROP123
RVP4                                   | TVerbpattern 14
RARGSUBST1-RARGSUBST1-RARGSUBST8 (the  | argument-substitution rules for NP and
index of the subject variable of the   | OPENTOSENT (The _synvps_ for these 
substituted OPENCOMPLCL must be identi-| verbs will be the same for subject and
cal to the indirect object of the main | indirect object controllers. A separate
clause)                                | attribute for control will differenti-
                                       | ate these verbs.)
                                       |
ex: allow                              | ex: same verbs
    ask                                |
    challenge                          |
    defy                               |
    dissuade                           |
    encourage                          |
    persuade                           |
                                       |
--------------------------------------------------------------------------------
$RL 13
vps: vp3d                              | same as for vp3c
(I promised John to go)                |
                                       |
Same as vp3c, except for RARGSUBST8.   |
The index of the subject variable of   |
the substituted OPENCOMPLCL must be    |
identical to the index of the matrix   |
subject.                               |
                                       |
ex: promise                            | ex: promise
    threaten                           |     threaten
                                       | 
--------------------------------------------------------------------------------
$RL 31
vps: vp3b                              | thetavp: vp123
(I give the book to Mary               | synvps: [NPPREPNP]
 *I tell to Mary that I will come)     | 
                                       |
RSTARTCL3                              | StartVPPROP123
RVP5                                   | TVerbpattern15
RARGSUBST1-RARGSUBST1-RARGSUBST2 (sub- | substitution-rules for NP and NP in PP
stitutes NP in prepobj)                |
or: RARGSUBST1-RARGSUBST1-RARGSUBST5   |
(substitutes a SUBSENT for the object  |
variable and extraposes it. For these  |
cases, the RVP5 leads to incorrect     |
sentences. The other variable in the   |
VERBP is inside a prepobj, and the     |
output is:                             |
   *I tell to Mary that I will come    |
This is correct in Dutch, but not in   |
English.)                              |
                                       |
ex: give                               | ex: same verbs
    apply                              |
    borrow                             | (note that with the right thetavp,
    bring                              | _buy_ and _sell_ could be translated
    buy                                | into each other. If _buy_ has vp123 and
    sell                               | _sell_ vp312, the arguments would be in
                                       | in the right place. However, this
                                       | possibility should only be used if
                                       | there is no translation with the
                                       | variables in the same order.)
                                       |
--------------------------------------------------------------------------------
$RL 18
vps: vp3f                              | thetavp: vp123
(we paint the door green)              | synvps: [NPOPENAPPROP]
                                       |
RSTARTCL3                              | StartVPPROP123
RVP6                                   | TVerbpattern16
RARGSUBST1-RARGSUBST1-RARGSUBST4       | argument-substitution rules for NP and
(substitutes an OPENADJP with a subject| OPENADJPPROP. (subject variable should
variable with the same index as the    | have the same index as the object 
matrix subject. This is not correct    | variable)
for these constructions. In "we paint  |
the door green", it is not "we" that   |
are green, but the door.)              |
                                       |
ex: dye                                | ex: same verbs
    make                               |
    paint                              |
                                       |
--------------------------------------------------------------------------------

$ In the comparison between Rosetta2 and Rosetta3 above, a few verbs were 
mentioned that would have to receive a different verbpattern. _Want_, e.g.,
which had the same verbpattern as _expect_ or as _try_ in Rosetta2, does not
take a 'normal' infinitive complement:$

John wants (for) Bill to go
John wants very much for Bill to go
John wants to go

John prefers for Bill to go
John prefers to go

$ _Want_ and _prefer_ take an infinitive complement with the complementizer 
_for_. With _want_ this complementizer is optional, except if there is material
between the verb and the complement. The complementizer must not be present if
the subject of the infinitive is empty. For _prefer_ the complementizer is
obligatory, except when the subject of the infinitive is empty; in that case it
should not be present.$

thetavp: vp120
synvps: [FORTOSENT, OPENTOSENT]
StartVPPROP120
TVerbpattern 17 and TVerbpattern4
argument-substitution rules for FORTOSENT and OPENTOSENT
ex: want
    prefer

$ _Wonder_ (see p.7) can take a clause as argument, but this must be a 
_wh_-clause. This restriction was not expressed in the Rosetta2 verbpatterns.$

thetavp: vp120
synvps: [WHSENT]
StartVPPROP120
TVerbpattern18
argument-aubstitution rule for THATSENT and OPENTOSENT

$ These kinds of verbs are only two examples where a different analysis than in
Rosetta2 is given. The range of construction types discussed above is not
complete yet. Several verbpatterns will have to be added to the ones mentioned
here.$

$C1 Verbpattern-transformations
$ Some examples of what Verbpattern-transformations may look like are given. The
rules are made for English, but may well have the same form for Spanish, which 
is also an SVO language. For Dutch, the rules will look different (SOV), but the
values necessary for _synvps_ may be partly the same. Only the generative part
of the rules is given. I have not tried to combine rules, each 
Verbpattern-transformation handles one specific verbpattern.$
$ In the condition it is checked if the VAR contains the right value for its 
attribute _cat_. VARs are ambiguously translated into all values for _cat_.
The Verbpattern-transformations allow only those translations that are in
accordance with the value of _synvps_.$

$NP

TVerbpattern1

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                                [head/VERB{VERBrec1}[mu1],
                                 arg/VAR{VARrec1}]]

m:  VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                                 [head/VERB{VERBrec1},
                                  obj/VAR{VARrec1}]]

GEN:

C: NP in VERBrec1.synvps and
   VARrec1.cat = NP

A: VPPROPrec1.synvps := [NP]

{for transitive verbs, e.g. _see_ and ergative verbs, e.g. _arrive_}

$NP

TVerbpattern2


m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               obj/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = THATSENT and
   THATSENT in VERBrec1.synvps

A: VPPROPrec1.synvps := [THATSENT]

{for: _think_   - I think (that) he comes        (vp120)
      _believe_ - I believe (that) he likes me   (vp120)        
      _seem_    - It seems that he comes         (vp010)
      _appear_  - It appears that he likes me    (vp010) }

$NP

TVerbpattern3


m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = OPENINFSENT and
   OPENINFSENT in VERBrec1.synvps

A: VPPROPrec1.synvps := [OPENINFSENT]

{for: _can_: he can go}

$NP

TVerbpattern4


m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = OPENTOSENT and
   OPENTOSENT in VERBrec1.synvps

A: VPPROPrec1.synvps := [OPENTOSENT]

{for: _try_: he tries to go}

$NP

TVerbpattern5


m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = CLOSEDAPPROP and
   APPROP in VERBrec1.synvps

A: VPPROPrec1.synvps := [CLOSEDAPPROP]

{for : _seem_: he seems old.}

$NP

TVerbpattern6


m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = OPENGERUND and
   OPENGERUND in VERBrec1.synvps

A: VPPROPrec1.synvps := [OPENGERUND]

{for: _love_: she loves playing tennis}


$NP

TVerbpattern7


m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = CLOSEDINFSENT and
   CLOSEDINFSENT in VERBrec1.synvps

A: VPPROPrec1.synvps := [CLOSEDINFSENT]

{for: _see_: I saw him run}

$NP

TVerbpattern8


m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = GERUND and
   GERUND in VERBrec1.synvps

A: VPPROPrec1.synvps := [GERUND]

{for: _see_: I saw him running}

$NP

TVerbpattern9


m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = CLOSEDTOSENT and
   CLOSEDTOSENT in VERBrec1.synvps

A: VPPROPrec1.synvps := [CLOSEDTOSENT]

{for: _expect_: I expect him to come}

$NP

TVerbpattern10


m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               prepobj/PPVAR{PPrec1}
                                  [head/PREP{PREPrec1}, obj/VAR{VARrec1}]]]

GEN:

C: VARrec1.cat = NP and
   PREPNP in VERBrec1.synvps

A: PREPrec1.key := VERBrec1.prepkey
   VPPROPRec1.synvps := [PREPNP]

{for verbs such as _count on_: I count on him}
$NP

TVerbpattern11

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m:  VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1] ]],
                                arg/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = EMPTY and
   EMPTY in VERBrec1.synvps

A: VPPROPrec1.synvps := [EMPTY]

{This pattern is for verbs such as _eat_}

$NP

TVerbpattern12

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1},
                                arg/VAR{VARrec2}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               indobj/VAR{VARrec2},
                               obj/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = NP and
   VARrec2.cat = NP and
   NPNP in VERBrec1.synvps

A: VPPROPrec1.synvps:= [NPNP]

{for: _give_: I gave him a book}
 
$NP

TVerbpattern13

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1},
                                arg/VAR{VARrec2}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               indobj/VAR{VARrec2},
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = THATSENT and
   VARrec2.cat = NP and
   NPTHATSENT in VERBrec1.synvps

A: VPPROPrec1.synvps := [NPTHATSENT]

{for: _tell_: I told him that he should leave}
 

$NP

TVerbpattern14

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1},
                                arg/VAR{VARrec2}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               indobj/VAR{VARrec2},
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = OPENTOSENT and
   VARrec2.cat = NP and
   NPOPENTOSENT in VERBrec1.synvps

A: VPPROPrec1.synvps := [NPOPENTOSENT]

{for: _ask_: I asked her to leave
      _promise_: I promised her to leave}
 
$NP

TVerbpattern15

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1},
                                arg/VAR{VARrec2}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               obj/VAR{VARrec1},
                               prepobj/PPVAR{PPrec1}
                                 [head/PREP{PREPrec1},
                                  obj/VAR{VARrec2}]]
                               
GEN:

C: VARrec1.cat = NP and
   VARrec2.cat = PREPNP and
   NPPREPNP in VERBrec1.synvps

A: VPPROPrec1.synvps := [NPPREPNP]
   PREPrec1.key := VERBrec1.prepkey

{for: _give_: I gave the book to Mary}
 
$NP

TVerbpattern16

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1},
                                arg/VAR{VARrec2}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               obj/VAR{VARrec1},
                               pred/VAR{VARrec2}]]

GEN:

C: VARrec1.cat = NP and
   VARrec2.cat = OPENAPPROP and
   NPOPENAPPROP in VERBrec1.synvps

A: VPPROPrec1.synvps := [NPOPENAPPROP]

{for: _paint_: we paint the door green}

$NP

TVerbpattern 17

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               compl/VAR{VARrec1}]]

GEN:

C: VARrec1.cat = FORTOSENT and
   FORTOSENT in VERBrec1.synvps

A: VPPROPrec1.synvps:= [FORTOSENT]

{for: _want_: I want (for) Bill to go
      _prefer_: I prefer for Bill to go}

$NP

TVerbpattern 18

m1: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                               [head/VERB{VERBrec1}[mu1],
                                arg/VAR{VARrec1}]]

m: VPPROP{VPPROPrec1}[ sig1, pred/VERBP{VERBPrec1}
                              [head/VERB{VERBrec1}[mu1],
                               compl/VAR{VARrec1}]]

GEN:

C: (VARrec1.cat = THATSENT or
    VARrec1.cat = OPENTOSENT) and
    VARrec1.mood = interrogative and
    WHSENT in VERBrec1.synvps

A: VPPROPrec1.synvps:= [WHSENT]

{for: _wonder_: I wonder what to do
                I wonder what he should do}

$C1 Strategy for assigning values to thetavp
$ In this section I give a first approximation of a strategy for assigning 
values to the attribute _thetavp_, especially for making a distinction between
ergative and unergative verbs. I have used the tests mentioned by Jan Odijk in
doc. nr. 47 (Ergative Verbs), which are mainly for Dutch, and the tests for
ergatives and middle verbs in English given in Keyser and Roeper (1984) ('On the
Middle and Ergative Constructions in English', _Linguistic Inquiry_ 15.3). I
have represented these tests by means of consecutive questions, leading to a
value for the attribute _thetavp_ (if the tests are correct, the questions lead
to the correct value of _thetavp_).$
$ The reason for including these tests in this document, even if they are not
entirely complete yet, is that they can be used for assigning the values of 
_thetavp_ in the dictionary and the dictionary work should start as soon as
possible.$
$ Before the choice for ergativity can be made, however, the number of arguments
of a verb must be established. Tests for this still have to be developed.$

$C2 Number of arguments

$ The values of _thetavp_ are:$

  vp000
  vp100
  vp010
  vp120
  vp012
  vp123

$ First, the number of arguments (0, 1, 2 or 3) of a verb must be established.
For 0 and 3, _thetavp_ can be assigned vp000 and vp123, respectively. For 1 and
2 arguments, the ergative tests must be applied.$

$C2 Ergative test Dutch, 1-argument verbs

1. Does the verb take _zijn_ to form the perfect tense?
   yes --> question 3
   no  --> question 2

{hij is gevallen - *hij heeft gevallen}

2. Does the verb take _hebben_ to form the perfect tense?
   yes --> question 8
   no  --> you haven't answered question 1 correctly, go back

{hij heeft gewerkt - *hij is gewerkt}

(note that for some verbs, you need to take both paths!)

3. Does the argument bear the thematic role Agent?
   yes --> put on _Thetavp problems list_
   no  --> question 4

4. Can an impersonal passive be formed from the verb?
   yes --> put on _Thetavp problems list_
   no  --> question 5

{*er werd gevallen}

5. Can the past participle of the verb appear in the context NP[Det -- N]?
   yes --> question 6
   no  --> put on _Thetavp problems list_

{de overleden mensen}

6. Can a noun on _-er/-aar_ be formed from the verb?
   yes --> does the noun refer to the argument of the verb?
           yes --> put on _Thetavp problems list_
           no  --> question 7
   no  --> question 7

{*overlijder, _rijder_ does not refer to _de auto_ in _de auto rijdt_}

7. Does prefixing _be_- to the verb result in a predictable meaning?
   yes --> put on _Thetavp problems list_
   no  --> thetavp := vp010

{vallen - bevallen}

{intransitives}

8. Does the argument bear the thematic role Agent?
   yes --> question 9
   no  --> put on _Thetavp problems list_

{the sentence contains an Agent if an inanimate argument (that normally cannot
bear the thematic role Agent) makes the sentence unacceptable:
? de auto heeft naar Groningen gereden}

9. Can an impersonal passive be formed from the verb?
   yes --> question 10
   no  --> put on _Thetavp problems list_

{er werd gewerkt}

10. Can the past participle of the verb appear in the context NP[Det -- N]?
    yes --> put on _Thetavp problems list_
    no  --> question 11

{*de gewerkte mensen}

11. Can a noun on _-er/-aar_ be formed from the verb?
    yes --> question 12
    no  --> put on _Thetavp problems list_

{werker}

12. Does prefixing _be_- to the verb result in a predictable meaning?
    yes --> thetavp:= vp100
    no  --> put on _Thetavp problems list_

{fietsen - befietsen}

$C2 Ergative test for Dutch, 2-argument verbs

1. Does the verb take _zijn_ to form the perfect tense?
   yes --> question 3
   no  --> question 2

{het boek is hem bevallen}

2. Does the verb take _hebben_ to form the perfect tense?
   yes --> question 7
   no  --> you haven't answered wuestion 1 correctly, go back

{hij heeft het boek gezien}

3. Does one of the arguments bear the thematic role Agent?
   yes --> put on _Thetavp problems list_
   no  --> question 4

4. Can a passive be formed from the verb?
   yes --> put on _Thetavp problems list_
   no  --> question 5     

{*hij wordt bevallen door het boek}

5. Can Nominative-Dative inversion take place in (non-passive) embedded 
   clauses and in _er_-extraposition clauses?
   yes --> question 6
   no  --> put on _Thetavp problems list_

{Jan zei dat hem (io) dat boek (subj) wel beviel
 Er bevielen hem (io) wat boeken (subj)}

6. Can a noun on _-er/-aar_ be formed from the verb?
   yes --> put on _Thetavp problems list_
   no  --> thetavp := vp012   

{*bevaller}

{intransitives}

7. Does one of the arguments bear the thematic role Agent?
   yes --> question 8
   no  --> put on _Thetavp problems list_

{? het boek heeft de auto gezien}

8. Can a passive be formed from the verb?
   yes --> question 9
   no  --> put on _Thetavp problems list_  

{hij werd getroffen door het boek}

9. Can Nominative-Dative inversion take place in (non-passive) embedded clauses
   and in _er_-extraposition clauses?
   yes --> put on _Thetavp problems list_
   no  --> question 10

{Jan zei dat Karel (subj) Piet (io) een boek (do) had gegeven
 Er gaf iemand (subj) de jongens (io) een boek (do)}

10. Can a noun on _-er/-aar_ be formed from the verb?
    yes --> thetavp:= vp120
    no  --> put on _Thetavp problems list_

{koper}

$C2 Ergative/Middle test for English, 1-argument verbs

$ The ergative tests for English will be different on some points from the
tests for Dutch. For Dutch, ergativity is tested (a.o.) on constructions that
do not occur in English. English has no distinction between _have_ and _be_
for perfect tense, e.g., nor does it have impersonal passives. The criteria
used here are adapted from Jan Odijk (doc.nr. 47), using Keyser and Roeper
(1984).$

1. Does the argument bear the thematic role Agent?
   yes --> question 12
   no  --> question 2

2. Is there an obligatory adverb accompanying the verb?
   yes --> question 7
   no  --> question 3

{bureaucrats bribe easily - *bureaucrats bribe}

3. Can a noun ending in _-er_ be formed from the verb?
   yes --> does the noun refer to the argument of the verb?
           yes --> put on _Thetavp problems list_
           no  --> question 4

{*dropper , _baker_ does not refer to _the bread_ in _the bread baked_}

4. Can the prefix _re_- be attached to the verb with regular meaning?
   yes --> question 5
   no  --> put on _Thetavp problems list_

{reerupt, reappear}

5. Can _there_-insertion take place with the verb?
   yes --> question 6
   no  --> is there a transitive counterpart?
           yes --> question 6
           no  --> put on _Thetavp problems list_

{there erupted three volcanoes
?there sank a ship
*there sang a man}

6. Can a derivative nominal occur in object position?
   yes --> put on _Thetavp problems list_
   no  --> thetavp := vp010
{ he sang a strange song
*the ship sank a strange sinking}

{middles}

7. Can the verb describe a particular event?
   yes --> put on _Thetavp problems list_
   no  --> question 8

{?yesterday, the mayor bribed easily, according to the newspaper}

8. Can the verb occur in imperative constructions?
   yes --> put on _Thetavp problems list_
   no  --> question 9

{*bribe, bureaucrats!}

9. Can the verb occur in the progressive?
   yes --> put on _Thetavp problems list_
   no  --> question 10

{*bureaucrats are bribing}

10. Can the verb occur in a small clause after a perception verb?
    yes --> put on _Thetavp problems list_
    no  --> question 11

{*I saw bureaucrats bribe easily}

11. Can the present participle of the verb occur in the context NP[Det --N]?
    yes --> put on _Thetavp problems list_
    no  --> thetavp := vpmiddle (I do not know how to analyze these verbs yet)

{*the bribing men}

{intransitives}

12. Can a noun ending in _-er_ be formed from the verb?
    yes --> question 13
    no  --> put on _Thetavp problems list_

{hitter}

13. Can the prefix _re_- be attached to the verb?
    yes --> put on _Thetavp problems list_
    no  --> question 14

{*reyell}

14. Can _there_-insertion take place with the verb?
    yes --> put on _Thetavp problems list_
    no  --> question 15

{*there sang a man}

15. Can a derivative nominal occur in object position?
    yes --> thetavp := vp100
    no  --> put on _Thetavp problems list_

{the man sang a song}

$ In English, ergatives pattern with intransitives instead of with transitives
as in Dutch. This means it would be strange for English to have 2-argument
ergative verbs. I do not know if they exist.$

$C1 Conclusion
$ In this note I have made a proposal for the handling of the notion verbpattern
in Rosetta3. Points about which a decision should be taken are:$

- The distinction between _thetavp_, expressed by the StartVPPROP-rules, and
  _synvps_, expressed by the Verbpattern-transformations.
- The question whether the value of _thetavp_ should be unique to a verb or
  whether it might be desirable to have the value of _thetavp_ be a set (i.e.
  how to handle the Dative Alternation.)
- Allowing the option of permutation of variables (expressed in _thetavp_) as
  a solution to translation problems.
- The question whether there should be one category VAR, with an attriubte
  _cat_ (apart from other attributes) or whether we should distinguish several
  categories of VAR, e.g., NPVAR, THATSENTVAR, etc.

$ I have only considered English data and English verbpatterns and I have not
paid much attention to the analysis of specific verbs yet. Future work should
include:$

- Detailed analyses of English, Dutch and Spanish verbs in the framework
  outlined above.
- Explicit tests must be developed that lead to the correct assignment of
  values for _thetavp_ and _synvps_ to verbs in the dictionary.

$ In a discussion of this document, decisions have been taken on the points
mentioned above. The approach outlined in this document will be used in
Rosetta3. Each verb has only one value for _thetavp_. Permutation of arguments
will be allowed and are necessary for the following data:$

           agradecer algo a alguien
           thank someone for something
           iemand voor iets bedanken

$ There will be different categories of VAR.$

$C1 Footnotes
1. Of course, it is not a priori clear which properties of verbs should be 
   called semantic and which syntactic. The use of the word 'semantic' here is
   therefore not well-chosen. What is important to Rosetta, is to separate
   the restrictions verbs place on their environment which are relevant for
   translation. The former should be spelled out by _rules_ (which are trans-
   lated), whereas the latter can be spelled out by _transformations_ (which are
   not translated). Section 2.1 discusses the kinds of properties that may be 
   relevant for translation and are spelled out by Start_rules_; section 2.2
   discusses the properties that need not be translated, which are spelled out
   by Verbpattern-_transformations_.

2. Note that this does not mean that the value of the verbpattern attribute 
   should never be mentioned in rules other than the rules spelling out the
   verbpattern. It may very well be the case that other rules need to refer
   to specific classes of verbs and that this can readily be expressed in terms
   of values of the verbpattern attribute. What is meant here is that after
   verbpattern rules have applied, the information that the notion verbpattern
   covers (such as number of arguments, categories of the arguments, relations)
   should be visible in the S-tree.

3. In Rosetta, only verbs which have the same number of arguments can be trans-
   lated into each other. It may be the case, however, that there are verbs 
   which have a different number of arguments in two languages (and which 
   therefore do not mean exactly the same), but which nevertheless should be
   considered translations of each other because there are no better 
   translations available. In that case the analysis of a verb in one of the
   languages should be adapted to the analysis of its translation, leading to
   an analysis of that verb different than the one that would have been chosen
   if only the one language had been taken into account.

4. The correct translation could only be arrived at in this way if the transfer
   component was capable of reversing the order of the variables. This would
   be no local transfer, however, which is undesirable in the Rosetta framework.

5. To a certain extent, the categorial realization of arguments may be
   predictable from the meaning of a verb. The fact that the complement
   sentence of _wonder_ must be an interrogative clause can probably be 
   related to its meaning. Some categorial restrictions cannot be reduced to 
   the meaning of the verb, however:

   (1)a.  Pronouns replaceNP's
      b. *Pronouns substitute NP's
      c. *Pronouns replace for NP's
      d.  Pronouns substitute for NP's

   (Data from J. Grimshaw (1981) 'Subcategorization and Grammatical Relations',
   in A. Zaenen, ed. _Subjects and other Subjects: Proceedings of the Harvard_
   _Conference on the Representation of Grammatical Relations_) For Rosetta, I
   will assume that the categorial realization of arguments is syntactic.
