$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$AC @
$XC ~`

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta.linguistics

    ---------------------------------------------------------







         Title        :  Subgrammatica-indeling

         Author       :  Jan Odijk









         Doc.Nr       :  0093

         Date         :  18/03/86

         Status       :  Informal

         Supersedes   :  

         Distribution :  Iso's

         Clearance    :  project

         Keywords     :  subgrammatica's, isomorf schema
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Copyright (c) Nederlandse Philips Bedrijven B.V.

$ph Rosetta          Doc.nr: 0093                    date:18/03/86
$LD 4
$Np 1
$UC _

_0. Inleiding_

$ In dit stuk wordt voorstel voor een globale opzet van de isomorfe
grammatica's en hun subgrammatica's gedaan. Dit stuk moet gezien worden
als een tussenverslag van aan de gang zijnde bezigheden. Dit houdt in dat
sommige delen van de opzet niet of nauwelijks uitgewerkt zijn, en bijna alle
delen nog onvolledig zijn$ 
$ Er is uitgegaan van de mogelijkheid d.m.v. controle-expressies de toepassing
van regels en transformaties binnen een subgrammatica te sturen. Het voorstel
hierover vereist eigenlijk dat de controle-expressie begint en eindigt met
een regelklassenaam die verplicht een keer toegepast moet worden, 
en niet met een transformatieklassenaam, of met een regelklassenaam die
optioneel is. Hier is voorlopig nogal van afgeweken, maar dit dient in een
definitieve versie in orde gebracht te worden (en ik voorzie daar niet
echt problemen mee). Voor de duidelijkheid formuleren we hier in het kort de
controle-expressienotatie:$

$ Een controle-expressie is een expressie van de vorm$

   A%0%.A%1%. ... .A%n-1%.A%n%  

waar geldt:

   A%0% = RC%0%      } waar RC%0% en RC%n% regelklassen zijn
   A%n% = RC%n%      }

0 < i < n: A%i% =  RC%i%  (verplichte toepassing) of 
           A%i% = [RC%i%] (optionele toepassing)  of 
           A%i% = {RC%i%} ( kan 0 of meerdere keren toegepast worden)

$ waar iedere RC%i% Een regelklasse of een transformatieklasse is.$

$ Dit stuk bestaat uit twee delen: 1) Een informele beschrijving van de 
globale opzet van de grammatica en 2) Beschrijving van de subgrammatica's$
$ De subgrammatica's zijn opgesteld voor het Nederlands. De opzet is, met name
waar het regelklassen betreft, echter dermate ruim, dat waarschijnlijk niet
al te veel problemen te verwachten zijn bij het opstellen van de isomorfe 
grammatica's voor het Engels en het Spaans.$

$ Op basis van de hier geschetste opzet is een voorstel gedaan voor
het graag-like vertaal probleem, zie document 0092$
$NP

_1. Globale opzet Iso-schema._

$ Er komen subgrammatica's die gegeven de hoofdcategorieen BNOUN,BADJ,
BVERB,B(?)PREP, BADV 'maximale projecties' maken hiervan (NOUNP, ADJP,
VERBP,PREPP,ADVP) door deze hoofdcategorieen te 'determineren', te
'modificeren' en / of te 'complementeren'. Voor die hoofdcategorieen die in
elkaar te vertalen zijn moet de formatie van de 'maximale projecties' isomorf
kunnen lopen. In ieder geval moeten de volgende vertaalrelaties gelegd kunnen
worden:$

ADJ-VERB    bv. voor Ned 'voldoende(ADJ); Engels 'to suffice'(VERB)
                     Ned 'verliefd'(ADJ) Spaans: enamorarse (VERB)

ADV-VERB  bv. graag-like; toevallig-happen; misschien - might    
$ Andere gevallen: door-V vs. continue to V/ V-ing$ 

$ 2. Het volgende regelschema bestaat:$

$ Gegeven een NOUNPVAR (dwz een VAR van categorie NOUNP) en een XP (waar X
gekozen mag worden uit [NOUN, ADJ, VERB, PREP, ADV]) maak een XPPROP van de
vorm$

XPPROP{}[ subjrel/NOUNPVAR,  predrel/XP ]

$ en: Gegeven een XP, maak een XPPROP van de vorm: XPPROP{} [ predrel/XP ]
(als het subject geen argument is).$

$ Instantiaties van dit regelschema vormen instantiaties van de XPPROP-
subgrammatika's.$
$ XPPROP's zijn te vergelijken met de bv. de OPENPP(VAR) in Rosetta2. Een
verschil met OPENPP(VAR)'s is bijv. dat de XPPROP's _gesloten_ kunnen zijn.
XPPROP's komen bij sommige werkwoorden als argument voor bv.: (met overt
subject) _vinden_: ik vind _hem een rare quibus_, met niet overt subject:
_lijken_,bv. hij lijkt wel _gek_, waar _hij_ het 'verplaatste' subject van
de OPENADJP is, en in combinatie met een direct object bv. Hij zette 
de boeken _in de kast_, waar _in de kast_ in een eerder stadium van de
derivatie een PREPPPROP was van de vorm:$

PREPPPROP{}[ subj/NOUNPVAR, predrel/PP ]

$ Gegeven deze benadering lijkt het zinvol verbpatterns een naam te geven 
waaraan je kan zien of een argument in subject-positie genomenm wordt of
niet. Dit zou kunnen gebeuren door de nummeringh van de verbpatterns te 
laten bestaan uit twee cijfers: een cijfer dat aangeeft of er al dan niet
(1 of 0) een subject-argument genomen wordt, en een cijfer dat aangeeft
hoeveel andere argumenten er genomen worden. Enkele voorbeelden:$

Verbpattern00a  : verba zonder argumenten, bv. _regenen_
Verbpattern01a  : zgn. ergatieve verba, bv. _aankomen_
Verbpattern10a  : zgn. echte intransitiva, bv. _lachen_
Verbpattern11a  : transitieve werkwoorden, bv. _zien_
Verbpattern02a  : tweeplaatsig ergatieve verba, bv. _bevallen_
Verbpattern12a  : zgn ditransitiva, bv _geven_


$ Een probleem voor deze benadering wordt gevormd door het volgende geval. Stel
dat een werkwoord V1 in taal L1 1 argument neemt; De vertaling ervan, V2 in
taal L2 neemt ook een argument. V1 heeft een verbpattern, dat dit argument
tot object maakt; V2 heeft een verbpattern dat z'n argument tot subject
maakt. Dan is de relevante derivatieboom in taal L1 van de volgende vorm:$

$RL 9
           L1R:VERBPPROP
 
             L1T:VPattern

             L1R:startverbp

             V1       VAR

$ terwijl in taal L2 de boom er als volgt uitziet:$

$RL 9
       L2R:VERBPPROP
 
    VAR      L2T:VPattern

             L2R:startverbp

                 V2 

$ En deze bomen hebben duidelijk niet dezelfde geometrie.$

$ Dit probleem kan op twee manieren opgelost worden. De eerste manier is 
om (in ieder geval voor Verbs) alle argumenten, inclusief het subject,
direct te introduceren, zoals in Rosetta2.$
$ Een nadeel van deze oplossing is dat de symmetrie tussen XP's en
XPPROP's hierbij voor VERB doorbroken wordt, tenzij ook bij alle andere
constructies alle argumenten (inclusief het subject) direct geintroduceerd
worden. Dit laatste zou echter leiden tot een verdubbeling van alle NP-regels,
van alle PP-regels etc. en lijkt daarom minder gewenst. Een belangrijk argument
tegen deze analyse kan gegeven worden als de VERBP ook onafhankelijk voor
zou kunnen komen, dwz zonder NP-subject. Zulke gevallen bestaan wel,
althans er zijn plausibele analyses voor verschijnselen waarin dit aangenomen
wordt (bv. in _Hij liet zich [door hem bedriegen]_ zou het gedeelte tussen 
haken  een kale VP zijn, cf. P. Coopmans 84?). Indien vertaalbaarheid tussen 
VERBP's andere XP's mogelijk moet zijn (bv tussen VERBP en ADJP), dan moeten
de derivaties in ieder geval isomorf lopen.$
$ In Rosetta2 zijn alle adjp's en alle prepp's onderliggend openadjp's en
openprepp's. Daarom treedt er geen verdubbeling van regels op. In Rosetta2 
zijn er geen opennounp's, en clauses zijn in zekere zin openverbp's. Het lijkt
mij onzin om alle nounp's als opennounp's te laten beginnen. Voor adjp's is
dit plausibeler, maar het is niet duidelijk of dit ook voor niet-intersectieve
adjectieven, of algemener voor alleen attributief te gebruiken adjectieven 
geldt. Voor (adverbiale) PREPP's is het ook mogelijk om ze als openprepp te
laten starten, met de clause waarin ze geinserteerd worden als argument, maar
er is m.i. gen enkele noodzaak om dit zo te doen. Voor andere gevallen, bijv
voor zinnen als 'Ik woon in Spanje' lijkt het me dat het werkwoord _wonen_
beschouwd moet worden als een tweeplaatsige functie die als argumenten resp.
een NOUNP (designeert een object) en een PREPP (designeert een locatie) neemt.$

$ Een tweede manier is om wat extra's te doen om de zaak recht te breien. M.n
Stel dat we een werkwoord V1 met verbpattern _01_ willen vertalen in een
werkwoord V2 met verbpattern _10_. De regel die een VERB en een VAR combineert
tot VERBP[ head/VERB, obj/VAR ] indien het verbpattern van het werkwoord 01 is,
breiden we uit to werkwoorden die verbpattern 10 hebben. De regel kan als volgt
geformuleerd worden:$

$RL 8
m1: VAR{VARREC1}
m2: VERB{VERBREC1}
m : VERBP{VERBPREC} [ headrel/ VERB{VERBREC1}, objrel/VAR{VARREC1} ]

GEN  COND   verbpattern01 in verbrec1.vps  OR
            verbpattern10 in verbrec1.vps                    
     ACTION --

$ Vervolgens breiden we de verbpprop-regels ook uit. Er is een regel die
een VERBP combineert met een VAR tot VERBPPROP. Normaal werkt deze alleen
voor verba met een extern argument (verbpattern1i):$

$RL 10
VERBPPROPFORMATION1

m1: VERBP{VERBPREC1} [ mu1, VERB{VERBREC1}, mu2 ]
m2: VAR{VARREC1}
m : VERBPPROP{VERBPROPREC}[ subjrel/VAR{VARREC1}, 
                            predrel/VERBP{VERBPREC1}
                                         [ mu1, VERB{VERBREC1}, mu2 ]
                          ]

GEN   COND    verbpattern1i in verbrec1.vps


$ We voegen nu een regel toe, die een argument neemt, nl. een VERBP die een
VERB bevat met verbpattern1i:$

$RL 10
m1: VERBP{VERBPREC} [  obj/VAR{VARREC1}, head/VERB{VERBREC1} ]
m : VERBP{VERBPREC} [ subj/ VAR{VARREC1}, 
                      predrel/ VERBP{VERBPREC} [ head/VERB{VERBREC1} ]
                    ]

GEN COND    verbpattern1i in verbrec1.vps

$ En zo ook voor het omgekeerde geval (als een werkwoord met verbpattern1i 
vertaald moet worden door een werkwoord met verbpattern0j), en ook voor 
tweeplaatsige ergatieven.$

$ De geschetste analyse impliceert dat er een interne structurering is in de
lijst van argumenten, en dat dit semantisch relevant is. Het is niet 
duidelijk of dit correct is. In ieder geval willen we, ook al is de interne
structurering van de argumentlijst semantisch relevant, de flexibiliteit hebben
om werkwoorden met verschillend gestructureerde lijsten van argumenten in 
elkaar te kunnen vertalen.$

$ Hier dient een beslissing over genomen te worden.$

$ 3. Subgrammatica's die XPPROP's (optioneel) tot clauses kunnen maken. In de
onderhavige grammatica worden deze subgrammatica's XPPROPbewerking genoemd. In
deze subgrammatica's worden eerst propositionele eenheden geinserteerd,
vervolgens worden allerlei transformaties toegepast, waaronder voice- regels.
Ondertussen is gebleken dat de clause-status veel eerder toegekend moet worden,
en een gewijzigde versie is in de maak. Om dit stuk echter aan te laten sluiten
bij doc. 0092 is deze verandering nog niet beschreven. De genoemde wijziging
houdt ook in dat er subgrammatica's zijn die XPPROP's tot clauses maken en
subgrammatica's die XPPROP's XPPROP's laten (isomorf)$ 

$ 4. Regels die de externe status van de clause bepalen, c.q. uitspellen (bv.
declar. subsent (conj: dat); interrog subsent: (conj: of(dat)); (wh-question:
shift/NP{wh) moet vooraan staan; relcl: spel vbl op de juiste manier uit etc.
etc.$ 
$ De regels 4. die de externe status van de clause regelen moeten geen
isomorfie door breken, dwz XPPROP's moeten vertaald kunnen worden in Clauses.
daarom moeten dit transformaties zijn die slechts een uitspelling geven van
reeds aanwezige informatie: uitspelling van tijd aspect en mood. Dit is nodig
als we bv. _Ik vind hem gek_ in _Ik vind dat hij gek is_ willen kunnen
vertalen. Het is onduidelijk of daaraan voldaan wordt$ 
$NP
_2. Subgrammatica's_

$RL 10 
subgrammatica: VERBP

import: BVERB, VAR
export: VERBP

controlexpression:
  R:Startverbpregels.{R:emptysubstitutie}.T:Verbpatternregels.
  {R:advvarregels}.R:determinatieregels

Informele beschrijving van de regelklassen en/of transformatieklassen:

R:Startverbpregels: combineren BVERB en VAR's tot een VERBP. De VAR's zijn
 plaatshouders voor de (zgn. interne) argumenten van BVERB.

R:emptysubstitutie: vervangt een variabele door EMPTY, cf. Rosetta2
   Voor passief komt deze regel eigenlijk te vroeg hier; Wellicht kunnen
    we deze regel echter ook opnemen in de XPPROP-subgrammatica's. 
    Een beslissing dient genomen te worden of gevallen zoals _ik eet_ 
    naast _ik eet een boterham_ door emptysubstitie behandeld moeten worden.
    Voorgestelde maat (cf. maatconditie): het aantal empty's in de boom 

T:Verbpatternregels. cf. Rosetta2. Een verschil met Rosetta2 is dat het
    subject nog niet aanwezig is.
R:advvarregels. Deze regels introduceren VAR's met relatie advrel als plaats-
    houder voor later te inserteren adverbiale phrases (o.a.tijd, duur, plaats,
     verbale modificatie (bv hard in hard werken) etc.)
     Voorgestelde maat: het aantal advrel/VAR's in de boom 
R:Determinatieregels: volgt later
-----------------------------------------------------------------
$RL 15 
subgrammatica ADVP

import: BADV, VAR
export: ADVP

controlexpression:
  R:StartADVPregels.{R:emptysubstitutie}.T:advpatternregels.
  {R:advvarregels}.R:determinatieregels

Informele beschrijving van de regelklassen en/of transformatieklassen:

zie VERBP;
  bijzondere voorbeelden: graag, toevallig, misschien,
-------------------------------------------------------------------
$RL 15 
subgrammatica ADJP

import: BADJ, VAR
export: ADJP

controlexpression:
  R:StartADJPregels.{R:emptysubstitutie}.T:ADJpatternregels.
  {R:advvarregels}.R:determinatieregels

Informele beschrijving van de regelklassen en/of transformatieklassen:

zie VERBP;

-------------------------------------------------------------------
$RL 15 
subgrammatica PREPP

import: PREP, VAR
export: PREPP

controlexpression:
  R:StartPREPPregels.{R:emptysubstitutie}.T:PREPpatternregels.
  {R:advvarregels}.R:determinatieregels

Informele beschrijving van de regelklassen en/of transformatieklassen:

zie VERBP;
 Advvarregels zullen misschien nooit gebruikt worden???
-------------------------------------------------------------------
$RL 15 
subgrammatica NOUNP

import: BNOUN, VAR
export: NOUNP

controlexpression:
  R:StartNOUNpregels.{R:emptysubstitutie}.T:NOUNpatternregels.
  {R:adjvarregels}.R:determinatieregels

Informele beschrijving van de regelklassen en/of transformatieklassen:
T:Nounpatternregels; alle nouns zijn in ieder geval van nounpattern0;
  sommige (aan verba gerelateerde nouns) hebben ook andere nounpatterns
R:adjvarregels: deze introduceren VAR's die later opgevuld gaan worden
   dooradjectieffrasen
zie verder VERBP;
   
-------------------------------------------------------------------
$RL 15 
Subgrammatica VERBPPROPvorming

import: VERBP, VAR
export: VERBPPROP

controlexpression: R:VERBPPROPformatieregels

R:VerbPpropformatieregels vormen een VERBPPROP van een VERBP, en eventueel
   een VAR (afhankelijk van het verbpattern van de VERB in VERBP), die 
   de relatie subjrel krijgt. De XP krijgt als relatie de relatie predrel,
   of eventueel headrel.In het algemeen zijn XPProp's de minimale
   propositionele  constituenten (dwz de minimale constituenten waar je
   een waarheidswaarde aan kan toekennen, van type t dus), zonder tense,
   aspect etc.
   Te overwegen valt of XPPROP's subgrammatica's de XP subgrammatica's
   in zich moeten insluiten, met uitzondering misschien van NOUNP.
   Eventuel moet Emptysubstitutie hier van toepassing zijn (voor passieven
   zonder overte door-frase)   

-------------------------------------------------------------------------
$RL 15 
Subgrammatica ADVPPROPvorming

import: ADVP, VAR
export: ADVPPROP

controlexpression: R:ADVPPROPformatieregels

voorbeeld: ADVP{} [ headrel/ADV{*graag*}, complrel/VAR ] + VAR -->
           ADVPPROP{}[ subjrel/VAR, 
                       predrel/ADVP{} [ headrel/ADV{*graag*}, complrel/VAR ]
                  ]
--------------------------------------------------------------------------
$RL 15 
Subgrammatica ADJPPROPvorming

import: ADJP, VAR
export: ADJPPROP

controlexpression: R:ADJPPROPformatieregels

Voorbeelden van adjpprop's: ik vind _hem gek_; in copulatieve zinnen met
zijn en worden bv: hij is gek; zij wordt aardiger;
onpersoonlijke: ik vind _het koud_; het is koud
--------------------------------------------------------------------------
$RL 15 
Subgrammatica PREPPPROPvorming

import: PREPP, VAR
export: PREPPPROP

controlexpression: R:PREPPPROPformatieregels

voorbeelden: hij is in de tuin; eventueel: het regent _in Spanje_ 
(cf. Rosetta2)

--------------------------------------------------------------------------
$RL 15 
Subgrammatica NOUNPPROPvorming

import: NOUNP, VAR
export: NOUNPPROP

controlexpression: R:NOUNPPROPformatieregels

voorbeelden: ik vind _dit een moeilijk probleem_; in copulatieve constructies:
             hij is een goede schaker
onpersoonlijke gevallen: het is winter; ik vind _het de koudste winter van
 de laatste jaren_; het is tijd om te vertrekken.

--------------------------------------------------------------------------
$RL 15 
Subgrammatica  VERBPPROPbewerking

Import: VERBPPROP, SENT, andere XPPROP's; ADVPPROP+SENT (voor graaglike)
Export: CLAUSE

controleexpressie: {R:propositiesubstitutie}.T:INFVERBregels.
          T:ObligatorycontrolPROinterpretation.
          T?:Postsubjformation.T:OBjectokregels.
          R:Clauseformatie.T:subject-verbagreement.T:ModalandPerfectswitch.

(Er zitten nog wat problemen in deze ordening, bv. INFVERBREGELS verwachten
dat de auxiliaries er al zijn)
Nog aanvullen: T:PPoverV; T:NPoverAdv; T:pronounopz'nplaats; T:zichuitspelling

R:Propositiesubstitutie: substitueert propositionele constituenten
       voor variabelen. Het betreft hier argumenten van de VERB in
       VERBP, en bepaalde adverbiale propositionele frases, met name
       die, die een zgn obligatory PRO bevatten.
    maat: het aantal VAR's
T:Infverbregels. Deze transformatieklasse omvat o.a de volgende leden:
    T:Verb-raising: maakt van
            hij SENT[ PROVAR de boeken te lezen ]probeerde
            hij SENT[ PROVAR de boeken ] VERB[ probeerde te lezen]
    T:Verbnoparticle-raising maakt van
            hij SENT [ PROVAR haar op te bellen ] probeerde
            hij SENT [ PROVAR haar op ] VERB [ probeerde te bellen ]
     
    T:Extraposition maakt van:
        dat hij compl/SENT[ PROVAR haar op te bellen] probeerde
        dat hij probeerde extraposrel/SENT[ PROVAR haar op te bellen]
T:ObligatorycontrolPROinterpretatie: checkt of de PROVAR dezelfde attributen
     heeft als z'n antecedent, en met name of het antecedent in de juiste
    positie staat of de juiste grammatikale relatie draagt.
    (Dit moet beslist vo'o'r voice-regels, en na de Infverbregels)
T?:Postsubj-formatie: vormt van subj/VAR{indef, -generiek} VERBP-->
           postsubj/VAR{indef} VERBP. Bedoeld voor _iemand koopt een boek_--> 
         er koopt iemand een boek. Cf. ergatieven doc 0047?
   Dit is een transformatie als we aan de subj-VAR kunnen zien of daar een
   generieke NP geinserteerd gaat worden, anders misschien een regel
T:Objectokregels. Deze transformatieklasse omvat o.a.
  T:Object-promotie: maakt van een obj/ een subj/ bij passiva
      en ergativa
  T:Er-insertie: zet ER in de structuur als subjrel, indien er geen subjrel
      is.
  T:NP-raising: maakt van een subj/ uit de e'e'n diepere propositionele
     constituent het subj van de onderhavige VERBPPROP,bv, bij raising
     verba, passieven, copulaire werkwoorden (lijken, blijken etc.) :
      bv. [ compl/ADJPPROP[hij groot] lijk] --> 
          [ subj/hij compl/ADJP(PROP?)[groot] lijk ]
          [ [ hij te komen] schijn ]--> [ hij [ te komen ] schijn ]
  T:Dative-Movement: Maakt in het Engels indirect objecten tot subject
           (bv. he has been given a book). In het Nederlands eventueel ook,
      zij het met behoud van naamval (Hem werd een boek gegeven) cf. Ergatieven
  
R: Clause-formation. Deze regel(s) vormen de VERBPPROP om to een clause,
    en spellen mbv auxiliary verbs tense en aspect uit.       
T: subject-verb agreement: Zoals de naam al zegt.

T:ModalandPerfectswitch. In Verb-raising structuren zijn bij _hebben_ en _zijn_
       en bij de modalen twee volgordes mogelijk:
        dat hij de boeken heeft gelezen/ kon lezen
        dat hij de boeken gelezen heeft / lezen kon

----------------------------------------------------------------------------
$RL 15 
ADVPPROPbewerking

import: ADVPPROP
export: ADVPPROP, ??CLAUSE

-----------------------------------------------------------------------------
$RL 15 
ADJPPROPbewerking

import: ADJPPROP
export: ADJPPROP, CLAUSE

**misschien splitsen in 2 subgrammars*

controle-expressie:  {R:propositiesubstitutie}.T:Extrapositie
          ?T:ObligatorycontrolPROinterpretation.T:subj-ADJ-agreement.
          T?:Postsubjformation.R:Clauseformatie.T:subject-verbagreement.

**UITWERKEN**

Nog aanvullen: T:PPoverV; T:NPoverAdv; 
______________________________________________________________________________
$RL 15 
SENTENCE-subgrammar

import: CLAUSE
export: SENTENCE

controle-expressie: {R:NOwhshiftsubstitutie}.T:Shiftregels.
         R:Whshiftrelsubstitutie.Endclauseregels

R:Nowhshiftsubstitutie. Eigenlijk moet dit opgesplitst worden in:
     {R:Nowhshiftsubstitutie}.R:Negatie-introductieregels.
     T:Negatierechtbrei.{R:Nowhshiftsubstitutie}

Er kan immers per zin slechts een zinsnegator zijn, en gekoppeld aan de
negatieintroductie dient het een en ander veranderd te worden.

R:Nowhshiftsubstitutie substitueert frasen voor variabelen (argumenten
 en adverbialen) die niet later een shiftrel gaan dragen)

R:negatie-introductieregels introduceren _niet_ als zinsnegator.

T:negatierechtbrei voert een aantal operaties uit die tgv het introduceren
van _niet_ gepleegd moeten worden. bv. niet [ boeken ] --> [geen boeken] in
 de zin: Hij heeft niet boeken gelezen. (Deze zin is wel ok, maar alleen in
een kontrastieve lezing)

T:Shiftregels: deze regels verplaatsen een variabele of een constituent
die een variabele bevat (bv. prepobj/PP's) naar voor in de zin en kennen
er de relatie shiftrel aan toe. Ook wordt een shiftrel/N1 uit een ingebedde
frase (meestal een zin) naar voren in de hogere zin verplaatst. (succesief
cyclische verplaatsing), cf. Rosetta2. de variabelen zijn in de meeste 
gevallen gemarkeerd met een speciaal feature, m.n. +wh, of +d. alleen
in het geval van Topicalisatie in het Nederlands kan iedere constituent
bijna naar voren (we maken een onderscheid tussen topicalisatie en focussing)

R:Whshiftrelsubstitutie. deze regels introduceren geshifte elementen,
  en deze introduceren ook zgn Left-dislocated elementen (m.n. zinnen)
  eventueel te samen met hun plaatsinnemend pronomen, bv.
  shiftrel/var ik toch niet had gedacht -->

 leftdislocrel/SENT[ dat hij dat zou doen], shiftrel/dat subjrel/ik toch niet
 gedacht had (--> dat hij dat zou doen, dat had ik toch niet gedacht)
 
of:  
  leftdislocrel/SENT[ dat hij dat zou doen] subjrel/ik toch niet
 gedacht had (--> dat hij dat zou doen had ik toch niet gedacht)

R:Endclause-regels.=
    R?:Conjunctie-uitspelling.T:Verb-second.T:Conjunctiedeletie 

R?:conjunctie-uitspelling Deze transformatieklassse zorgt ervoor dat 
  afhankelijk van de mood en eventuele andere eigenschappen van de zin 
  (finiet, infinitief, al of niet _om_ etc,.) de juiste conjunctie, if any
  wordt uitgespeld.
T:Verb-second: Deze transformatie zet het finiete werkwoord op de tweede
  positie in de zin indien er geen conjunctie is uitgespeld.
T:Bepaalde conjucties kunnen nu al dan niet weggehaald worden, m.n. _of_ (bv.
  ik weet niet _wie_/ _wie of_ er komt 

