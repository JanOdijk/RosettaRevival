{*DUTCH}
 PROCEDURE commrules83_init;EXTERNAL;
{*
SUBGRAMMAR
PREPPFORMULATOPREPPPROP
FUNCTION PREPPFORMULATOPREPPPROP:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: FPPPPREPROSUBJECT
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH1:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TPPPPROSUBJECT
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH2:=result;
END;
                                                      FUNCTION ELEMGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RPPPSUBSTITUTION1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RPPPSUBSTITUTION2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RPPPSUBSTITUTION3
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      FUNCTION CONCGRAPH4:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RPPPSUBSTITUTION4
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH4:=result;
END;
                                                      FUNCTION CONCGRAPH5:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RPPPSUBSTITUTION5
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH5:=result;
END;
                                                      FUNCTION CONCGRAPH6:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RIDPPPSUBSTITUTION1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH6:=result;
END;
                                                      FUNCTION CONCGRAPH7:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RIDPPPSUBSTITUTION2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH7:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
AppendCtrlExpr(CONCGRAPH4,result);
AppendCtrlExpr(CONCGRAPH5,result);
AppendCtrlExpr(CONCGRAPH6,result);
AppendCtrlExpr(CONCGRAPH7,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH3:=result;
END;
                                                      FUNCTION ELEMGRAPH4:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: FPPPER
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH4:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH5:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TPPPASPECTNEUTRALIZATION
ELEMGRAPH5:=result;
END;
                                                      FUNCTION ELEMGRAPH6:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RPPPMOOD1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RPPPMOOD2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH6:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH7:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: FPREPREPNPARTICLEINTRO1
ELEMGRAPH7:=result;
END;
                                                      FUNCTION ELEMGRAPH8:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TPREPNPARTICLEINTRO1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH8:=result;
END;
                                                      FUNCTION ELEMGRAPH9:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RPPPNOPUNC
ELEMGRAPH9:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
AppendCtrlExpr(ELEMGRAPH2,result);
AppendCtrlExpr(ELEMGRAPH3,result);
AppendCtrlExpr(ELEMGRAPH4,result);
AppendCtrlExpr(ELEMGRAPH5,result);
AppendCtrlExpr(ELEMGRAPH6,result);
AppendCtrlExpr(ELEMGRAPH7,result);
AppendCtrlExpr(ELEMGRAPH8,result);
AppendCtrlExpr(ELEMGRAPH9,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
BEGIN
PREPPFORMULATOPREPPPROP:=GRAPH
END;
*
PREPPFORMULA
*
OPENPREPPPROP
CLOSEDPREPPPROP
*
}
{rule:}
{:FPPPPREPROSUBJECT}
 FUNCTION COMFPPPPREPROSUBJECT(Is:LISTREE_pStree):LISTREE_pstree;
EXTERNAL;
{*
FILTER
FPPPPREPROSUBJECT
1
PREPPFORMULA
}
{:FPPPPREPROSUBJECT}
{rule:}
{:TPPPPROSUBJECT}
 FUNCTION COMTPPPPROSUBJECT(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TPPPPROSUBJECT
*
*
1
PREPPFORMULA
PREPPFORMULA
}
{:TPPPPROSUBJECT}
{rule:}
{:FPPPER}
 FUNCTION COMFPPPER(Is:LISTREE_pStree):LISTREE_pstree;
EXTERNAL;
{*
FILTER
FPPPER
1
PREPPFORMULA
}
{:FPPPER}
{rule:}
{:RPPPMOOD1}
 FUNCTION COMRPPPMOOD1(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RPPPMOOD1
*
*
1
PREPPFORMULA
OPENPREPPPROP
}
{:RPPPMOOD1}
{rule:}
{:RPPPMOOD2}
 FUNCTION COMRPPPMOOD2(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RPPPMOOD2
*
*
1
PREPPFORMULA
CLOSEDPREPPPROP
}
{:RPPPMOOD2}
{rule:}
{:RPPPSUBSTITUTION1}
 FUNCTION COMRPPPSUBSTITUTION1(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RPPPSUBSTITUTION1
*
LEVEL
INTEGER
*
2
PREPPFORMULA
NP
PREPPFORMULA
}
{:RPPPSUBSTITUTION1}
{rule:}
{:RIDPPPSUBSTITUTION1}
 FUNCTION COMRIDPPPSUBSTITUTION1(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RIDPPPSUBSTITUTION1
*
LEVEL
INTEGER
*
2
PREPPFORMULA
NP
PREPPFORMULA
}
{:RIDPPPSUBSTITUTION1}
{rule:}
{:RPPPSUBSTITUTION2}
 FUNCTION COMRPPPSUBSTITUTION2(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RPPPSUBSTITUTION2
*
LEVEL
INTEGER
*
2
PREPPFORMULA
NP
PREPPFORMULA
}
{:RPPPSUBSTITUTION2}
{rule:}
{:RIDPPPSUBSTITUTION2}
 FUNCTION COMRIDPPPSUBSTITUTION2(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RIDPPPSUBSTITUTION2
*
LEVEL
INTEGER
*
2
PREPPFORMULA
NP
PREPPFORMULA
}
{:RIDPPPSUBSTITUTION2}
{rule:}
{:RPPPSUBSTITUTION3}
 FUNCTION COMRPPPSUBSTITUTION3(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RPPPSUBSTITUTION3
*
LEVEL
INTEGER
*
2
PREPPFORMULA
PREPP
PREPPFORMULA
}
{:RPPPSUBSTITUTION3}
{rule:}
{:RPPPSUBSTITUTION4}
 FUNCTION COMRPPPSUBSTITUTION4(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RPPPSUBSTITUTION4
*
LEVEL
INTEGER
*
2
PREPPFORMULA
ADVP
PREPPFORMULA
}
{:RPPPSUBSTITUTION4}
{rule:}
{:RPPPSUBSTITUTION5}
 FUNCTION COMRPPPSUBSTITUTION5(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RPPPSUBSTITUTION5
*
LEVEL
INTEGER
*
2
PREPPFORMULA
NP
PREPPFORMULA
}
{:RPPPSUBSTITUTION5}
{rule:}
{:TPPPASPECTNEUTRALIZATION}
 FUNCTION COMTPPPASPECTNEUTRALIZATION(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TPPPASPECTNEUTRALIZATION
*
*
1
PREPPFORMULA
PREPPFORMULA
}
{:TPPPASPECTNEUTRALIZATION}
{rule:}
{:RPPPNOPUNC}
 FUNCTION COMRPPPNOPUNC(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RPPPNOPUNC
*
*
1


}
{:RPPPNOPUNC}

