{*DUTCH}
 PROCEDURE commrules119_init;EXTERNAL;
{*
SUBGRAMMAR
COORDINATION
FUNCTION COORDINATION:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RCOORDS
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSIMPLEPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RCORRPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      FUNCTION CONCGRAPH4:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RCORROPENADJPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH4:=result;
END;
                                                      FUNCTION CONCGRAPH5:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RCORRCLOSEDADJPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH5:=result;
END;
                                                      FUNCTION CONCGRAPH6:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RCORRADJPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH6:=result;
END;
                                                      FUNCTION CONCGRAPH7:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RCORRNPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH7:=result;
END;
                                                      FUNCTION CONCGRAPH8:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RCORROPENADVPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH8:=result;
END;
                                                      FUNCTION CONCGRAPH9:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSIMPLEOPENPPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH9:=result;
END;
                                                      FUNCTION CONCGRAPH10:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSIMPLEADVPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH10:=result;
END;
                                                      FUNCTION CONCGRAPH11:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSIMPLEOPENADVPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH11:=result;
END;
                                                      FUNCTION CONCGRAPH12:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSIMPLECLOSEDADVPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH12:=result;
END;
                                                      FUNCTION CONCGRAPH13:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSIMPLEOPENADJPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH13:=result;
END;
                                                      FUNCTION CONCGRAPH14:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSIMPLEADJPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH14:=result;
END;
                                                      FUNCTION CONCGRAPH15:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSIMPLECLOSEDADJPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH15:=result;
END;
                                                      FUNCTION CONCGRAPH16:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSIMPLENPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH16:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
AppendCtrlExpr(CONCGRAPH4,result);
AppendCtrlExpr(CONCGRAPH5,result);
AppendCtrlExpr(CONCGRAPH6,result);
AppendCtrlExpr(CONCGRAPH7,result);
AppendCtrlExpr(CONCGRAPH8,result);
AppendCtrlExpr(CONCGRAPH9,result);
AppendCtrlExpr(CONCGRAPH10,result);
AppendCtrlExpr(CONCGRAPH11,result);
AppendCtrlExpr(CONCGRAPH12,result);
AppendCtrlExpr(CONCGRAPH13,result);
AppendCtrlExpr(CONCGRAPH14,result);
AppendCtrlExpr(CONCGRAPH15,result);
AppendCtrlExpr(CONCGRAPH16,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH1:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RCOORDITS
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RITSKPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RITSCPPCOORD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
AppendCtrlExpr(ELEMGRAPH2,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
BEGIN
COORDINATION:=GRAPH
END;
*
COORD
*
SENTENCE
PREPP
NP
ADVP
OPENPREPPPROP
CLOSEDPREPPPROP
OPENNPPROP
CLOSEDNPPROP
OPENADJPPROP
CLOSEDADJPPROP
OPENADVPPROP
CLOSEDADVPPROP
ADJPPROP
*
}
{rule:}
{:RSIMPLEOPENADJPPCOORD}
 FUNCTION COMRSIMPLEOPENADJPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLEOPENADJPPCOORD
*
*
3
COORD
OPENADJPPROP
OPENADJPPROP
OPENADJPPROP
}
{:RSIMPLEOPENADJPPCOORD}
{rule:}
{:RSIMPLECLOSEDADJPPCOORD}
 FUNCTION COMRSIMPLECLOSEDADJPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLECLOSEDADJPPCOORD
*
*
3
COORD
CLOSEDADJPPROP
CLOSEDADJPPROP
CLOSEDADJPPROP
}
{:RSIMPLECLOSEDADJPPCOORD}
{rule:}
{:RSIMPLEADJPPCOORD}
 FUNCTION COMRSIMPLEADJPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLEADJPPCOORD
*
*
3
COORD
ADJPPROP
ADJPPROP
ADJPPROP
}
{:RSIMPLEADJPPCOORD}
{rule:}
{:RSIMPLEOPENADVPPCOORD}
 FUNCTION COMRSIMPLEOPENADVPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLEOPENADVPPCOORD
*
*
3
COORD
OPENADVPPROP
OPENADVPPROP
OPENADVPPROP
}
{:RSIMPLEOPENADVPPCOORD}
{rule:}
{:RSIMPLECLOSEDADVPPCOORD}
 FUNCTION COMRSIMPLECLOSEDADVPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLECLOSEDADVPPCOORD
*
*
3
COORD
CLOSEDADVPPROP
CLOSEDADVPPROP
CLOSEDADVPPROP
}
{:RSIMPLECLOSEDADVPPCOORD}
{rule:}
{:RSIMPLEOPENPPPCOORD}
 FUNCTION COMRSIMPLEOPENPPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLEOPENPPPCOORD
*
*
3
COORD
OPENPREPPPROP
OPENPREPPPROP
OPENPREPPPROP
}
{:RSIMPLEOPENPPPCOORD}
{rule:}
{:RSIMPLECLOSEDPPPCOORD}
 FUNCTION COMRSIMPLECLOSEDPPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLECLOSEDPPPCOORD
*
*
3
COORD
CLOSEDPREPPPROP
CLOSEDPREPPPROP
CLOSEDPREPPPROP
}
{:RSIMPLECLOSEDPPPCOORD}
{rule:}
{:RSIMPLEPPCOORD}
 FUNCTION COMRSIMPLEPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLEPPCOORD
*
*
3
COORD
PREPP
PREPP
PREPP
}
{:RSIMPLEPPCOORD}
{rule:}
{:RSIMPLEADVPCOORD}
 FUNCTION COMRSIMPLEADVPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLEADVPCOORD
*
*
3
COORD
ADVP
ADVP
ADVP
}
{:RSIMPLEADVPCOORD}
{rule:}
{:RSIMPLENPCOORD}
 FUNCTION COMRSIMPLENPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSIMPLENPCOORD
*
*
3
COORD
NP
NP
NP
}
{:RSIMPLENPCOORD}
{rule:}
{:RITSKPPCOORD}
 FUNCTION COMRITSKPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RITSKPPCOORD
*
*
2
PREPP
PREPP
PREPP
}
{:RITSKPPCOORD}
{rule:}
{:RITSCPPCOORD}
 FUNCTION COMRITSCPPCOORD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RITSCPPCOORD
*
*
2
PREPP
PREPP
PREPP
}
{:RITSCPPCOORD}
{rule:}
{:RCOORDS}
 FUNCTION COMRCOORDS(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RCOORDS
*
*
3
COORD
SENTENCE
SENTENCE
SENTENCE
}
{:RCOORDS}
{rule:}
{:RCOORDITS}
 FUNCTION COMRCOORDITS(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RCOORDITS
*
*
2
SENTENCE
SENTENCE
SENTENCE
}
{:RCOORDITS}

