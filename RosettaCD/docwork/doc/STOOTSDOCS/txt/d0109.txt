$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$AC @

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta3.linguistics

    ---------------------------------------------------------







         Title        :  The organisation of the ADJPProp-subgrammar

         Author       :  Franciska de Jong









         Doc.Nr       :  109

         Date         :  18/08/86

         Status       :  concept

         Supersedes   :  

         Distribution :  iso's

         Clearance    :  project

         Keywords     :  adjective, ADJP, ADJPProp
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Copyright (c) Nederlandse Philips Bedrijven B.V.
$PL 274,16
$LD 5
$OP SH=U,HY=1,la=E,ph=r,pn=c,AN=N
$np 1
$UC `
$SC ^_
$AC @
$ph Rosetta          Doc.nr: 109                       date:18/08/86
$C1 Introduction
$ This document is a proposal for organisation of the ADJPProp-subgrammar. It is
meant to deal with the phrases with a head that traditionally belong to the
category of adjectives. In contrast to the proposal for ADVPs in doc. 103 it
will be assumed that adjectival phrases have an XPProp-level. That is, a top
node ADJPProp is supposed to dominate the intermediate level ADJP. 
In other
respects this document follows the general strategy adopted for clausal and 
adverbial constructions. For example, the startrules belonging to the
ADJPProp-subgrammar will introduce all arguments (including 
the subject var) at once
and the surface tree resulting from the startrules has ADJPProp as a top node.
The intermediate ADJP-level is the result of the patternrules.$ 

$ The ideas with respect to head-modification as presentend in doc. 118 are
not incorporated here. The conventions and conditions of doc. 101 (Jan L.)
are acknowledged.$
$ An appendix is added with some exemplifying derivations.$ 
$np
$c1 The control expressions

`Dutch`

import: `BADJ`, VAR, ADVP, PP, NP, QP, CLAUSE, SENT, VERBPProp
export: ADJPProp

control expression:

RC: startadjpproprules.TC: adjpatternrules.{RC: modrules}.[RC: degreemodrules].
[TC: QP-hopping].FTi.{TC: complextraprules}.FTj.[TC: morfadaprules].FTk.
{RC: substitutionrules}

`English`

import: `BADJ`, VAR, ADVP, PP, NP, QP, SENT, VERBPProp
export: ADJPProp

RC: startadjpproprules.TC: adjpatternrules.{RC: modrules}.[RC: degreemodrules].
[TC: QP-hopping].FTi.{TC: complextraprules}.FTj.[TC: morfadaprules].FTk.
{RC: substitutionrules}

`Spanish`

import: `BADJ`, VAR, ADVP, PP, NP, QP, SENT, VERBPProp
export: ADJPProp

RC: startadjpproprules.TC: adjpatternrules.{RC: modrules}.[RC: degreemodrules].
[TC: QP-hopping].FTi.{TC: complextraprules}.FTj.{RC: substitutionrules}

$np
$c1 The function of the various rule classes

A. RC:startadjpproprules
import: BADJ, VAR
export: ADJPProp

$ In accordance with general iso-strategy the 
rules of RC:startadjpproprules 
which build the ADJPProp introduce a subject-var for
every ADJP. Dependent on whether the phrase to be derived 
occurs as a modifier or as a small clause, this subject might be replaced
as an effect of a modification-rule within the NP-subgrammar, or by a
substitution rule, e.g. to derive the small clause `Jan leuk` in 
`Mary vindt Jan leuk`.$
$ In addition to the subject-var 
various kinds of  vars may be introduced by the
startadjpproprules, namely for expresions for which the adjectival head is 
subcategorized. Examples are given in (i)and (ii). In (i) also
examples of the so-called though-complements are included. 
Cf. also the examples in doc. 81 (external specification).$

   (i) a. Piet is `de drukte` beu 
       b. Piet is dol `op kaas`
       c. Piet bang `voor muizen`
       d. Piet is bang `muizen aan te treffen`
       e. Piet is (`ernaar`) benieuwd `wie er komt`
       f. Piet is bereid (`om`) `te helpen`
       g. Hij is geschikt `om mee te tennissen`
       h. John is easy `to please`
       i. De lamp is leuk `om op te hangen`

  (ii) a. the room was full `of books`

B. TC:advpatternrules
import: AdjPProp
export: AdjPProp

$ This TC accounts for the introduction of intermediate ADJP-level and the
specification of the relations of the elements introduced by the startrules.
The relationnames obj, Prepobj and compl will be used for the cases (i-ii).
Note that in this document the complement concept will be used for phrases with
a dependency that is not comparable with the dependency between head and
arguments within clause-like structures, at least not a at first sight. This
strategy implies a compl-status for (i g-i) and (iia). It might turn out to be
useful to standardize terminology in this respect.$ 

C. RC:degreemodrules
import: ADVP, QP.
export: AdjPProp

$ This RC effectuates the import of degree-expressions. As shown in
the examples (iii) both ADVPs as QPs can fulfil this role.$

         (iii) a. `te` groot, 
               b. `gezellig` druk 
               c. `drie meter` lang
               d.  `des te meer` blase@' (met incorporatie: `des te` mooi`er`)
               e.  groot `genoeg` 
               f. `het meest` gebruikelijk

$ Within the surface tree degreemodifiers are treated as expressions that are
modifiers to the ADJP-head. That is, they are a sister of the head, with
a modifier relation (relation name: mod) 
to the dominating ADJP-node.$
$ As an effect of a  degreemodrule subject vars that may occur in the import 
phrase (e.g. in case of an ADVP such as `te`) will
no longer occur within the surface tree. (Cf. doc. 103.)$

D. RC: modrules
import: PPProp, NP, CLAUSE
export: AsjPProp

$ This RC effectuates the 
introduction of non-degree modifiers for cases as in (iv).$

      (iv) a. ziek `van verdriet`
          b. rood `met witte stippen`
          c. te groot `voor deze zaal`
          d. Piet is te lui `om te helpen`  NB. `om` is oblig. Cf. (i-f)
          e. Die foto is `hem` dierbaar 
          f. De opgave is lastig `voor ons`

$ The modifiers can be of various syntactic categories. Note that in (ivd)
the occurrence of a modifier is dependent on `te`. Therefore the ordering 
between the degreemodrules and modrules is not arbitrary. Note also that 
on the sentential level some of 
these modifiers can be submitted to extraposition.
The name assumed for the relation that links 
these modifiers to the ADJP-node is `compl`. In (ivd) and (ive) a modifier/
compl-status is not the most obvious solution. Probably an 
argument-status is more suitable (relname: obj/prepobj). 
A more definite proposal 
is dependent on the amount of detail
required within the adj-patterns.$

$ Example (ivd) is exceptional in Dutch in that 
it contains a modifier that precedes the adjective
(while it cannot be interpreted as a degree-modifier). 
Therefore it should be
reckoned with that there is no fixed position for phrases like the ones under 
discussion here and that a subset of
modifiers can occur in pre-adjectival position as well. Possibly a 
movement-tranformation can account for less frequent surface orderings in 
Dutch. 
More examples are 
needed to decide how an increase of ambiguities can be avoided.
Also more information about Spanish examples is needed to decide whether such a 
transformation is required for the other languages as well.$ 

E. TC: QP-hopping
import: AdjPProp
export: AdjPProp

$ TC QP-hopping deals with the 
movement of QPs such as `genoeg`, `zat`, `enough`
to the right of the ADJP. For all three languages it is assumed that
in general QPs
are inserted in a position preceding the adjectival head, so to derive
the examples in (v) an additional rule is required. 
This indirect account of the ordering in (v) is inevitable under 
the assumption that the ADJPs in (vi) are considered to contain a complex QP.$

        (v) a. de tekst is lang `zat`
            b. de soep is pittig `genoeg`
            c. the paper is long `enough`

       (vi) a. de tekst is `nauwelijks` lang `genoeg`
            c. the paper is `hardly` long `enough`

$ The Spanish form `bastante` occurs only in preadjectival position.$

F. TC: complextraprules
import: AdjPProp
export: AdjPProp

$ This TC (complement-extrapositionrules) accounts for the
rightward movement of embedded complements. An adjective  
that is modified by a
preceding 
complemented adverb, e.g. a degree-adverb, 
requires that the complement be moved to the
right such that it follows the adjective instead of preceding it. The adverb
on which the complement is dependent needs not be submitted to rightward
movement.$ 
$ Constructions with more than one complement which might occur in
case of double embeddeding, e.g. in `zo veel langer dan gemiddeld dat hij
overal opvalt`, extraposition can apply to all complements:$ 

  (vii) Omdat hij zoveel langer is dan gemiddeld dat hij overal opvalt, .....

$ This implies a recursive application of the rules. On the other hand,
application is obligatory: *`minder dan gemiddeld lang`. The notation available
thusfar can not express this restricted form of non-optionality. The question
marks in the control expression indicate that a suitable notation is not yet
available.$ 
$ Note that some complements do not remain in the position to which
the extraposition rules within the ADVPProp-subgrammar 
move them. Within the clause
that contains the proliferated ADVP they might again be moved to the right.$ 

G. TC:morfadaprules
import: AdjPProp
export: AdjPProp

$ This RC accounts for the spelling out, cq. morphological incorporation of
degreemodifiers. Examples:$
                       meer lang --> langer, more long --> longer
                       muy mucho --> muchi@'simo
                       tan mucho --> tanto

H. RC: substitutionrules
import: AdjPProp, NP, CLAUSE, SENT
export: AdjPProp

$ This RC deals with the substitution of vars. Two cases should be
distinguished. Argument vars and vars embedded in imported categories. For the
former case substitution is possible -and in fact required for propositonal
arguments- within the ADJPProp-subgrammar, but for non-propositional arguments
substitution can also be effected on the sentential level. If an embedded var
occurs and if it not too deeply embedded (a measure is to be established), a
quantificational substituent should not be introduced within the ADJPProp, but
rather on sentential level.$ 
$np
$c1 The import of the AdjPProp-subgrammar export within other subgrammars

$ The AdjPPropsubgrammar export can serve as import for several subgrammars:$

a. as adjuct within the NP-subgrammar as a modifier dominated by the 
   intermediate level (called CN in doc. 41)

           - De blauwe muur
           - Het heel mooie huis
           - Een veel te hoge fiets
           - Een sterker argument dan dit

b. as obligatory import within the AdjPProp-to-AdjPProp-subgrammar

$c1 Required attributes and attribute values
$ For Rosetta3 the following attributes/attribute values should be 
added to the Rosetta2-set.$

For BADJs in general:
    - adjppattern to indicate the number of (syntactic) vars 
        advppattern  : (0, 1,...)
    - .....

For Dutch basic adverbs and adjectives: 
    - superlative-incorporation 
         superinc: (possible, impossible, obligatory, ....)
    - comparative-incorporation 
         comparinc: (possible, impossible, obligatory, ....)
    - inflectional -`e`:
         evorm: true, false

For English basic adverbs and adjectives: 
    - superlative-incorporation 
         superinc: (possible, impossible, obligatory, ....)
    - comparative-incorporation 
         comparinc: (possible, impossible, obligatory, ....)
    - .....

For Spanish  basic adverbs and adjectives: 
    - muy-incorporation
         muyinc : (possible, impossible, obligatory, .....)
    - .....
$np
$ap A,Some derivations
NB. Most records are left out

(1) Simple ADJPs: groot 

import: BADJ *groot*, VARi
RC: startadvprules

        ADJPProp

    ADJ        VARi        

    BAJV 
  *groot* 


TC: advpatternrules
 
         ADJPProp

    subj         pred

    VARi         ADJP

                 head

                 ADJ

                 BADJ
                *groot*

(2) Complex ADJPs: a. groot genoeg
                   b. erg dol op vis
                   c. blauw met een gele strepen

(2a) `groot genoeg`
import: ADJPProp *groot*, cf. above
        QP *genoeg*
RC: degreemodrules

$rl 12
         ADJPProp

    subj         pred

    VARi         ADJP

            mod      head

             QP      ADJ

                     BADJ
         *genoeg*   *groot*

TC: QP-hopping

$rl 10
         ADJPProp

    subj         pred

    VARi         ADJP

            head     mod

            ADJ       QP      

            BADJ
          *groot*  *genoeg*


(2b) `erg dol op (vis)`

import: BADJ *dol*, VAR5, VAR7
RC: startadvprules

        ADJPProp
 
    ADJ      VAR5      VAR7

    BAJV 
    *dol* 


TC: adjpatternrules

         ADJPProp

    subj         pred

    VAR5         ADJP

            head     prepobj

            ADJ        PP      

            BADJ    
           *dol*    *op VAR7*


import: ADVP *erg*
RC: degreemodrules

         ADJPProp

    subj         pred

    VAR5         ADJP

        mod      head    prepobj

        ADVP     ADJ       PP       

                 BADJ    
        *erg*    *dol*  *op VAR7*


import: NP *vis*
RC: substitutionrules (aangenomen dat `vis` hier niet quantificerend is)

      ADJPProp

    subj         pred

    VAR5         ADJP

        mod      head    prepobj

        ADVP     ADJ       PP       

                 BADJ    
        *erg*    *dol*   *op vis*

(2c) `blauw met gele strepen`

import: BAJV *blauw*, VAR6
RC: startadvprules

        ADJPProp
 
    ADJ        VAR6

    BAJV 
  *blauw* 


TC: advpatternrules
 
         ADJPProp

    subj         pred

    VARi         ADJP

                 head

                 ADJ

                 BADJ
                *blauw*

import: PP *met (gele strepen)*
RC: modrules

         ADJPProp

    subj         pred

    VARi         ADJP

           head        mod

           ADJ          PP

           BADJ
          *blauw*    *met gele strepen*
                       *met VARj*
                   


