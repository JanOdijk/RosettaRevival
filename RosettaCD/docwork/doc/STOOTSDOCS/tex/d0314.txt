R0314.tex



\documentstyle{Rosetta}
%\includeonly{doc:R0314_B}
\setlength{\parindent}{0 in}
\begin{document}
   \RosTopic{Rosetta3.Doc.Linguistics.Dutch}
   \RosTitle{The Dutch XPPROPtoCLAUSE Subgrammar}
   \RosAuthor{Jan Odijk, Lisette Appelo}
   \RosDocNr{R0314}
   \RosDate{\today}
   \RosStatus{concept}
   \RosSupersedes{-}
   \RosDistribution{Project}
   \RosClearance{Project}
   \RosKeywords{Syntax, Mrules, Subgrammars, XPPROPtoCLAUSE}
   \MakeRosTitle


\input{[odijkje.mrules]mrudocdef}
\include{doc:R0314_A}
\include{doc:R0314_B}
\include{doc:R0314_C}
\end{document}
ROSETTA.sty
\typeout{Document Style 'Rosetta'. Version 0.4 - released  24-DEC-1987}
% 24-DEC-1987:  Date of copyright notice changed
\def\@ptsize{1}
\@namedef{ds@10pt}{\def\@ptsize{0}}
\@namedef{ds@12pt}{\def\@ptsize{2}} 
\@twosidetrue
\@mparswitchtrue
\def\ds@draft{\overfullrule 5pt} 
\@options
\input art1\@ptsize.sty\relax


\def\labelenumi{\arabic{enumi}.} 
\def\theenumi{\arabic{enumi}} 
\def\labelenumii{(\alph{enumii})}
\def\theenumii{\alph{enumii}}
\def\p@enumii{\theenumi}
\def\labelenumiii{\roman{enumiii}.}
\def\theenumiii{\roman{enumiii}}
\def\p@enumiii{\theenumi(\theenumii)}
\def\labelenumiv{\Alph{enumiv}.}
\def\theenumiv{\Alph{enumiv}} 
\def\p@enumiv{\p@enumiii\theenumiii}
\def\labelitemi{$\bullet$}
\def\labelitemii{\bf --}
\def\labelitemiii{$\ast$}
\def\labelitemiv{$\cdot$}
\def\verse{
   \let\\=\@centercr 
   \list{}{\itemsep\z@ \itemindent -1.5em\listparindent \itemindent 
      \rightmargin\leftmargin\advance\leftmargin 1.5em}
   \item[]}
\let\endverse\endlist
\def\quotation{
   \list{}{\listparindent 1.5em
      \itemindent\listparindent
      \rightmargin\leftmargin \parsep 0pt plus 1pt}\item[]}
\let\endquotation=\endlist
\def\quote{
   \list{}{\rightmargin\leftmargin}\item[]}
\let\endquote=\endlist
\def\descriptionlabel#1{\hspace\labelsep \bf #1}
\def\description{
   \list{}{\labelwidth\z@ \itemindent-\leftmargin
      \let\makelabel\descriptionlabel}}
\let\enddescription\endlist


\def\@begintheorem#1#2{\it \trivlist \item[\hskip \labelsep{\bf #1\ #2}]}
\def\@endtheorem{\endtrivlist}
\def\theequation{\arabic{equation}}
\def\titlepage{
   \@restonecolfalse
   \if@twocolumn\@restonecoltrue\onecolumn
   \else \newpage
   \fi
   \thispagestyle{empty}\c@page\z@}
\def\endtitlepage{\if@restonecol\twocolumn \else \newpage \fi}
\arraycolsep 5pt \tabcolsep 6pt \arrayrulewidth .4pt \doublerulesep 2pt 
\tabbingsep \labelsep 
\skip\@mpfootins = \skip\footins
\fboxsep = 3pt \fboxrule = .4pt 


\newcounter{part}
\newcounter {section}
\newcounter {subsection}[section]
\newcounter {subsubsection}[subsection]
\newcounter {paragraph}[subsubsection]
\newcounter {subparagraph}[paragraph]
\def\thepart{\Roman{part}} \def\thesection {\arabic{section}}
\def\thesubsection {\thesection.\arabic{subsection}}
\def\thesubsubsection {\thesubsection .\arabic{subsubsection}}
\def\theparagraph {\thesubsubsection.\arabic{paragraph}}
\def\thesubparagraph {\theparagraph.\arabic{subparagraph}}


\def\@pnumwidth{1.55em}
\def\@tocrmarg {2.55em}
\def\@dotsep{4.5}
\setcounter{tocdepth}{3}
\def\tableofcontents{\section*{Contents\markboth{}{}}
\@starttoc{toc}}
\def\l@part#1#2{
   \addpenalty{-\@highpenalty}
   \addvspace{2.25em plus 1pt}
   \begingroup
      \@tempdima 3em \parindent \z@ \rightskip \@pnumwidth \parfillskip
      -\@pnumwidth {\large \bf \leavevmode #1\hfil \hbox to\@pnumwidth{\hss #2}}
      \par \nobreak
   \endgroup}
\def\l@section#1#2{
   \addpenalty{-\@highpenalty}
   \addvspace{1.0em plus 1pt}
   \@tempdima 1.5em
   \begingroup
      \parindent \z@ \rightskip \@pnumwidth 
      \parfillskip -\@pnumwidth 
      \bf \leavevmode #1\hfil \hbox to\@pnumwidth{\hss #2}
      \par
   \endgroup}
\def\l@subsection{\@dottedtocline{2}{1.5em}{2.3em}}
\def\l@subsubsection{\@dottedtocline{3}{3.8em}{3.2em}}
\def\l@paragraph{\@dottedtocline{4}{7.0em}{4.1em}}
\def\l@subparagraph{\@dottedtocline{5}{10em}{5em}}
\def\listoffigures{
   \section*{List of Figures\markboth{}{}}
   \@starttoc{lof}}
   \def\l@figure{\@dottedtocline{1}{1.5em}{2.3em}}
   \def\listoftables{\section*{List of Tables\markboth{}{}}
   \@starttoc{lot}}
\let\l@table\l@figure


\def\thebibliography#1{
   \addcontentsline{toc}
   {section}{References}\section*{References\markboth{}{}}
   \list{[\arabic{enumi}]}
        {\settowidth\labelwidth{[#1]}\leftmargin\labelwidth
         \advance\leftmargin\labelsep\usecounter{enumi}}}
\let\endthebibliography=\endlist


\newif\if@restonecol
\def\theindex{
   \@restonecoltrue\if@twocolumn\@restonecolfalse\fi
   \columnseprule \z@
   \columnsep 35pt\twocolumn[\section*{Index}]
   \markboth{}{}
   \thispagestyle{plain}\parindent\z@
   \parskip\z@ plus .3pt\relax
   \let\item\@idxitem}
\def\@idxitem{\par\hangindent 40pt}
\def\subitem{\par\hangindent 40pt \hspace*{20pt}}
\def\subsubitem{\par\hangindent 40pt \hspace*{30pt}}
\def\endtheindex{\if@restonecol\onecolumn\else\clearpage\fi}
\def\indexspace{\par \vskip 10pt plus 5pt minus 3pt\relax}


\def\footnoterule{
   \kern-1\p@ 
   \hrule width .4\columnwidth 
   \kern .6\p@} 
\long\def\@makefntext#1{
   \@setpar{\@@par\@tempdima \hsize 
   \advance\@tempdima-10pt\parshape \@ne 10pt \@tempdima}\par
   \parindent 1em\noindent \hbox to \z@{\hss$^{\@thefnmark}$}#1}


\setcounter{topnumber}{2}
\def\topfraction{.7}
\setcounter{bottomnumber}{1}
\def\bottomfraction{.3}
\setcounter{totalnumber}{3}
\def\textfraction{.2}
\def\floatpagefraction{.5}
\setcounter{dbltopnumber}{2}
\def\dbltopfraction{.7}
\def\dblfloatpagefraction{.5}
\long\def\@makecaption#1#2{
   \vskip 10pt 
   \setbox\@tempboxa\hbox{#1: #2}
   \ifdim \wd\@tempboxa >\hsize \unhbox\@tempboxa\par
   \else \hbox to\hsize{\hfil\box\@tempboxa\hfil} 
   \fi}
\newcounter{figure}
\def\thefigure{\@arabic\c@figure}
\def\fps@figure{tbp}
\def\ftype@figure{1}
\def\ext@figure{lof}
\def\fnum@figure{Figure \thefigure}
\def\figure{\@float{figure}}
\let\endfigure\end@float
\@namedef{figure*}{\@dblfloat{figure}}
\@namedef{endfigure*}{\end@dblfloat}
\newcounter{table}
\def\thetable{\@arabic\c@table}
\def\fps@table{tbp}
\def\ftype@table{2}
\def\ext@table{lot}
\def\fnum@table{Table \thetable}
\def\table{\@float{table}}
\let\endtable\end@float
\@namedef{table*}{\@dblfloat{table}}
\@namedef{endtable*}{\end@dblfloat}


\def\maketitle{
   \par
   \begingroup
      \def\thefootnote{\fnsymbol{footnote}}
      \def\@makefnmark{\hbox to 0pt{$^{\@thefnmark}$\hss}} 
      \if@twocolumn \twocolumn[\@maketitle] 
      \else \newpage \global\@topnum\z@ \@maketitle
      \fi
      \thispagestyle{plain}
      \@thanks
   \endgroup
   \setcounter{footnote}{0}
   \let\maketitle\relax
   \let\@maketitle\relax
   \gdef\@thanks{}
   \gdef\@author{}
   \gdef\@title{}
   \let\thanks\relax}
\def\@maketitle{
   \newpage
   \null
   \vskip 2em
   \begin{center}{\LARGE \@title \par}
      \vskip 1.5em
      {\large \lineskip .5em \begin{tabular}[t]{c}\@author \end{tabular}\par} 
      \vskip 1em {\large \@date}
   \end{center}
   \par
   \vskip 1.5em} 
\def\abstract{
   \if@twocolumn \section*{Abstract}
   \else
      \small 
      \begin{center} {\bf Abstract\vspace{-.5em}\vspace{0pt}} \end{center}
      \quotation 
   \fi}
\def\endabstract{\if@twocolumn\else\endquotation\fi}


\mark{{}{}} 
\if@twoside
   \def\ps@headings{
      \def\@oddfoot{Rosetta Doc. \@RosDocNr\hfil \@RosDate}
      \def\@evenfoot{Rosetta Doc. \@RosDocNr\hfil \@RosDate}
      \def\@evenhead{\rm\thepage\hfil \sl \rightmark}
      \def\@oddhead{\hbox{}\sl \leftmark \hfil\rm\thepage}
      \def\sectionmark##1{\markboth {}{}}
      \def\subsectionmark##1{}}
\else
   \def\ps@headings{
      \def\@oddfoot{Rosetta Doc. \@RosDocNr\hfil \@RosDate}
      \def\@evenfoot{Rosetta Doc. \@RosDocNr\hfil \@RosDate}
      \def\@oddhead{\hbox{}\sl \rightmark \hfil \rm\thepage}
      \def\sectionmark##1{\markboth {}{}}
      \def\subsectionmark##1{}}
\fi
\def\ps@myheadings{
   \def\@oddhead{\hbox{}\sl\@rhead \hfil \rm\thepage}
   \def\@oddfoot{}
   \def\@evenhead{\rm \thepage\hfil\sl\@lhead\hbox{}}
   \def\@evenfoot{}
   \def\sectionmark##1{}
   \def\subsectionmark##1{}}


\def\today{
   \ifcase\month\or January\or February\or March\or April\or May\or June\or
      July\or August\or September\or October\or November\or December
   \fi
   \space\number\day, \number\year}


\ps@plain \pagenumbering{arabic} \onecolumn \if@twoside\else\raggedbottom\fi 




% the Rosetta title page
\newcommand{\MakeRosTitle}{
   \begin{titlepage}
      \begin{large}
	 \begin{figure}[t]
	    \begin{picture}(405,100)(0,0)
	       \put(0,100){\line(1,0){404}}
	       \put(0,75){Project {\bf Rosetta}}
	       \put(93.5,75){:}
	       \put(108,75){Machine Translation}
	       \put(0,50){Topic}
	       \put(93.5,50){:}
	       \put(108,50){\@RosTopic}
	       \put(0,30){\line(1,0){404}}
	    \end{picture}
	 \end{figure}
	 \bigskip
	 \bigskip
	 \begin{list}{-}{\setlength{\leftmargin}{3.0cm}
			 \setlength{\labelwidth}{2.7cm}
			 \setlength{\topsep}{2cm}}
	    \item [{\rm Title \hfill :}] {{\bf \@RosTitle}}
	    \item [{\rm Author \hfill :}] {\@RosAuthor}
	    \bigskip
	    \bigskip
	    \bigskip
	    \item [{\rm Doc.Nr. \hfill :}] {\@RosDocNr}
	    \item [{\rm Date \hfill :}] {\@RosDate}
	    \item [{\rm Status \hfill :}] {\@RosStatus}
	    \item [{\rm Supersedes \hfill :}] {\@RosSupersedes}
	    \item [{\rm Distribution \hfill :}] {\@RosDistribution}
	    \item [{\rm Clearance \hfill :}] {\@RosClearance}
	    \item [{\rm Keywords \hfill :}] {\@RosKeywords}
	 \end{list}
      \end{large}
      \title{\@RosTitle}
      \begin{figure}[b]
	 \begin{picture}(404,64)(0,0)
	    \put(0,64){\line(1,0){404}}
	    \put(0,-4){\line(1,0){404}}
	    \put(0,59){\line(1,0){42}}
	    \begin{small}
	    \put(3,48){\sf PHILIPS}
	    \end{small}
	    \put(0,23){\line(0,1){36}}
	    \put(42,23){\line(0,1){36}}
	    \put(21,23){\oval(42,42)[bl]}
	    \put(21,23){\oval(42,42)[br]}
	    \put(21,23){\circle{40}}
	    \put(4,33){\line(1,0){10}}
	    \put(9,28){\line(0,1){10}}
	    \put(9,36){\line(1,0){6}}
	    \put(12,33){\line(0,1){6}}
	    \put(29,13){\line(1,0){10}}
	    \put(34,8){\line(0,1){10}}
	    \put(28,10){\line(1,0){6}}
	    \put(31,7){\line(0,1){6}}

	    \put(1,21){\line(1,0){0.5}}
	    \put(1.5,21.3){\line(1,0){0.5}}
	    \put(2,21.6){\line(1,0){0.5}}
	    \put(2.5,21.9){\line(1,0){0.5}}
	    \put(3,22.1){\line(1,0){0.5}}
	    \put(3.5,22.3){\line(1,0){0.5}}
	    \put(4,22.5){\line(1,0){0.5}}
	    \put(4.5,22.7){\line(1,0){0.5}}
	    \put(5,22.8){\line(1,0){0.5}}
	    \put(5.5,22.9){\line(1,0){0.5}}
	    \put(6,23){\line(1,0){0.5}}
	    \put(6.5,22.9){\line(1,0){0.5}}
	    \put(7,22.8){\line(1,0){0.5}}
	    \put(7.5,22.7){\line(1,0){0.5}}
	    \put(8,22.5){\line(1,0){0.5}}
	    \put(8.5,22.3){\line(1,0){0.5}}
	    \put(9,22.1){\line(1,0){0.5}}
	    \put(9.5,21.9){\line(1,0){0.5}}
	    \put(10,21.6){\line(1,0){0.5}}
	    \put(10.5,21.3){\line(1,0){0.5}}

	    \put(1,23){\line(1,0){0.5}}
	    \put(1.5,23.3){\line(1,0){0.5}}
	    \put(2,23.6){\line(1,0){0.5}}
	    \put(2.5,23.9){\line(1,0){0.5}}
	    \put(3,24.1){\line(1,0){0.5}}
	    \put(3.5,24.3){\line(1,0){0.5}}
	    \put(4,24.5){\line(1,0){0.5}}
	    \put(4.5,24.7){\line(1,0){0.5}}
	    \put(5,24.8){\line(1,0){0.5}}
	    \put(5.5,24.9){\line(1,0){0.5}}
	    \put(6,25){\line(1,0){0.5}}
	    \put(6.5,24.9){\line(1,0){0.5}}
	    \put(7,24.8){\line(1,0){0.5}}
	    \put(7.5,24.7){\line(1,0){0.5}}
	    \put(8,24.5){\line(1,0){0.5}}
	    \put(8.5,24.3){\line(1,0){0.5}}
	    \put(9,24.1){\line(1,0){0.5}}
	    \put(9.5,23.9){\line(1,0){0.5}}
	    \put(10,23.6){\line(1,0){0.5}}
	    \put(10.5,23.3){\line(1,0){0.5}}

	    \put(1,25){\line(1,0){0.5}}
	    \put(1.5,25.3){\line(1,0){0.5}}
	    \put(2,25.6){\line(1,0){0.5}}
	    \put(2.5,25.9){\line(1,0){0.5}}
	    \put(3,26.1){\line(1,0){0.5}}
	    \put(3.5,26.3){\line(1,0){0.5}}
	    \put(4,26.5){\line(1,0){0.5}}
	    \put(4.5,26.7){\line(1,0){0.5}}
	    \put(5,26.8){\line(1,0){0.5}}
	    \put(5.5,26.9){\line(1,0){0.5}}
	    \put(6,27){\line(1,0){0.5}}
	    \put(6.5,26.9){\line(1,0){0.5}}
	    \put(7,26.8){\line(1,0){0.5}}
	    \put(7.5,26.7){\line(1,0){0.5}}
	    \put(8,26.5){\line(1,0){0.5}}
	    \put(8.5,26.3){\line(1,0){0.5}}
	    \put(9,26.1){\line(1,0){0.5}}
	    \put(9.5,25.9){\line(1,0){0.5}}
	    \put(10,25.6){\line(1,0){0.5}}
	    \put(10.5,25.3){\line(1,0){0.5}}

	    \put(11,21){\line(1,0){0.5}}
	    \put(11.5,20.7){\line(1,0){0.5}}
	    \put(12,20.4){\line(1,0){0.5}}
	    \put(12.5,20.1){\line(1,0){0.5}}
	    \put(13,19.9){\line(1,0){0.5}}
	    \put(13.5,19.7){\line(1,0){0.5}}
	    \put(14,19.5){\line(1,0){0.5}}
	    \put(14.5,19.3){\line(1,0){0.5}}
	    \put(15,19.2){\line(1,0){0.5}}
	    \put(15.5,19.1){\line(1,0){0.5}}
	    \put(16,19){\line(1,0){0.5}}
	    \put(16.5,19.1){\line(1,0){0.5}}
	    \put(17,19.2){\line(1,0){0.5}}
	    \put(17.5,19.3){\line(1,0){0.5}}
	    \put(18,19.5){\line(1,0){0.5}}
	    \put(18.5,19.7){\line(1,0){0.5}}
	    \put(19,19.9){\line(1,0){0.5}}
	    \put(19.5,20.1){\line(1,0){0.5}}
	    \put(20,20.4){\line(1,0){0.5}}
	    \put(20.5,20.7){\line(1,0){0.5}}

	    \put(11,23){\line(1,0){0.5}}
	    \put(11.5,22.7){\line(1,0){0.5}}
	    \put(12,22.4){\line(1,0){0.5}}
	    \put(12.5,22.1){\line(1,0){0.5}}
	    \put(13,21.9){\line(1,0){0.5}}
	    \put(13.5,21.7){\line(1,0){0.5}}
	    \put(14,21.5){\line(1,0){0.5}}
	    \put(14.5,21.3){\line(1,0){0.5}}
	    \put(15,21.2){\line(1,0){0.5}}
	    \put(15.5,21.1){\line(1,0){0.5}}
	    \put(16,21){\line(1,0){0.5}}
	    \put(16.5,21.1){\line(1,0){0.5}}
	    \put(17,21.2){\line(1,0){0.5}}
	    \put(17.5,21.3){\line(1,0){0.5}}
	    \put(18,21.5){\line(1,0){0.5}}
	    \put(18.5,21.7){\line(1,0){0.5}}
	    \put(19,21.9){\line(1,0){0.5}}
	    \put(19.5,22.1){\line(1,0){0.5}}
	    \put(20,22.4){\line(1,0){0.5}}
	    \put(20.5,22.7){\line(1,0){0.5}}

	    \put(11,25){\line(1,0){0.5}}
	    \put(11.5,24.7){\line(1,0){0.5}}
	    \put(12,24.4){\line(1,0){0.5}}
	    \put(12.5,24.1){\line(1,0){0.5}}
	    \put(13,23.9){\line(1,0){0.5}}
	    \put(13.5,23.7){\line(1,0){0.5}}
	    \put(14,23.5){\line(1,0){0.5}}
	    \put(14.5,23.3){\line(1,0){0.5}}
	    \put(15,23.2){\line(1,0){0.5}}
	    \put(15.5,23.1){\line(1,0){0.5}}
	    \put(16,23){\line(1,0){0.5}}
	    \put(16.5,23.1){\line(1,0){0.5}}
	    \put(17,23.2){\line(1,0){0.5}}
	    \put(17.5,23.3){\line(1,0){0.5}}
	    \put(18,23.5){\line(1,0){0.5}}
	    \put(18.5,23.7){\line(1,0){0.5}}
	    \put(19,23.9){\line(1,0){0.5}}
	    \put(19.5,24.1){\line(1,0){0.5}}
	    \put(20,24.4){\line(1,0){0.5}}
	    \put(20.5,24.7){\line(1,0){0.5}}

	    \put(21,21){\line(1,0){0.5}}
	    \put(21.5,21.3){\line(1,0){0.5}}
	    \put(22,21.6){\line(1,0){0.5}}
	    \put(22.5,21.9){\line(1,0){0.5}}
	    \put(23,22.1){\line(1,0){0.5}}
	    \put(23.5,22.3){\line(1,0){0.5}}
	    \put(24,22.5){\line(1,0){0.5}}
	    \put(24.5,22.7){\line(1,0){0.5}}
	    \put(25,22.8){\line(1,0){0.5}}
	    \put(25.5,23.9){\line(1,0){0.5}}
	    \put(26,23){\line(1,0){0.5}}
	    \put(26.5,22.9){\line(1,0){0.5}}
	    \put(27,22.8){\line(1,0){0.5}}
	    \put(27.5,22.7){\line(1,0){0.5}}
	    \put(28,22.5){\line(1,0){0.5}}
	    \put(28.5,22.3){\line(1,0){0.5}}
	    \put(29,22.1){\line(1,0){0.5}}
	    \put(29.5,21.9){\line(1,0){0.5}}
	    \put(30,21.6){\line(1,0){0.5}}
	    \put(30.5,21.3){\line(1,0){0.5}}

	    \put(21,23){\line(1,0){0.5}}
	    \put(21.5,23.3){\line(1,0){0.5}}
	    \put(22,23.6){\line(1,0){0.5}}
	    \put(22.5,23.9){\line(1,0){0.5}}
	    \put(23,24.1){\line(1,0){0.5}}
	    \put(23.5,24.3){\line(1,0){0.5}}
	    \put(24,24.5){\line(1,0){0.5}}
	    \put(24.5,24.7){\line(1,0){0.5}}
	    \put(25,24.8){\line(1,0){0.5}}
	    \put(25.5,24.9){\line(1,0){0.5}}
	    \put(26,25){\line(1,0){0.5}}
	    \put(26.5,24.9){\line(1,0){0.5}}
	    \put(27,24.8){\line(1,0){0.5}}
	    \put(27.5,24.7){\line(1,0){0.5}}
	    \put(28,24.5){\line(1,0){0.5}}
	    \put(28.5,24.3){\line(1,0){0.5}}
	    \put(29,24.1){\line(1,0){0.5}}
	    \put(29.5,23.9){\line(1,0){0.5}}
	    \put(30,23.6){\line(1,0){0.5}}
	    \put(30.5,23.3){\line(1,0){0.5}}

	    \put(21,25){\line(1,0){0.5}}
	    \put(21.5,25.3){\line(1,0){0.5}}
	    \put(22,25.6){\line(1,0){0.5}}
	    \put(22.5,25.9){\line(1,0){0.5}}
	    \put(23,26.1){\line(1,0){0.5}}
	    \put(23.5,26.3){\line(1,0){0.5}}
	    \put(24,26.5){\line(1,0){0.5}}
	    \put(24.5,26.7){\line(1,0){0.5}}
	    \put(25,26.8){\line(1,0){0.5}}
	    \put(25.5,26.9){\line(1,0){0.5}}
	    \put(26,27){\line(1,0){0.5}}
	    \put(26.5,26.9){\line(1,0){0.5}}
	    \put(27,26.8){\line(1,0){0.5}}
	    \put(27.5,26.7){\line(1,0){0.5}}
	    \put(28,26.5){\line(1,0){0.5}}
	    \put(28.5,26.3){\line(1,0){0.5}}
	    \put(29,26.1){\line(1,0){0.5}}
	    \put(29.5,25.9){\line(1,0){0.5}}
	    \put(30,25.6){\line(1,0){0.5}}
	    \put(30.5,25.3){\line(1,0){0.5}}

	    \put(31,21){\line(1,0){0.5}}
	    \put(31.5,20.7){\line(1,0){0.5}}
	    \put(32,20.4){\line(1,0){0.5}}
	    \put(32.5,20.1){\line(1,0){0.5}}
	    \put(33,19.9){\line(1,0){0.5}}
	    \put(33.5,19.7){\line(1,0){0.5}}
	    \put(34,19.5){\line(1,0){0.5}}
	    \put(34.5,19.3){\line(1,0){0.5}}
	    \put(35,19.2){\line(1,0){0.5}}
	    \put(35.5,19.1){\line(1,0){0.5}}
	    \put(36,19){\line(1,0){0.5}}
	    \put(36.5,19.1){\line(1,0){0.5}}
	    \put(37,19.2){\line(1,0){0.5}}
	    \put(37.5,19.3){\line(1,0){0.5}}
	    \put(38,19.5){\line(1,0){0.5}}
	    \put(38.5,19.7){\line(1,0){0.5}}
	    \put(39,19.9){\line(1,0){0.5}}
	    \put(39.5,20.1){\line(1,0){0.5}}
	    \put(40,20.4){\line(1,0){0.5}}
	    \put(40.5,20.7){\line(1,0){0.5}}

	    \put(31,23){\line(1,0){0.5}}
	    \put(31.5,22.7){\line(1,0){0.5}}
	    \put(32,22.4){\line(1,0){0.5}}
	    \put(32.5,22.1){\line(1,0){0.5}}
	    \put(33,21.9){\line(1,0){0.5}}
	    \put(33.5,21.7){\line(1,0){0.5}}
	    \put(34,21.5){\line(1,0){0.5}}
	    \put(34.5,21.3){\line(1,0){0.5}}
	    \put(35,21.2){\line(1,0){0.5}}
	    \put(35.5,21.1){\line(1,0){0.5}}
	    \put(36,21){\line(1,0){0.5}}
	    \put(36.5,21.1){\line(1,0){0.5}}
	    \put(37,21.2){\line(1,0){0.5}}
	    \put(37.5,21.3){\line(1,0){0.5}}
	    \put(38,21.5){\line(1,0){0.5}}
	    \put(38.5,21.7){\line(1,0){0.5}}
	    \put(39,21.9){\line(1,0){0.5}}
	    \put(39.5,22.1){\line(1,0){0.5}}
	    \put(40,22.4){\line(1,0){0.5}}
	    \put(40.5,22.7){\line(1,0){0.5}}

	    \put(31,25){\line(1,0){0.5}}
	    \put(31.5,24.7){\line(1,0){0.5}}
	    \put(32,24.4){\line(1,0){0.5}}
	    \put(32.5,24.1){\line(1,0){0.5}}
	    \put(33,23.9){\line(1,0){0.5}}
	    \put(33.5,23.7){\line(1,0){0.5}}
	    \put(34,23.5){\line(1,0){0.5}}
	    \put(34.5,23.3){\line(1,0){0.5}}
	    \put(35,23.2){\line(1,0){0.5}}
	    \put(35.5,23.1){\line(1,0){0.5}}
	    \put(36,23){\line(1,0){0.5}}
	    \put(36.5,23.1){\line(1,0){0.5}}
	    \put(37,23.2){\line(1,0){0.5}}
	    \put(37.5,23.3){\line(1,0){0.5}}
	    \put(38,23.5){\line(1,0){0.5}}
	    \put(38.5,23.7){\line(1,0){0.5}}
	    \put(39,23.9){\line(1,0){0.5}}
	    \put(39.5,24.1){\line(1,0){0.5}}
	    \put(40,24.4){\line(1,0){0.5}}
	    \put(40.5,24.7){\line(1,0){0.5}}
	    \begin{large}
	       \put(60,45){Philips Research Laboratories}
	       \put(60,30){\copyright\ 1988 Nederlandse Philips Bedrijven B.V.}
	    \end{large}
	 \end{picture}
      \end{figure}
      \newpage
      \pagenumbering{roman}
      \tableofcontents
      \newpage
      \pagenumbering{arabic}
   \end{titlepage}
}
\title{}
\topmargin 0pt
\oddsidemargin 36pt
\evensidemargin 36pt
\textheight 600pt
\textwidth 405pt
\pagestyle{headings}
\newcommand{\@RosTopic}{General}
\newcommand{\@RosTitle}{-}
\newcommand{\@RosAuthor}{-}
\newcommand{\@RosDocNr}{}
\newcommand{\@RosDate}{\today}
\newcommand{\@RosStatus}{informal}
\newcommand{\@RosSupersedes}{-}
\newcommand{\@RosDistribution}{Project}
\newcommand{\@RosClearance}{Project}
\newcommand{\@RosKeywords}{}
\newcommand{\RosTopic}[1]{\renewcommand{\@RosTopic}{#1}}
\newcommand{\RosTitle}[1]{\renewcommand{\@RosTitle}{#1}}
\newcommand{\RosAuthor}[1]{\renewcommand{\@RosAuthor}{#1}}
\newcommand{\RosDocNr}[1]{\renewcommand{\@RosDocNr}{#1}}
\newcommand{\RosDate}[1]{\renewcommand{\@RosDate}{#1}}
\newcommand{\RosStatus}[1]{\renewcommand{\@RosStatus}{#1}}
\newcommand{\RosSupersedes}[1]{\renewcommand{\@RosSupersedes}{#1}}
\newcommand{\RosDistribution}[1]{\renewcommand{\@RosDistribution}{#1}}
\newcommand{\RosClearance}[1]{\renewcommand{\@RosClearance}{#1}}
\newcommand{\RosKeywords}[1]{\renewcommand{\@RosKeywords}{#1}}
R0314_A.tex



\section{Introduction}
This document discusses the subgrammar XPPROPtoCLAUSE for Dutch.

The parts on rules dealing with tense and aspect have been written by 
Lisette Appelo. These are the sections on RC\_Aspect, RC\_Retro, 
TC\_Finiteness, RC\_Deixis, TC\_Passivegewordendeletion and 
Superdeixisadaptation.

The other parts have been written by Jan Odijk.

\section{Subgrammar Specification}
\begin{description}
  \item[Head] VERBPPROP, ADJPPROP, NPPROP, PREPPPROP, ADVPPROP
  \item[Export] CLAUSE
  \item[Import] SENTENCE, OPENVERBPPROP, OPENADJPPROP, OPENNPPROP, 
                CLOSEDPREPPPROP, CLOSEDADVPPROP, CLOSEDVERBPPROP, CLOSEDADJPPROP, 
                CLOSEDNPPROP, CLOSEDPREPPPROP, CLOSEDADVPPROP,
                EMPTY

\end{description}

\section{Control Expression}


 The control expression can be represented in the following way:

\begin{verbatim}

 {RC\_Propositionsubstitution}
.(RC\_Clauseformation)
.(RC\_aspectrules)
.[RC\_retro]
.(TC\_finiteness)
.(RC\_deixis)
.[TC\_Passivegewordendeletion]!
.{Superdeixisadaptation}!
.(TC\_Sentenceok)
.(TC\_VPpruning)
.(FpreAux/98)
.[Auxadaptation]!
.(TC\_Control)
.(TC\_fincontrol)
.(TC\_postprepok)
.{RC\_vpadv}
.{RC\_Emptysubstitution}
.[TC\_prostatus]
.[TC\_Postsubjformation]!
.(TC\_Objectok)
.{TC\_advcontrol}!
.(TC\_SVA)
.{Caseassignment}!
.{TC\_argreflspelling}!
.{RC\_reciprocalsubst}
.[removetransformations]
.(TC\_SPruning)
.{TC\_PPoverV}
.[TC\_NPoverADV]
\end{verbatim}

The notation {\em []!} and {\em \{\}!} is used to indicate that there are
filters associated to the rule or transformation class.

Transformation classes begin their names with {\em TC\_}, rule classes with
{\em  RC\_}. Names without these prefixes stand for more complex control 
expressions of rules and /or transformations naturally belonging together.
These will be discussed below.

The real control expression used in the system does not used names of
rule and transformation classes, but only names of individual rules and
transformations.

\section{Auxiliary Control Expressions}

The following `auxiliary control exprssions' occur in the control expression
given above:

\begin{description}
  \item[Superdeixisadaptation] This is documented in the section on 
superdeixisadaptation
  \item[Auxadaptation] It consists of a number of optional transformations, 
some of which are followed by a filter.
  \item[CaseAssignment] It consists of a number of iterative transformations,
each of which is preceded and followed by a filter. 
  \item[Removetransformations] It consists of a number of iterative and 
optional transformations.
\end{description}


\section{Rule and Transformation Classes}


\begin{mruleclass}{RC\_propositionsubstitution}
\begin{classdescr}
\kind iterative rule class
\classtask to substitute propositional phrases 
\end{classdescr}

This rule class contains the following members:
\begin{description}
  \item[RopenADJPPROPsubstitution] OPENADJPPROP as complrel
  \item[Rclosedadjppropsubstitution] CLOSEDADJPPROP as complrel
  \item[Ropennppropsubstitution] OPENNPROP as complrel
  \item[Rclosednppropsubstitution] CLOSEDNPROP as complrel
  \item[RlocOPENPREPPROPsubstitution] OPENPREPPPROP as locargrel
  \item[RLCPPPsubst] CLOSEDPREPPROP as locargrel
  \item[RDIROPENPREPPROPsubstitution] OPENPREPPPROP as dirargrel
  \item[RDIRCLOSEDPREPPPROP] CLOSEDPREPPROP as dirargrel
  \item[ROOPPPsubst] OPENPREPPROP as complrel
  \item[ROCPPPsubst] CLOSEDPREPPROP as complrel
  \item[Rpropsubst13] OPENVERBPPROP in ADVPPROP  (* graag-like  etc *)
  \item[ROADVPPsubst] OPENADVPPROP as locargrel, dirargrel
  \item[RCADVPPsubst] CLOSEDADVPPROP as locargrel, dirargrel
  \item[Rpropsubst14] CLOSEDVERBPPROP in ADVPPROP  (* toevallig-happen *)
  \item[RSENTENCEcompl] SENTENCE (without {\em  om}) as complrel
  \item[RSENTENCEomtecompl] SENTENCE (with {\em  om}) as complrel
  \item[ROPENADJPPROPprepobj] OPENADJPPROP as prepobjrel
  \item[RCLOSEDADJPPROPprepobj] CLOSEDADJPPROP as prepobjrel
  \item[ROPENNPPROPprepobj] OPENNPPROP as prepobjrel
  \item[RCLOSEDNPPROPprepobj] CLOSEDNPPROP as prepobjrel
  \item[RSENTENCEprepobj ] SENTENCE as prepobjrel
  \item[RSENTENCEsubj] `subject' SENTENCE as {\em  leftdislocrel}
  \item[RSENTENCEextrapos ] `subject' SENTENCE as {\em extraposrel}
  \item[RSENTENCEldisloc ] `nonsubject' SENTENCE as {\em leftdislocrel}
  \item[Rtempadvsentsubstitution] to substitute temporal adverbial sentences
  \item[Rconjsentsubst1] to substitute adverbial sentences (middle)
  \item[Rsadjsentsubst] to substitute sentences in ADJPPROPs
  \item[Rconjsentsubst2] to substitute adverbial sentences (initial)
  \item[Rconjsentsubst3] to substitute adverbial sentences (final)
  \item[Rconjsentsubst4] to substitute adverbial sentences (conditionalmood)
\end{description}

Rules for the following cases are still to be written:

\begin{description}
  \item[] CLOSEDVERBPPROP as complrel  (e.g. {\em  hij kreeg {\bf de boot 
afgeleverd}})
  \item[] OPENADJPPROP as free adjunct, object antecedent , e.g. {\em  hij at 
het vlees {\bf rauw}}
  \item[] OPENADJPPROP as free adjunct, subject antecedent , e.g. {\em  hij 
zwemt het liefst {\bf naakt}}
  \item[] OPENNPPROP as a free adjunct, subject and object antecedent
(e.g. 
{\em hij besteedde {\bf als directeur} veel aandacht aan dit probleem}), 
  \item[] OPENPREPPPROP as a free adjunct, subject and object antecedent
(e.g. 
{\em hij las het boek {\bf met een rood hoofd}})
  \item[] CLOSEDADJPPROP, as a free resultative adjunct to intransitive and 
pseudo-transitive activity verbs, cf. {\em  hij at {\bf zijn buikje rond}},
{\em  de atleten liepen {\em  zich warm}}, 
{\em  hij dronk {\bf zijn glas leeg}}, etc.
  \item[] CLOSEDNPPROP, as a free resultative adjunct, though this is possible
in idiomatic cases only, it appears: {\em  Hij schrok {\bf zich een hoedje}},
{\em  hij liep {\bf zich een ongeluk}}, etc.
\end{description}

A substitution rule for   OPENVERBPPROPs as complrel was planned, but has
no use.

\begin{members}
\begin{member}
\rulename ROPENADJPPROPsubstitution
\ruletask to substitute OPENADJPPROPs
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example
x1 x2 smaak $\rightarrow$ x1 [x1 goed] smaak   (: dit smaakt goed)
\remarks \noremarks

\end{member}
\begin{member}
\rulename RCLOSEDADJPPROPsubstitution
\ruletask  to substitute CLOSEDADJPPROPs
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example
x1 x2 vind $\rightarrow$ x1 [hem aardig] vind (: Zij vindt hem aardig)
\remarks \noremarks

\end{member}
\begin{member}
\rulename ROPENNPPROPsubstitution
\ruletask  to substitute OPENNPPROPs
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example
x1 x2 x3 noem  $\rightarrow$ x1 x2 [x2 een grote schoft ] noem 
(:ik noem hem een grote schoft) ;\\
x1 x2 heet $\rightarrow$ x1 [x1 Peter] heet (:Hij heet Peter)
\remarks \noremarks

\end{member}
\begin{member}
\rulename RCLOSEDNPPROPsubstitution
\ruletask  to substitute CLOSEDNPPROPs
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example
x1 x2 vind $\rightarrow$ x1 [hem een vervelende klier] vind
(:Zij vindt hem een vervelende klier)\\
x1 lijk $\rightarrow$ [hij een vervelende klier] lijk
(:hij lijkt een vervelende klier)
\remarks \noremarks

\end{member}
\begin{member}
\rulename RLOCOPENPREPPROPsubstitution
\ruletask to substitute OPENPREPPPROPs as {\em  locargrel}
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example
x1 x2 woon $\rightarrow$ x1 [x1 in Amsterdam] woon (:Hij woont in Amsterdam)\\
x1 x2 x3 zet $\rightarrow$ x1 x2 [ x2 in de tuin ] zet (: hij zette de 
vuilnisbak in de tuin).
\remarks \noremarks

\end{member}
\begin{member}
\rulename RLCPPPPsubst
\ruletask to substitute CLOSEDPREPPPROPs as {\em  locargrel}
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example x1 x2 krijg $\rightarrow$ x1 [ x1 in de doos] krijg
(: Ik krijg hem wel in de doos)
\remarks \noremarks

\end{member}
\begin{member}
\rulename RDIROPENPREPPROPsubstitution
\ruletask to substitute OPENPREPPPROPs as {\em  dirargrel}
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example  
x1 x2 reed $\rightarrow$ x1 [x1 de garage in] reed 
(:De auto reed de garage in) .\\ 
x1 x2 x3 reed $\rightarrow$ x1 x2 [x2 de garage in] reed (Hij reed de auto
de garage in)
\remarks \noremarks

\end{member}
\begin{member}
\rulename RDIRCLOSEDPREPPPROP
\ruletask to substitute CLOSEDPREPPPROPs as {\em  dirargrel}
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example x1 x2 kreeg $\rightarrow$ x1 [ x1 de box uit] kreeg
(: Hij kreeg de baby de box uit)
\remarks \noremarks

\end{member}
\begin{member}
\rulename ROOPPPsubst
\ruletask to substitute OPENPREPPPROPs as {\em  complrel}
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example ???
\remarks \noremarks

\end{member}
\begin{member}
\rulename ROCPPPsubst
\ruletask to substitute CLOSEDPREPPPROPs as {\em  complrel}
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example x1 x2 vind $\rightarrow$ x1 [dit buiten alle
proporties] vind (:Ik vind dit buiten alle proporties)
\remarks \noremarks

\end{member}
\begin{member}
\rulename RPropsubst13
\ruletask to substitute an infinitival SENTENCE as an argument for adverbs such 
as {\em  graag}
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example x1 graag x2 + x1 boeken koop $\rightarrow$
x1 graag boeken koop; 
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rcadvppsubst
\ruletask to substitute CLOSEDADVPPROPs 
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example x1 x2 kreeg \to x1 [x1 daar] kreeg
\remarks \noremarks

\end{member}
\begin{member}
\rulename Roadvppsubst
\ruletask  to substitute CLOSEDADVPPROPs 
\file dutch:rc\_propsubst.mrule (mrules24.mrule)
\semantics \nosemantics
\example x1 x2 woon \to x1 [x1 daar] woon
\remarks \noremarks

\end{member}



\begin{member}
\rulename RPropsubst14
\ruletask to substitute SENTENCEs as argument to adverbs such as {\em  
toevallig}
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example toevallig x2 + x1 aankomen $\rightarrow$
x1 toevallig aankomen; 
\remarks \noremarks

\end{member}
\begin{member}
\rulename RSENTENCEcompl
\ruletask to substitute SENTENCEs that are not infinitival SENTENCEs with
{\em  om} and {\em  te}.
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example\mbox{}
 x1 x2 zei $\rightarrow$ x1 [dat hij kwam] zei (:Hij zei dat hij kwam)\\
x1 x3 x2 beloofde $\rightarrow$ x1 x3 [x1 te komen ] beloofde (:Hij beloofde
Piet te komen)\\
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rsentenceomtecompl
\ruletask to substitute SENTENCEs that are infinitival SENTENCEs with
{\em  om} and {\em  te}.
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 x2 probeer \to ik (om) te zwemmen probeer
\remarks This is a special rule because the absence of the conjunction {\em  om}
in the output model must be allowed for.
\end{member}

\begin{member}
\rulename ROPENADJPPROPprepobj
\ruletask to substitute OPENADJPPROPs as prepobjrels
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 x2 V  $\rightarrow$ x1 [als [[ x1 goed]]] V
\remarks \noremarks

\end{member}
\begin{member}
\rulename RCLOSEDADJPPROPprepobj
\ruletask  to substitute CLOSEDADJPPROPs as prepobjrels
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 x2 beschouw $\rightarrow$ x1 [als [x3 goed]]
beschouw (:Ik beschouw hem als goed)
\remarks \noremarks

\end{member}
\begin{member}
\rulename ROPENNPPROPprepobj
\ruletask  to substitute OPENNPPROPs as prepobjrels
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 x2 x3 benoem $\rightarrow$ x1 x2 [tot [x2 
president van de zaak]] benoem (:Ik benoem hem tot president van de zaak)
\remarks \noremarks

\end{member}
\begin{member}
\rulename RCLOSEDNPPROPprepobj
\ruletask   to substitute CLOSEDNPPROPs as prepobjrels
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 x2 beschouw $\rightarrow$ x1 [als [x2 [de beste
man van het veld]]] beschouw (:Ik beschouw hem als de beste man van het veld)
\remarks \noremarks

\end{member}
\begin{member}
\rulename RSENTENCEprepobj
\ruletask to substitute SENTENCEs as prepositional objects
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 [op x2 ] rekende $\rightarrow$
               x1 [op [dat hij kwam ]] rekende (: Hij rekende erop, dat zij
kwam)
\remarks A special rule to deal with SENTENCEs containing {\em om }
should be added.
\end{member}
\begin{member}
\rulename RSentencesubj
\ruletask To substitute sentences for subjects (as a {\em leftdislocrel})
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 x2 bewijs $\rightarrow$ [dat de wereld 
ronddraait], dat x2 bewijs (:Dat de wereld ronddraait (, dat) bewijst niets) 
\remarks A problem for the approach adopted here is formed by sentences such as
{\em  dat hij ziek is lijkt zijn grootste probleem}. In this sentence the
subordinate sentence {\em dat hij ziek is} is never substituted as a subject
of the verb {\em  lijken}, but only as a subject of the NP-predicate
{\em  zijn grootste probleem}. There is no way to derive the sentence 
mentioned. An alternative approach would have SENTENCEs substituted for 
subjects anywhere, and have them move to superdordinate subject-positions,
and one could have a separate transformation (obligatorily) 
turning a sentential subject into
a {\em leftdislocrel}. The derivation of the sentence mentioned would then be:

NPPROP( {\em x1 zijn grootste probleem}) + SENTENCE({\em  dat hij ziek is}) \to
\\
NPPROP(dat hij ziek is zijn grootste probleem)

x2 lijk + CLOSEDNPPROP(dat hij ziek is zijn grootste probleem) \to\\
CLOSEDNPPROP(dat hij ziek is zijn grootste probleem) lijk

CLOSEDNPPROP(dat hij ziek is zijn grootste probleem) lijk \to\\
subj/dat hij ziek is pred/zijn grootste probleem head/lijk

subj/dat hij ziek is pred/zijn grootste probleem head/lijk \to\\
leftdislocrel/dat hij ziek is(, subj/dat) pred/zijn grootste probleem head/lijk

This approach would require an extension of control transformations and of 
object-ok transformations which could have undesirable results (i.e.
generation of e.g. {\em  that he comes seems}, {\em  that he comes turned out}
should be prevented somehow)

A third alternative is more attractive from a syntactic point of view. 
In this alternative the status of
the pronoun {\em dat} is formalized. It must be indicated somehow explicitly 
that {\em  dat} is an element bound by the SENTENCE substituted. Hence it 
requires the notion of binding between a SENTENCE and a pronoun such as 
{\em  dat}. Problems will then arise w.r.t isomorphy between such sentences and
sentences in which extraposition has applied. This isomorphy 
must either be given up, or elements must be assumed in the case of 
extraposition that fulfill the same function as {\em  dat}. The element
{\em  het} might be considered such an element, at least in certain cases. In 
other cases an abstract element might be assumed. This should really be 
given some thought, not only to solve the problem mentioned, but also because
actually something is very wrong in the current treatment of {\em  dat}: The 
element {\em  dat} is introduced here as accompanying the SENTENCE, and in  
a later stage it can be deleted. However, there is no formal guarantee that 
the {\em  dat} that is deleted is the same {\em  dat} that has been 
introduced here (the actual grammar has been written in such a way that this 
will never be the case, but it is possible to write rules in such a way that
a different {\em  dat} is deleted). It should be impossible to write a grammar
in which it is possible to delete a different {\em  dat}. This can be achieved
by formalizing the notion {\em The phrase {\em  dat} belongs to a certain 
SENTENCE} and incorporating it into the grammar. One way of formalizing
this notion is by incorporating a notion of {\em binding}.

\end{member}
\begin{member}
\rulename RSENTENCEextrapos
\ruletask to substitute sentences for subject variables and extraposing them
immediately.
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example het verbaast/verrast/irriteert me dat hij kwam\\
het is mogelijk dat hij zwemt
\remarks The verbs used here should be reanalyzed as a new type of ergative 
verbs. See the document on verbpatterns.

\end{member}
\begin{member}
\rulename RSentenceldisloc
\ruletask to substitute nonsubject-SENTENCEs as {\em  leftdislocrel}
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 x2 geloof $\rightarrow$ [dat hij komt], x1 dat 
geloof (:Dat hij komt(, dat) geloof ik niet)\\ 
\mbox{} [door x1] x2 geloofd $\rightarrow$ [dat hij komt], [door x1] dat geloofd
(:Dat hij komt(, dat) wordt door iedereen geloofd) 
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rtempadvsentsubstitution
\ruletask To insert temporal adverbials of category SENTENCE
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example
hij x1 danste $\rightarrow$\\
hij zolang hij wilde/toen hij weer beter was danste
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rconjsentsubst1
\ruletask to substitute (nontemporal) adverbial subordinate clauses in the
middle of a clause
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example hij x1 wegging + [zonder om te kijken] \to hij {\em zonder om te kijken} wegging 
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rsadjsentsubst
\ruletask to substitute SENTENCEs that do not have {\em  om} and {\em  te}
in ADJPPROPs
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example hij [ x1 blij] is + [dat hij beter is] \to hij [dat hij beter is] blij is
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rconjsentsubst1
\ruletask  to substitute (nontemporal) adverbial subordinate clauses 
as {\em  leftdislocrel}
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 hij wegging + [zonder om te kijken] \to {\em Zonder om te kijken} hij wegging
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rconjsentsubst3
\ruletask  to substitute (nontemporal) adverbial subordinate clauses at the
end of a clause
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example hij wegging x1 + [zonder om te kijken] \to  hij wegging {\em Zonder om te kijken}
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rconjsentsubst4
\ruletask to substitute Conditionalmood adverbial sentences as {\em  
leftdislocrel}
\file dutch:rc\_propsubst2.mrule (mrules68.mrule)
\semantics \nosemantics
\example x1 hij werk + [is hij ziek] \to [is hij ziek, dan hij werk]
\remarks \noremarks

\end{member}




\end{members}

\nofilters

{\bf Speed rules} Associated Speed rules:
\begin{description}
\rulename Fprepropsubst
\ruletask To speed up analysis. It checks whether there are still 
propositional phrases in the structure.
If there are, the current analysis path is canceled, and a new analysis path
attempted.
\file dutch:tc\_speed.mrule
\remarks This speed filter is incompatible with the treatment of idioms
 that contain propositional complements. For this reason it is not in the CE.
\end{description}


\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}


\begin{mruleclass}{RC\_Clauseformation}
\begin{classdescr}
\kind obligatory rule class
\classtask to form CLAUSEs out of XPPROPs
\end{classdescr}

\begin{members}
\begin{member}
\rulename RClauseformation1
\ruletask to form a CLAUSE out of an nonpassive VERBPPROP
\file dutch:rc\_clauseformation.mrule (mrules23.mrule)
\semantics \nosemantics
\example x1 x2 koop \to x1 x2 koop
\remarks For historical reasons this class is a rule class and not a 
transformation class
There is no need for it to be a rule class
anymore.


\end{member}
\begin{member}
\rulename RClauseformation2
\ruletask to form a CLAUSE out of an passive VERBPPROP
\file dutch:rc\_clauseformation.mrule (mrules23.mrule)
\semantics \nosemantics
\example door x1 x2 gekocht \to door x1 x2 gekocht wordt
\remarks \noremarks

\end{member}
\begin{member}
\rulename RClauseformation3
\ruletask to form a CLAUSE out of an ADJPPROP
\file dutch:rc\_clauseformation.mrule (mrules23.mrule)
\semantics \nosemantics
\example x1 groot $\rightarrow$ x1 groot zijn
\remarks \noremarks

\end{member}
\begin{member}
\rulename RClauseformation4
\ruletask to form a CLAUSE out of an existential NPPROP
\file dutch:rc\_clauseformation.mrule (mrules23.mrule)
\semantics \nosemantics
\example boeken \to  boeken zijn (er zijn boeken)
\remarks \noremarks

\end{member}
\begin{member}
\rulename RClauseformation5
\ruletask to form a CLAUSE out of an identificational NPPROP
\file dutch:rc\_clauseformation.mrule (mrules23.mrule)
\semantics \nosemantics
\example Dit de jongen \to  Dit de jongen is;
Dat Jan  \to  Dat Jan is.
\remarks \noremarks

\end{member}
\begin{member}
\rulename RClauseformation6
\ruletask to form a CLAUSE out of a predicative NPPROP
\file dutch:rc\_clauseformation.mrule (mrules23.mrule)
\semantics \nosemantics
\example hij koning \to hij is koning;
het winter \to het is winter;
\remarks \noremarks

\end{member}
\begin{member}
\rulename RClauseformation7
\ruletask to form a CLAUSE out of a PREPPPROP
\file dutch:rc\_clauseformation.mrule (mrules23.mrule)
\semantics \nosemantics
\example Hij tegen het voorstel \to hij is tegen het 
voorstel;
\remarks \noremarks
\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}
R0314_B.tex

\begin{mruleclass}{RC\_aspect}
\begin{classdescr}
\kind obligatory rule class
\classtask To deal with aspect.\\
In Dutch these rules do not change the verb forms or add auxiliary verbs. They 
only exist because of the attuning of the grammars. See also doc: R263.
\end{classdescr}

\begin{members}
\begin{member}
\rulename Raspectimperfective
\ruletask Imperfective aspect relation between the interval E and a 
reference interval R.\\
The clause attribute {\em aspect} is assigned {\em imperfective}.
\file dutch:rc\_aspect.mrule (mrules 62)
\semantics Imperfective aspect relation between the interval E and a 
reference interval R
\example CL (...x$_{1}$ slapen) $\rightarrow$ CL(...x$_{1}$ slapen) 
\remarks In this rule 
is checked if a duration adverbial is absent. Presence of a durational 
adverbial makes the the aspect of an event perfective.\\
Achievements, modal verbs and {\em laten} are excluded; they cannot be 
imperfective.


\end{member}
\begin{member}
\rulename Raspectperfective
\ruletask Perfective aspect relation between the interval E and a 
reference interval R.\\
The clause attribute {\em aspect} is assigned {\em perfective}.
\file dutch:rc\_aspect.mrule (mrules 62)
\semantics perfective aspect relation between the interval E and a 
reference interval R.
\example CL (...x$_{1}$ slapen) $\rightarrow$ CL(...x$_{1}$ slapen) 
\remarks\mbox{}

\end{member}
\begin{member}
\rulename Raspecthabitual
\ruletask Habitual aspect relation between the interval E and a 
reference interval R.\\
The clause attribute {\em aspect} is assigned {\em habitual}.
\file dutch:rc\_aspect.mrule (mrules 62)
\semantics habitual aspect relation between the interval E and a 
reference interval R
\example CL (...x$_{1}$ altijd slapen) $\rightarrow$ CL(...x$_{1}$ altijd slapen) 
\remarks In this rule is checked for the presence of a frequential 
adverbial\\
This rule has not been tested yet.
\end{member}
\end{members}

\nofilters

\noindent
{\bf Speed Rules} Associated Speed Rules are:
\begin{description}
\rulename TNoAuxorPass
\ruletask to speed up analysis. It filters structures that 
contain an auxiliary verb unless the structure is passive and the auxiliary 
verb = {\em worden}.
\file dutch:tc\_speed.mrule (mrules94.mrule)
\remarks \noremarks
\end{description}


\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}


\begin{mruleclass}{RC\_retro}
\begin{classdescr}
\kind optional rule class
\classtask To deal with retrospectivity. See also doc.\ R263
\end{classdescr}

\begin{members}
\begin{member}
\rulename Rretroimperfective
\ruletask Between the reference interval Re and the reference interval 
Rs holds a relation `until': RETROSPECTIVE.\\
This rule is meant for a clause that is marked for {\em imperfective}
 aspect and that
contains a reference adverbial variable
that has for its attribute retro the value {\em true}.\\
The resulting clause is
marked for retrospectivity.
\file dutch:rc\_retro.mrule (mrules 76)
\semantics Between the reference interval Re and the reference interval
Rs holds a relation `until': RETROSPECTIVE.
\example  CL(... al een poosje slapen) $\rightarrow$ CL(... al een poosje 
slapen)
\remarks This rule has the same semantics as Rretroperfective

\end{member}
\begin{member}
\rulename Rretroperfective
\ruletask Between the reference interval Re and the reference interval
Rs holds a relation `until': RETROSPECTIVE.\\
This rule is meant for a clause that is marked for {\em perfective}
 aspect and that
contains a variable that has for its attribute retro the value true.\\
The auxiliary verb {\em hebben} or {\em zijn}
 is introduced to the right of the most right
verb of the input clause which is given
the modus form pastpart and the resulting clause is
marked for retrospectivity.
\file dutch:rc\_retro.mrule (mrules 76)
\semantics Between the reference interval Re and the reference interval
Rs holds a relation `until': RETROSPECTIVE.
\example:\\
CL(....slapen) $\rightarrow$  CL(.....geslapen hebben)\\
CL(....vallen) $\rightarrow$ CL(.....gevallen zijn)
\remarks This rule has the same semantics as Rretroimperfective.
\end{member}

\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
The past participle {\em geworden} is deleted in Tpassivegewordendeletion.
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_Finiteness}
\begin{classdescr}
\kind obligatory transformation class
\classtask To mark the clause as being {\em finite} or {\em infinite}. Both 
transformations are always applicable. See also 
doc.\ R263.
\end{classdescr}

\begin{members}
\begin{member}
\rulename Tfinite
\ruletask Mark the clause for finite.
\file dutch:tc\_finiteness.mrule (mrules 63)
\semantics \nosemantics
\example:\\
 $\rightarrow$ CL(.......slaapt)\\
 $\rightarrow$ CL(.......sliep)\\
 $\rightarrow$ CL(.......heeft geslapen)\\
 $\rightarrow$ CL(.......had geslapen)\\
\remarks\mbox{}

\end{member}
\begin{member}
\rulename Tinfinite
\ruletask Mark the clause for infinite and, for efficiency reasons, for
VRcompl  true or false.
\file dutch:tc\_finiteness.mrule (mrules 63)
\semantics \nosemantics
\example:\\
$\rightarrow$ CL(......SENT(.......slapen))\\
$\rightarrow$ CL(......SENT(.......hebben geslapen))\\
$\rightarrow$ NP(......SENT(.......slapende)....))\\
\remarks This transformation has always two results !!

\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}


\begin{mruleclass}{RC\_deixis}
\begin{classdescr}
\kind obligatory rule class
\classtask To deal with deixis and superdeixis. See also doc.\ R263.
\end{classdescr}

\begin{members}
\begin{member}
\rulename Rfinpresentdeixis
\ruletask The relation between Rs and S is {\em simultanuous}: PRESENT.
               This rule is for a {\em finite independent} clause.
               The most right verb in the clause gets a present tense.
               The deixis 
value of the reference adverbial is checked for 
               present, future or omega.
               The clause is marked for present deixis.
\file dutch:rc\_deixis.mrule (mrules 65)
\semantics The relation between Rs and S is {\em simultanuous}: PRESENT.

\example:\\
 CL(...slaap) $\rightarrow$ CL(...slaapt) (o.t.t.)\\
CL(...geslapen heb) $\rightarrow$ (CL...geslapen heeft) (v.t.t.)\\
CL(...SENT(...slapen) zul) ) $\rightarrow$ CL(....SENT(...slapen) zal) (o.t.t.t
)\\
CL(...SENT(...geslapen hebben) zul) $\rightarrow$ CL(...SENT(....geslapen hebben
) zal) (v.t.t.t.)
\remarks The superdeixis of the clause may be presentdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.
\end{member}
\begin{member}
\rulename Rfinpastdeixis
\ruletask The relation between Rs and S is {\em before}: PAST.
               This rule is for a {\em finite independent} clause.
               The most right verb in the clause gets a past tense.
               The deixis 
value of the reference adverbial is checked for 
               past or omega.
               The clause is marked for past deixis.
\file dutch:rc\_deixis.mrule (mrules 65)
\semantics The relation between Rs and S is {\em before}: PAST.

\example:\\
 CL(....slaap) $\rightarrow$ CL(...sliep) (o.v.t.)\\
CL(....geslapen heb) $\rightarrow$ CL(....geslapen had) (v.v.t.)\\
CL(....SENT(...slapen) zul) $\rightarrow$ CL(...SENT(...slapen) zou) (o.v.t.t.)
\\ 
CL(....SENT(...geslapen hebben) zul) $\rightarrow$ CL(...SENT(...geslapen 
hebben) zou)(v.v.t.t.)
\remarks The superdeixis of the clause may be pastdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.
\end{member}
\begin{member}
\rulename Rfinpastdeixisspec
\ruletask The relation between Rs and S is {\em before}: PAST.
               This rule is for a {\em finite independent} clause with 
perfective aspect. This
               is a special rule for Dutch with respect to the finite version. 
               The most right verb in the clause (input generative rule)
gets modus of a past particle.
The auxiliary verb {\em hebben/zijn
} is introduced with a present tense.
               The deixis 
value of the reference adverbial is checked for 
               past or omega.
               The clause is marked for past deixis.
\file dutch:rc\_deixis.mrule (mrules 65)
\semantics The relation between Rs and S is {\em before}: PAST.

\example CL(... gisteren slaap) $\rightarrow$ CL(...gisteren geslapen heeft)(v.t.t.)
\remarks The superdeixis of the clause may be pastdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.\\
This rule has the same semantics as Rfinpastdeixis.

\end{member}



\begin{member}
\rulename Rinfinpastdeixisspec
\ruletask The relation between Rs and S is {\em before}: PAST.
               This rule is for an {\em infinite independent} clause with 
perfective aspect. This
               is a special rule, because past is expressed by the auxiliary 
               verb {\em hebben/zijn}. 
               The most right verb in the clause (input generative rule)
gets modus of a past particle.
The auxiliary verb {\em hebben/zijn
} is introduced with a omega tense.
               The deixis 
value of the reference adverbial is checked for 
               past.
               The clause is marked for past deixis.
\file dutch:rc\_deixis2.mrule (mrules 71)
\semantics The relation between Rs and S is {\em before}: PAST.

\example CL(...gisteren slaap) $\rightarrow$ CL(..gisteren geslapen hebben)
\remarks The superdeixis of the clause may be past deixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.

\end{member}
\begin{member}
\rulename Rimpdeixis
\ruletask The relation between S and Rs is not relevant.
               This rule is for a {\em finite independent} (main) clause 
with perfective, non-retrospective aspect that will 
get mood {\em imperative or latenmood} in the mood rules..
               The deixis 
value of the reference adverbial is checked for 
               present, future or omega.
               The clause is marked for  present deixis.
               The clause is marked with modus = {\em imperative}.
\file dutch:rc\_deixis2.mrule (mrules 71)
\semantics The relation between S and Rs is not relevant.
\example Kom (morgen)
\remarks This rule is only meant to let imperatives pass the deixis rule 
class. Originally, the proposal was to let them be formed by the now not-
existing VERBPPROP-subgrammar. The clause is marked for presentdeixis and the 
abstract presentdeixis adverbial is inserted in case no adverbial is present, 
because otherwise other rules would have to make exceptions for imperatives.
Syntactically, they are now seen as finite present main sentences.
\end{member}
\begin{member}
\rulename Rfinirrmodaldeixis
\ruletask Irrealis construction of modals {\em kunnen} and {\em moeten}.
               This rule is for a {\em finite independent}
 clause with perfective, 
non-retrospective aspect. This
               is a special rule, because irrealis is expressed by the auxiliary 
               verb {\em zou}. 
               The deixis 
value of the reference adverbial is checked for past deixis.
               The clause is marked for past deixis.
\file dutch:rc\_deixis2.mrule (mrules 71)
\semantics The relation between Rs and S is not relevant.
\example hij komen kunnen $\rightarrow$ hij komen kunnen zou\\
hij komen moeten $\rightarrow$ hij komen moeten zou
\remarks The superdeixis of the clause may be past deixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.\\
Syntactically, the clause is seen as a finite past main sentence. Therefore, 
the clause is marked for pastdeixis and an abstract past deixis adverbial is 
inserted. Other time adverbials are assumed to belong to the argument clause of 
{\em moeten} or {\em kunnen}.\\
This rule has not been tested yet.
\end{member}



\begin{member}
\rulename Rfinpresentsuperdeixis
\ruletask The `indirect' relation between Rs and S is {\em simultanuous}: PRESENT.
               This rule is for a {\em finite dependent} clause.
               The most right verb in the clause gets a present tense.
               The deixis 
value of the possible reference adverbial is checked for 
               omega or future.
               The clause is marked for present superdeixis.
\file dutch:rc\_superdeixis.mrule (mrules 72)
\semantics The `indirect' relation between Rs and S is {\em simultanuous}: PRESENT.

\example: \\
Hij zegt (dat Jan slaapt)\\
                            Hij zegt (dat hij om 3 uur komt)
\remarks The superdeixis of the clause may be presentdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.\\
Note that the presence of an adverbial yields a kind of future interpretation.

\end{member}
\begin{member}
\rulename Rfinpastsuperdeixis
\ruletask The `indirect' relation between Rs and S is {\em before}: PAST.
               This rule is for a {\em finite dependent} clause.
               The most right verb in the clause gets a past tense.
               The deixis 
value of the possible reference adverbial is checked for 
               future or omega.
               The clause is marked for past superdeixis.
\file dutch:rc\_superdeixis.mrule (mrules72)
\semantics The `indirect' relation between Rs and S is {\em before}: PAST.
\example: \\
Hij zei (dat Jan sliep)\\
                            Hij zei (dat hij om 3 uur sliep)
\remarks The superdeixis of the clause may be pastdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.\\
In the analytic version of the rule conditions are added: Perfective aspect 
with an activity or stative Aktionsart without a durational adverbial are not 
allowed, because these cases are not considered plausible in isolated sentences 
(Rosetta3 application).\\
Note that the sentences with an adverbial can have 
two interpretations: 1) a  past future interpretation and 2) a past past 
interpretation. In the first interpretation the rule corresponds to 
Rinfinpastsuperdeixis ({\em hij dacht om 3 uur te komen}), 
in the second with Rfinpastsuperdeixisspec and 
Rinfinpastsuperdeixisspec ({\em hij dacht dat hij om 3 uur was gekomen}/{\em hij
dacht om 3 uur te zijn gekomen}). 
This difference is not accounted for yet. For this purpose an interlingua 
expression Lpastpastsuperdeixis will be added and this rule will be splitt up 
into two rules: Rfinpastsuperdeixis1 (i.e. this rule, corresponding to 
Lpastsuperdeixis) and Rfinpastsuperdeixis2 (i.e. this rule, but requiring an 
omega reference adverbial, corresponding to Lpastpastsuperdeixis).\\
Note also that these sentences can have an irrealis 
interpretation ({\em hij zei dat hij kwam}).

\end{member}
\begin{member}
\rulename Rfinpastsuperdeixisspec
\ruletask The `indirect' relation between Rs and S is {\em before}: PAST.
               This rule is for a {\em finite dependent} clause. This
               is a special rule because the auxiliary verb {\em hebben/zijn} 
               expresses the past and the tense agrees with the tense of the 
               higher clause which is also past. 
               The most right verb in the clause (input generative rule)
gets modus of a past particle.
The auxiliary verb {\em hebben/zijn
} is introduced with a past tense.
               The deixis 
value of the possible reference adverbial is checked for 
               omega.
               The clause is marked for past superdeixis.
\file dutch:rc\_superdeixis.mrule (mrules 72)
\semantics The `indirect' relation between Rs and S is {\em before}: PAST.
\example hij zei (dat hij om 3 uur was gekomen)
\remarks The superdeixis of the clause may be pastdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.\\
This rule has the same semantics as Rfinpastsuperdeixis, but should have that 
only in one of the meanings of Rfinpastsuperdeixis, i.e.\ Lpastpastsuperdeixis,
and correspond to Rfinpastsuperdeixis2 in the current version.\\
The absence of a referential adverbial is allowed in this rule, but that will
not be allowed anymore, 
because in that case the sentence should only have the past 
retro interpretation in isolated sentences.

\end{member}

\begin{member}
\rulename Rinfinpresentsuperdeixis
\ruletask The `indirect' relation between Rs and S is {\em simultanuous}: PRESENT.
               This rule is for a {\em infinite dependent} clause.
               The deixis value of the possible reference adverbial is checked 
               for omega or future.
               The clause is marked for present superdeixis.
\file dutch:rc\_superdeixis2.mrule (mrules 78)
\semantics The `indirect' relation between Rs and S is {\em simultanuous}: PRESENT.

\example:\\
 Hij probeert (te slapen)\\
                            Hij probeert (om 3 uur te komen)
\remarks The superdeixis of the clause may be presentdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.\\
Note that the presence of an adverbial yields a kind of future interpretation.

\end{member}
\begin{member}
\rulename Rinfinpastsuperdeixis
\ruletask The `indirect' relation between Rs and S is {\em before}: PAST.
               This rule is for a {\em finite dependent} clause.
               The deixis 
value of the possible reference adverbial is checked for 
               omega or future.
               The clause is marked for past superdeixis.
\file dutch:rc\_superdeixis2.mrule (mrules 78)
\semantics The `indirect' relation between Rs and S is {\em before}: PAST.

\example: \\
Hij probeerde (te slapen)\\
                            Hij probeerde (om 3 uur te komen)
\remarks The superdeixis of the clause may be pastdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.\\
Note that the presence of a reference adverbial yields a kind of past future 
interpretation.\\
This rule has the same semantics as Rfinpastsuperdeixis, and wrongly, also as 
Rfinpastsuperdeixisspec and Rinfinpastsuperdeixisspec.
In the current version it will correspond to Lpastsuperdeixis and 
Rfinpastsuperdeixis1.
\end{member}
\begin{member}
\rulename Rinfinpastsuperdeixisspec
\ruletask The `indirect' relation between Rs and S is {\em before}: PAST.
               This rule is for a {\em finite dependent} clause with perfective 
aspect. This
               is a special rule because the auxiliary verb {\em hebben/zijn} 
               expresses the past. 
               The most right verb in the clause (input generative rule)
gets modus of a past particle.
The auxiliary verb {\em hebben/zijn
} is introduced with a omega tense.
               The deixis 
value of the possible reference adverbial is checked for 
               omega.
               The clause is marked for past superdeixis.
\file dutch:rc\_superdeixis2.mrule (mrules 78)
\semantics The `indirect' relation between Rs and S is {\em before}: PAST.

\example hij dacht (om 3 uur te zijn gekomen)
\remarks The superdeixis of the clause may be pastdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.\\
In this rule the absence of a reference adverbial is allowed, but that will
not be allowed anymore, 
because in that case the sentence should have a past retro 
interpretation in isolated sentences.\\
This rule has the same semantics as Rfinpastsuperdeixisspec and will correspond 
to Lpastpastsuperdeixis and Rfinpastsuperdeixis2.

\end{member}
\begin{member}
\rulename Rfinirrmodalsuperdeixis
\ruletask Irrealis construction of modals {\em kunnen} and {\em moeten}.
               This rule is for a {\em finite dependent} clause with perfective non-
retrospective aspect. This
               is a special rule, because irrealis is expressed by the auxiliary 
               verb {\em zou}. 
               The deixis 
value of the possible reference adverbial is checked for omegadeixis.
               The clause is marked for past superdeixis.
\file dutch:rc\_superdeixis2.mrule (mrules 78)
\semantics The relation between Rs and S is not relevant.
\example:\\
 hij komen kunnen $\rightarrow$ hij komen kunnen zou\\
hij komen moeten $\rightarrow$ hij komen moeten zou
\remarks The superdeixis of the clause may be pastdeixis, in case this 
is a sentence with an adverbial of the type of {\em graag} or another case of 
subgrammar switch.\\
Syntactically, the clause is seen as a finite past sentence. Therefore, 
the clause is marked for pastdeixis .\\
This rule has not been tested yet.

\end{member}


\end{members}

\nofilters

\nospeedrules

\noplannedrules

\begin{description}
  \item[Rules not in control expression]:\\
 Rfinirrmodaldeixis, Rfinirrmodalsuperdeixis.\\
Rinfinpastsuperdeixisspec has been removed, but will be put back.
\end{description}


\begin{comments}
Rinfinpresentdeixis is still in the control expression, but will be removed. 
The documentation on this rule already has been left out.\\
Rfinpastsuperdeixis will be split up into two rules, one corresponding to 
Rinfinpastsuperdeixis, i.e. Rfinpastsuperdeixis1,
 and the other corresponding to Rfinpastsuperdeixisspec 
and Rinfinpastsuperdeixisspec, i.e.\ Rfinpastsuperdeixis2.\\
An interlingua expression Lpastpastsuperdeixis will be added for these rules.
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_passivegewordendeletion}
\begin{classdescr}
\kind optional transformation class plus filter
\classtask to delete the passive auxiliary {\em worden} in passives if
the auxiliary verb {\em  zijn} has been introduced
\end{classdescr}

\begin{members}

\begin{member}
\rulename Tpassivegewordendeletion
\ruletask Delete "geworden" that resulted from the passive auxiliary
"worden" and the application of the perfective retrospective rule.
\file dutch:rc\_retro.mrule (mrules 76)
\semantics \nosemantics
\example geslagen geworden zijn $\leftrightarrow$ geslagen zijn
\remarks\mbox{}

\end{member}

\end{members}

{\bf Filters} The following filter follows this transformation:
\begin{description}
\rulename Fpassivegewordendeletion
\ruletask Filter "geworden" that resulted from the passive auxiliary
"worden" and the application of the perfective retrospective rule.
\file dutch:rc\_retro.mrule (mrules 76)

\end{description}

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}



\begin{mruleclass}{Superdeixisadaptation}
\begin{classdescr}
\kind obligatory transformations and iterative transformationsplus filters
\classtask To check the superdeixis of the embedded 
propositional phrases and sentences with the (super)deixis 
of the clause and to adapt superdeixis (and deixis)
of embedded propositional phrases 
and clauses on behalf of the surface parser.\\
There are two kinds of superdeixis adaptation transformations: non-iterative 
and iterative. The non-iterative ones
form an {\em obligatory} transformation class 
with a {\em default} transformation which is the negation of all other 
transformations of that class. This class is followed by several 
iterative superdeixis adaptation transformation (classes) each with a filter.
This means that the default transformation of the obligatory non-iterative 
class also must let pass the iterative cases, but of course, these cases are not 
formulated as the negation of the iterative rules!!\\
There are in general 5 subcases for the embedded propositional phrase or 
sentence in every transformation or subrule of a 
transformation, although they do not apply always in every transformation.

\begin{enumerate}
\item {\bf independent }:\\
No check, no adaptation.\\
It is checked if the verb of the CLAUSE can have independent complements
(AUX\_tempindepcomplvps).\\
(Only applies to finite sentences and a special case of infinite sentences)
\item {\bf dependent finite present }:\\
Check + adaptation of deixis and superdeixis.\\
(Only applies to sentences)
\item {\bf dependent finite past}:\\
Check + adaptation of deixis and superdeixis.\\
(Only applies to sentences)
\item {\bf dependent infinite present}:\\
Check + adaptation of superdeixis.
\item {\bf dependent infinite past}:\\
Check + adaptation of superdeixis.

\end{enumerate}
In analysis these transformation cause a lot of ambiguity. Therefore, 
efficiency and Rosetta3-plausibility conditions have been added to these 
transformations. 
\begin{itemize}
\item Tests for the presence of adverbials are added to cut off some possible 
paths here instead of in the deixis rules 
(QUOTE\_temprefnotfound). The test for the correct adverbial is 
left to the deixis rules. 
\item It seemed plausible that only infinite sentences that contain {\em hebben
/zijn} \'{a}nd an overt reference time adverbial can be independent.
For this purpose the transformations for {\em embedded} sentences 
have been split into two subrules: one that tests for the presence of {\em 
hebben/zijn} and one that tests for the absence of {\em hebben/zijn}.
\item The combinations present (super)deixis of the clause with present deixis 
(i.e.\ independent!) without an overt adverbial in the embedded sentence and 
past 
(super)deixis of the clause with past deixis (i.e.\ independent!) without an 
overt adverbial in the embedded sentence are not considered plausible in an 
application as Rosetta3 and ruled out in these transformations.
\end{itemize}
The motivation and historical reasons for the (actual form of the) 
transformations can be found in doc.\ R263 and a description of the treatment 
of superdeixis through the whole grammar in doc.\ R320.\\
The two files that contain the superdeixis adpatation transformations are 
organized roughly in the following way: tc\_superdeixisadaptation contains the 
transformations with embedded {\em sentences} and tc\_superdeixisadaptation2 
the ones with embedded {\em xpprops}and {\em xps}.\\
First the non-iterative obligatory rule class will be treated and then the 
iterative cases.
\end{classdescr}

\begin{members}
\begin{member}
\rulename Tnosuperdeixisadaptation
\ruletask `Default' rule for the case there was no proposition substitution 
before the time rules as is treated in the other rules of this transformation
class (mentioned cases) and for the case there was or was not proposition 
substitution before the time rules of the iterative kind (not-mentioned cases).
\\
Cases:
\begin{enumerate}
\item No temporal
SENTENCE under CLAUSE with relation {\em complrel, prepobjrel, 
subjrel,extraposrel }.
\item No SENTENCE under VERBP with relation {\em complrel, prepobjrel}
\item No OPEN- or CLOSEDXPPROP with X = ADJ, N, ADV, VERB or PREP 
with relation {\em complrel, dirargrel, locargrel or predrel} under VERBP 
\item No PREPP  with an OPEN- or CLOSEDXPPROP 
with X = ADJ, N, ADV, VERB or PREP or a SENTENCE with relation {\em objrel} or 
{\em complrel} as daughter,  under VERBP with relation {\em prepobjrel}.
\item No ADJP with an NP, ADVP, PREP or QP with relation {\em vorobjrel, hoprel 
or degreemodrel} as daughter,  under VERBP with relation {\em predrel}.
\end{enumerate}
\file dutch:tc\_superdeixisadaptation.mrule (mrules 73)
\semantics \nosemantics
\example:\\
hij werkt\\
Hij eet een appel\\
Hij is ziek\\
Hij is ziek genoeg om naar huis te gaan?\\
Is hij ziek, dan zwemmen we niet
\remarks\mbox{}

\end{member}
\begin{member}
\rulename Tsuperdeixisadaptation1
\ruletask Check superdeixis of the complement SENTENCE, that is a daughter of 
CLAUSE and has relation {\em complrel, prepobjrel, subjrel or extraposrel},
 with the superdeixis or 
deixis value of the higher CLAUSE in case of temporally dependent complement 
SENTENCE. The superdeixis of the complement SENTENCE is set omega/given a 
value present or past and the deixis value is given a value present or past/ 
set omega in the finite cases . (This is needed for efficiency 
reasons of the surface parser.) For temporally independent sentences this rule 
does nothing. 
\file dutch:tc\_superdeixisadaptation.mrule (mrules 73)
\semantics \nosemantics
\example (ge\"{e}xtraponeerd):\\
 Ik weet dat Jan ziek is\\
Ik wist dat Jan ziek was\\
Ik zie Jan komen\\
Ik zag Jan komen\\
Jan denkt het gisteren te hebben gedaan
\remarks The transformation has been split into two subrules, one for the 
absence of {\em hebben/zijn} in which case the independent case does not apply 
to infinite SENTENCEs and one for the presence of {\em hebben/zijn} in which 
case an independent infinite SENTENCE is possible in case a referential 
adverbial is present (NOT QUOTE\_temprefnotfound).

\end{member}
\begin{member}
\rulename Tsuperdeixisadaptation2
\ruletask Check superdeixis of the complement SENTENCE, that is a daughter of 
VERBP and has relation {\em complrel, prepobjrel},
 with the superdeixis or 
deixis value of the higher CLAUSE in case of temporally dependent complement 
SENTENCE. The superdeixis of the complement SENTENCE is set omega/given a 
value present or past and the deixis value is given a value present or past/ 
set omega in the finite cases . (This is needed for efficiency 
reasons of the surface parser.) For temporally independent sentences this rule 
does nothing. 
\file dutch:tc\_superdeixisadaptation.mrule (mrules 73)
\semantics \nosemantics
\example :\\
 Ik weet Jan ziek is\\
Ik wist dat Jan ziek was\\
Ik zie Jan komen\\
Ik zag Jan komen\\
Jan denkt het gisteren te hebben gedaan
\remarks The transformation has been split into two subrules, one for the 
absence of {\em hebben/zijn} in which case the independent case does not apply 
to infinite SENTENCEs and one for the presence of {\em hebben/zijn} in which 
case an independent infinite SENTENCE is possible in case a referential 
adverbial is present (NOT QUOTE\_temprefnotfound).

\end{member}

\begin{member}
\rulename Tsuperdeixisadaptation3
\ruletask Check superdeixis of XPPROP with superdeixis or 
deixis of the higher CLAUSE in case of temporally dependent propositional 
phrases within the VERBP.
The superdeixis of the complement phrase is set omega/given a 
value present or past.(This is needed for efficiency 
reasons of the surface parser.) 
\file dutch:tc\_superdeixisadaptation2.mrule (mrules 104)
\semantics \nosemantics
\example:\\
Ik vind hem gek\\
Ik vind hem de echte baas\\
Hij reed naar de schuur
\remarks There is a subrule for every OPEN- or CLOSEDXPPROP with X = 
ADJ, N etc. This rule could have written down in a shorter way, but at the time 
this rule was written the necessary notation with N.REC did not exist yet.

\end{member}
\begin{member}
\rulename Tsuperdeixisadaptation4
\ruletask Check superdeixis of XPPROP with superdeixis or 
deixis of the higher CLAUSE in case of temporally dependent propositional 
phrases in 
prepositional objects.
The superdeixis of the complement phrase is set omega/given a 
value present or past.(This is needed for efficiency 
reasons of the surface parser.) 
\file dutch:tc\_superdeixisadaptation2.mrule (mrules 104)
\semantics \nosemantics
\example:\\
hij beschouwde hem als de koning?
\remarks There is a subrule for every OPEN- or CLOSEDXPPROP with X = 
ADJ, N etc. This rule could have written down in a shorter way, but at the time 
this rule was written the necessary notation with N.REC did not exist yet.

\end{member}

\begin{member}
\rulename Tsuperdeixisadaptation5
\ruletask Check superdeixis of the complement SENTENCE, that is a daughter of 
{\em prepobjrel}/PREPP and has relation {\em objrel},
 with the superdeixis or 
deixis value of the higher CLAUSE in case of temporally dependent complement 
SENTENCE. The superdeixis of the complement SENTENCE is set omega/given a 
value present or past and the deixis value is given a value present or past/ 
set omega in the finite cases . (This is needed for efficiency 
reasons of the surface parser.) For temporally independent sentences this rule 
does nothing. 
\file dutch:tc\_superdeixisadaptation.mrule (mrules 73)
\semantics \nosemantics
\example:\\
 Ik reken erop dat Jan ziek is\\
Ik rekende erop dat Jan ziek was\\
Ik reken erop weg te gaan\\
Ik rekende erop weg te gaan\\
Jan geloofde erin het gisteren te hebben gedaan
\remarks The transformation has been split into two subrules, one for the 
absence of {\em hebben/zijn} in which case the independent case does not apply 
to infinite SENTENCEs and one for the presence of {\em hebben/zijn} in which 
case an independent infinite SENTENCE is possible in case a referential 
adverbial is present (NOT QUOTE\_temprefnotfound).

\end{member}

\begin{member}
\rulename Tsuperdeixisadaptation6
\ruletask Check superdeixis of ADVP, PREPP, NP or QP as modifiers of ADJ
 under ADJP with superdeixis or 
deixis of the higher CLAUSE.
The superdeixis of ADVP, PREPP, NP or QP is set omega/given a 
value present or past.(This is needed for efficiency 
reasons of the surface parser.) 
\file dutch:tc\_superdeixisadaptation2.mrule (mrules 104)
\semantics \nosemantics
\example Hij is [erg ziek]
\remarks The reason this adaptation transformation is necessary here is 
that the modification rules with ADVP, PREP, NP and QP in de ADJPPPROP grammar 
are ordered before the (super)deixis rules.\\
There is a subrule for every XP with X =
N, ADV etc. This rule could have written down in a shorter way, but at the time 
this rule was written the necessary notation with N.REC did not exist yet.

\end{member}

\begin{member}
\rulename Tidsuperdeixisadaptation
\ruletask Let through propositional constituents with omega value for 
deixis and superdeixis.
\file dutch:tc\_superdeixisadaptation2.mrule (mrules 104)
\semantics \nosemantics
\example Hij liet hem in de steek
\remarks\mbox{}

\end{member}

\begin{member}
\rulename Tsuperdeixisadaptation7
\ruletask Check superdeixis of SENTENCE as modifier
 under ADJP with superdeixis or 
deixis of the higher CLAUSE.
The superdeixis of SENTENCE is set omega/given a 
value present or past.(This is needed for efficiency 
reasons of the surface parser.) 
\file dutch:tc\_superdeixisadaptation2.mrule (mrules 104)
\semantics \nosemantics
\example hij is ziek genoeg om naar huis te gaan
\remarks This is a {\bf recursive} transformation.\\
It is assumed that this kind of modifier sentences are always 
infinite and temporally dependent, but if they were independent, then this rule 
would not apply, because this is a recursive rule and in in independent cases 
it is not necessary to to do anything. The eficiency and plausibility 
conditions for those cases should be carried out by special filters.\\
The reason this adaptation transformation is necessary here is 
that the modification rules in de ADJPPPROP grammar 
are ordered before the (super)deixis rules.
 
\end{member}
\begin{member}
\rulename Fsuperdeixisadaptation7
\ruletask Filter for the superdeixis check of SENTENCE as modifier
 under ADJP with superdeixis or 
deixis of the higher CLAUSE.
\file dutch:tc\_superdeixisadaptation2.mrule (mrules 104)
\semantics \nosemantics
\example hij is ziek genoeg om naar huis te gaan
\remarks\mbox{ }

\end{member}

\begin{member}
\rulename Tsuperdeixisadaptation8
\ruletask Check and adapt superdeixis of a sentence in leftdislocrel or 
adverbial sentences with a VERBP, except for temporal adverbial sentences.
\file dutch:tc\_superdeixisadaptation.mrule (mrules 73)
\semantics \nosemantics
\example Hoewel hij ziek is, komt hij.
\remarks This is a {\bf recursive} transformation.\\
The transformation has been split into two subrules, one for the 
absence of {\em hebben/zijn} and one for the presence of {\em hebben/zijn} 
for historical reasons. This is not necessary anymore, because the rule only 
applies in the dependent cases. In the independent cases this recursive 
transformation does not apply. The efficiency and plausibility conditions for 
those cases are formulated in a special filter: Ftempindep1.\\
The splitting into two subrules will be removed.

\end{member}
\begin{member}
\rulename Fsuperdeixisadaptation8
\ruletask Filter for check and adaptation of
 superdeixis of a subordinate sentence with a VERBP
in leftdislocrel or adverbial 
sentences, except for temporal sentences.
\file dutch:tc\_superdeixisadaptation.mrule (mrules 73)
\semantics \nosemantics
\example
\remarks The splitting into two subrules will be removed.

\end{member}

\begin{member}
\rulename Tsuperdeixisadaptation9
\ruletask Check and adapt superdeixis of a subordinate sentence without a VERBP
in leftdislocrel or 
adverbial sentences of that kind, except for temporal sentences.
\file dutch:tc\_superdeixisadaptation2.mrule (mrules 104)
\semantics \nosemantics
\example Is hij ziek, dan zwemmen we niet
(without a VP in the subordinate clause)
\remarks This a {\bf recursive} transformation.\\
The transformation has been split into two subrules, one for the 
absence of {\em hebben/zijn} and one for the presence of {\em hebben/zijn} 
for historical reasons. This is not necessary anymore, because the rule only 
applies in the dependent cases. In the independent cases this recursive 
transformation does not apply. The efficiency and plausibility conditions for 
those cases are formulated in a special filter: Ftempindep2.\\
The splitting into two subrules will be removed.
\end{member}
\begin{member}
\rulename Fsuperdeixisadaptation9
\ruletask Filter for check and adaptation of
 superdeixis of a subordinate sentence in leftdislocrel or adverbial 
sentences without a VERBP, except for temporal sentences.
\file dutch:tc\_superdeixisadaptation2.mrule (mrules 104)
\semantics \nosemantics
\example 
\remarks The splittingin into two subrules will be removed.

\end{member}

\begin{member}
\rulename Ftempindep1
\ruletask To filter temporally independent sentences with a VERBP
under CLAUSE with relation 
leftdislocrel or postsentadvrel in case:\\
1: present - present, without temporal adverbial in subordinate sentence\\
2: past - past, without temporal adverbial in subordinate sentence\\
These are not considered plausible within Rosetta3.

\file dutch:tc\_superdeixisadaptation.mrule (mrules 73)
\semantics \nosemantics
\example Hoewel hij ziek is, komt hij
\remarks The rule has been split up into two subrules, one for the absence 
of {\em hebben/zijn} and one for the presence of {\em hebben/zijn}. This 
splitting is unnecessary and will be removed.

\end{member}

\begin{member}
\rulename Ftempindep2
\ruletask To filter temporally independent non-temporal
sentences without a VERBP under CLAUSE in case:\\
1: present - present, without temporal adverbial in subordinate sentence\\
2: past - past, without temporal adverbial in subordinate sentence\\
These are not considered plausible within Rosetta3.
\file dutch:tc\_superdeixisadaptation2.mrule (mrules 104)
\semantics \nosemantics
\example
Is hij ziek, dan zwemmen we niet (no VP in adverbial clause)
\remarks The rule has been split up into two subrules, one for the absence 
of {\em hebben/zijn} and one for the presence of {\em hebben/zijn}. This 
splitting is unnecessary and will be removed.

\end{member}



\end{members}

\begin{description}
\item[Filters] All recursive superdeixis adaptation transformations (i.e. 7, 8, 
9) have a filter.
\end{description}

\begin{description}
\item[Speedrules] The recursive superdeixis adaptation transformations 8 and 9 
have the efficiency/plausibility filters Ftempindep 1 and 2 respectively.
There is a speed rule in the VERBPPROPformation subgrammar (Tsuperdeixisok)
to speed up analysis. It checks whether the value of the attribute superdeixis
has an omegavalue.
\end{description}


\noplannedrules

\begin{description}
\item[Rules not in control expression]: Tsuperdeixisadaptation6
\end{description}

\begin{comments}
\end{comments}

\end{mruleclass}


R0314_C.tex

\begin{mruleclass}{TC\_Sentenceok}
\begin{classdescr}
\kind obligatory transformation class
\classtask to account for the proper distribution of sentential complements
\end{classdescr}

\begin{members}
\begin{member}
\rulename SentenceOK0
\ruletask To let clauses without a complrel/SENTENCE pass the TC:
SentenceOK.
\file dutch:tc\_sentenceok.mrule (mrules22.mrule)
\semantics \nosemantics
\example (all clauses not containing a complrel/SENTENCE).
\remarks \noremarks

\end{member}
\begin{member}
\rulename Extraposition1
\ruletask to extrapose sentential complements
\file dutch:tc\_sentenceok.mrule (mrules22.mrule)
\semantics \nosemantics
\example hij [dat hij wegging] zei $\rightarrow$
hij zei(,) [dat hij wegging]; hij [om weg te gaan] beloofde $\rightarrow$
hij beloofde(,) [om weg te gaan]
\remarks 

\end{member}
\begin{member}
\rulename Extraposition2
\ruletask To extrapose sentential complements out of a prepobj/..
leaving {\em het} behind (which will turn later into {\em er})
\file dutch:tc\_sentenceok.mrule (mrules22.mrule)
\semantics \nosemantics
\example hij [op dat zij kwam ] rekende $\rightarrow$
hij [op het] rekende, dat zij kwam
\remarks \noremarks

\end{member}
\begin{member}
\rulename VerbRaising1
\ruletask To form Verb raising structures where no particle is left behind
\file dutch:tc\_sentenceok.mrule (mrules22.mrule)
\semantics \nosemantics
\example x1 [x1 opbellen] wou \to x1 [x1 ] wou opbellen\\
x1 [x1 op te bellen] probeerde \to x1 [x1 ] probeerde op te bellen\\
\remarks \noremarks

\end{member}
\begin{member}
\rulename Verbraising2
\ruletask To form Verb raising structures where the particle is left behind
and no {\em  te} is present
\file dutch:tc\_sentenceok.mrule (mrules22.mrule)
\semantics \nosemantics
\example x1 [x1 opbellen] wou \to x1 [x1 op] wou bellen
\remarks \noremarks

\end{member}
\begin{member}
\rulename TVerbraising3
\ruletask to form Verb raising structures where the particle is left behind
and no {\em  te} is present
\file dutch:tc\_sentenceok.mrule (mrules22.mrule)
\semantics \nosemantics
\example x1 [x1 op te bellen] probeerde \to x1 [x1 op] probeerde te bellen
\remarks \noremarks

\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
The approach currently contains an error caused by fact that the so-called
pruning transformations have been shifted to a later point in the derivation.
Because of this it is impossible to extrapose sentences that are a complement
to a verb that itself is a complement to a verb-raising verb, e.g. the sentence
{\em  Hij wil zeggen dat hij ziek is} cannot be derived. It can be ameliorated
by splitting this transformation class into a transformation class
containing the verbraising transformations and a class containing the 
extraposition transformations and adding one  Extraposition transformation.
The single TC is then replaced by (TC\_VerbRaising) . (TC\_Extraposition).
\end{comments}

\end{mruleclass}


\begin{mruleclass}{TC\_VPpruning}
\begin{classdescr}
\kind obligatory transformation class
\classtask to prune the node VERBP in embedded infinitival sentences that
           have been subject to Verb Raising
\end{classdescr}

\begin{members}
\begin{member}
\rulename TVPpruning
\ruletask  to prune the node VERBP in embedded infinitival sentences that
           have been subject to Verb Raising
\file dutch:tc\_vppruning.mrule (mrules21.mrule)
\semantics \nosemantics
\example
..dat hij [morgen [iemand]] wilde proberen te doden $\rightarrow$\\
..dat hij [morgen iemand] wilde proberen te doden
\remarks \noremarks

\end{member}
\begin{member}
\rulename TVPpruning0
\ruletask default transformation to let clauses pass this transformation class
           that contain no embedded infinitival sentence that has been subject
           to Verb Raising
\file dutch:tc\_vppruning.mrule (mrules21.mrule)
\semantics \nosemantics
\example hij zwemt \to hij zwemt
\remarks \noremarks

\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}


\begin{mruleclass}{Auxadaptation}
\begin{classdescr}
\kind optional transformation  class
\classtask to adapt the structure w.r.t. the position of auxiliary verbs
\end{classdescr}


The following transformations exist in tc\_auxadapt
\begin{description}
  \item[THAtoA1] h/[proberen te werken] a/heeft  $\rightarrow$\\ 
                h/[a/heeft h/[proberen te werken]]\\
                a/[kunnen worden ] a/heeft  $\rightarrow$\\ 
                a/[a/heeft h/[kunnen worden ]]\\
  \item[FHAtoA1] filter associated to THtoA1
  \item[THtoA2] h/gedood a/heeft $\rightarrow$\\ 
                h/[heeft gedood] (optional, analysis only)
  \item[THtoA3] [opgebeld] heeft $\rightarrow$\\
                 op h/[heeft gebeld] (optional, analysis only)
  \item[TPtoA1] h/[aan het werken] p/geweest a/is $\rightarrow$\\
                h/[aan het werken] p[a/is h/geweest]
  \item[FpreAux] prefilter to speed up analysis. It rejects structures that
                  contain a V with V.status IN [AuxV, teAuxV]
\end{description}

The transformations THtoP1, THtoP2, FHtoP, TPtoA2 that were planned originally
have been postponed, since the relevant verbs (zitten te, staan te ) cannot be
dealt with yet, and will probably be treated as main verbs.


\begin{members}
\begin{member}
\rulename THAtoA1
\ruletask To form a verbal complex from an infinitival complex and
an perfect auxiliary verb
\file dutch:tc\_auxadapt.mrule (mrules20.mrule)
\semantics \nosemantics
\example
[proberen te werken] heeft \to [heeft [proberen te werken]]
\remarks \noremarks

\end{member}
\begin{member}
\rulename HtoA2
\ruletask (analytically only): To simplify a verbal complex consisting
of a past participle and an auxiliary verb.
\file dutch:tc\_auxadapt.mrule (mrules20.mrule)
\semantics \nosemantics
\example
gedood heeft/hebben \to heeft/hebben gedood 
gedood werd/worden  \to werd/worden gedood
gedood is/zijn    \to is/zijn gedood
\remarks \noremarks

\end{member}
\begin{member}
\rulename THtoA3
\ruletask (analytically only) to simplify a verbal complex consisting
of a past participle and an auxiliary verb, if there is a particle
\file dutch:tc\_auxadapt.mrule (mrules20.mrule)
\semantics \nosemantics
\example [opgebeld] heeft $\rightarrow$\\
                 op h/[heeft gebeld]
\remarks \noremarks

\end{member}
\begin{member}
\rulename TPtoA1
\ruletask (analytically only) to simplify a verbal complex consisting
of a past participle functioning as a progauxrel 
and an auxiliary verb.
\file dutch:tc\_auxadapt.mrule (mrules20.mrule)
\semantics \nosemantics
\example
dat hij aan het werken/opbellen geweest is $\rightarrow$
dat hij aan het werken/opbellen is geweest
\remarks \noremarks

\end{member}
\end{members}

{\bf Filters} Associated filters are:
\begin{members}
\begin{member}
\rulename FHAtoA1
\ruletask To guarantee applicability of THAtoA1. 
\file dutch:tc\_auxadapt.mrule (mrules20.mrule)
\remarks \noremarks

\end{member}
\end{members}
{\bf Speed Rules} Associated Speed rules are
\begin{members}
\begin{member}
\rulename FpreAux
\ruletask  prefilter to speed up analysis. It rejects structures that
                  contain a V with V.status IN [AuxV, teAuxV]
\file dutch:tc\_auxadapt.mrule (mrules20.mrule)
\remarks \noremarks

\end{member}
\end{members}

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}


\begin{mruleclass}{TC\_Control}
\begin{classdescr}
\kind obligatory transformation class
\classtask to deal with control (the interpretation of nonovert subjects of
infinitival sentences) and to deal with the interpretation of nonovert subjects
of OPENXPPROPs. It also adapts the structure of OPENXPPROPs and CLOSEDXPPROPs,
turning OPENXPPROPs into XPs and CLOSEDXPPROPs into objrel/NP(VAR) + XP.
\end{classdescr}


The following Obligatory Control rules exist

\begin{description}
   \item[TControl0] for CLAUSEs without OPENXPPROPs, CLOSEDXPPROPs or
                    infinitival SENTENCES.
   \item[TOblControl1a] OPENADJPPPROP, object antecedent
   \item[TOblControl1b] OPENADJPPPROP, subject antecedent
   \item[TNoControl1]   CLOSEDADJPPROP
   \item[TOblControl2a] OPENADJPPPROP in prepobjrel/.., object antecedent
   \item[TOblControl2a] OPENADJPPPROP in prepobjrel/.., subject antecedent
   \item[TNoControl2]   CLOSEDADJPPROP in prepobjrel/..
   \item[TOblControl3a] OPENNPPROP, object antecedent, idrel and predrel
   \item[TOblControl3b]  OPENNPPROP, subject antecedent, idrel and predrel
   \item[TNoControl3] CLOSEDNPPROP, predrel
   \item[TNoControl3id] CLOSEDNPPROP, idrel\\
   \item[TOblcontrol7a] OPENADVPPROP, object antecedent, locargrel, dirargrel
   \item[TOblcontrol7b] OPENADVPPROP, subject antecedent, locargrel, dirargrel
   \item[TNocontrol7] CLOSEDADVPPROP, locargrel, dirargrel
   \item[TOblControl4a] OPENNPPROP, object antecedent, idrel and predrel, in
                         prepobjrel/..
   \item[TOblControl4b] OPENNPPROP, subject antecedent, idrel and predrel, in
                         prepobjrel/..
   \item[TNoControl4] CLOSEDNPPROP, predrel. in prepobjrel/..
   \item[TNoControl4id] CLOSEDNPPROP, idrel. in prepobjrel/..
   \item[TOblControl5a] OPENPREPPPROP, object antecedent (VARPREPP)
   \item[TOblControl5b] OPENPREPPPROP, subject antecedent  (VARPREPP)
   \item[TNoControl5] CLOSEDPREPPPROP  (VARPREPP)
   \item[TOblControl5a1] OPENPREPPPROP, object antecedent  (PREPP)
   \item[TOblControl5b1] OPENPREPPPROP, subject antecedent  (PREPP)
   \item[TNoControl51] CLOSEDPREPPPROP  (PREPP)
   \item[TOblControl6a] SENTENCE, nonsubject antecedent
   \item[TOblControl6b] SENTENCE, subject antecedent
\end{description}

The following rules of Non Obligatory Control (NOC) exist:
\begin{description}
   \item[TNOC1] for objrel, indobjrel antecedents (not EMPTYVAR)
   \item[TNOC2] for subjrel antecedents (not EMPTYVAR)
   \item[TNOC3] for prepobj, aanobj, voorobj, byobj antecedents (Not EMPTYVAR)
   \item[TNOC4] split antecedents, subjrel
   \item[TNOC5] split antecedents, objrel, indobjrel
   \item[TNOC6] split antecedents, prepobjrel, aanobjrel, voorobjrel, byobjrel
   \item[TNOC7] EMPTYVAR antecedent, objrel, indobjrel
   \item[TNOC8] EMPTYVAR antecedent, subjrel
   \item[TNOC9] EMPTYVAR antecedent, byobjrel
\end{description}


All these rules assume that the sentence that the controlled subject is in
bears relation extraposrel/...
Rules must be added for cases where the relevant sentence bears the relation 
leftdislocrel (Are these possible in Dutch?, or are only NPs possible!).



\begin{members}

\begin{member}
\rulename TControl0
\ruletask To let closed sentences and clauses not containing 
sentences pass the control rules
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example Hij liet de mensen komen; Hij zag hem vallen.
Hij ging weg
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl1a
\ruletask To determine the interpretation of the subjrel/.. of an
OPENADJPPROP, and to remove the OPENADJPPROPnode
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example
dat hij de deur(x1) [ x1 groen ] verfde $\rightarrow$
dat hij de deur(x1) [ groen ] verfde. 
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl1b
\ruletask To determine the interpretation of the subjrel/.. of an
OPENADJPPROP, and to remove the OPENADJPPROPnode
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example
dat dit(x1) [x1 lekker] smaakte $\rightarrow$
dat dit(x1) [ lekker ] smaakte 
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNOControl1
\ruletask to deal with complrel/CLOSEDADJPPROPs
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example Ik vind hem goed; ik acht dit onjuist
[subjrel/dit interessant] lijkt $\rightarrow$ objrel/dit interessant lijkt
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl2a
\ruletask To interpret the subject of OPENADJPPROPs that are in a prepobjrel,
and to remove the OPENADJPPROP node, and its subject.
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example x1 x2 [in [x2 rood]]  veranderde  $\rightarrow$
x1 x2 [in rood]  ( Hij veranderde dit in rood )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl2b
\ruletask To interpret the subject of OPENADJPPROPs that are in a
prepobjrel, and to remove the OPENADJPPROP node, and its subject. 
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example x2 [in [x2 rood]]  veranderde  $\rightarrow$
x2 [in rood]  ( Dit veranderde in rood )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNoControl2
\ruletask To remove the CLOSEDADJPPROP node that is in a prepobjrel, 
and to turn its subject into a objrel/... 
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example x1 beschouwde [als [x2 gek]] $\rightarrow$
x1 beschouwde x2 als gek.  
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl3a
\ruletask To interpret the subject of OPENNNPPROPs, and to delete the 
OPENNPPROP. Antecedent: object. The OPENNPPROP can be predicational or 
identificational
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example
x1 x2 [x2 een schooier] noem $\rightarrow$ x1 x2 een schooier
(Ik noemde hem een schooier )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl3b
\ruletask To interpret the subject of OPENNNPPROPs, and to delete the 
OPENNPPROP. Antecedent: subject.
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example
Hij heet Piet  ( x1 heet [x1 Piet] ).
? Dit kost drie gulden
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNoControl3
\ruletask To delete CLOSEDNPPROP, and to turn its subject into an object
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example
x1 [x2 een aardige kerel] vind $\rightarrow$
x1 x2 een aardige kerel vind
( Piet vindt Klaas een ardige kerel)
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNoControlid
\ruletask To delete CLOSEDNPPROP, and to turn its subject into an object,
for identificational NPPROPs
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example
[dit het probleem] lijk- $\rightarrow$
dit [het probleem] lijk 
(Dit lijkt het probleem)
\remarks \noremarks

\end{member}
\begin{member}
\rulename Toblcontrol7a
\ruletask  to deal with OPENADVPPROPs, object antecedent, locargrel, dirargrel
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example
hij woont er
\remarks \noremarks

\end{member}
\begin{member}
\rulename Toblcontrol7b
\ruletask   to deal with
   OPENADVPPROPs, subject antecedent, locargrel, dirargrel
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example ik zet hem thuis
\remarks \noremarks

\end{member}
\begin{member}
\rulename Tnocontrol7
\ruletask to deal with
CLOSEDADVPPROPs, locargrel, dirargrel
\file dutch:tc\_control.mrule (mrules19.mrule)
\semantics \nosemantics
\example ik kreeg hem thuis/daar
\remarks \noremarks

\end{member}

\begin{member}
\rulename TOblControl4a
\ruletask To interpret the subject of the OPENNPPROP, and to delete this
subject, and the OPENNPPROP.
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1 x2 [tot[x2 president]] benoemde $\rightarrow$
x1 x2 to president benoemde
(Men benoemde hem tot president )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl4b
\ruletask To interpret the subject of the OPENNPPROP, and to delete this
subject, and the OPENNPPROP.
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1 x2 [tot[x2 president]] benoemde $\rightarrow$
x1 x2 to president benoemde
(Men benoemde hem tot president )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNoControl4
\ruletask To let closednpprops in a prepobjrel pass this TC
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
...dat x1 [voor [x2 de beste president van de VS]] houd- $\rightarrow$
...dat x1 x2 [voor de beste president van de VS] houd-\\
(* dat zij hem voor de beste president van de VS houdt*)
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNoControl4id
\ruletask To let closednpprops in a prepobjrel pass this TC
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
...dat x1 [voor [x2 de beste president van de VS]] houd- $\rightarrow$
...dat x1 x2 [voor de beste president van de VS] houd-\\
(* dat zij hem voor de beste president van de VS houdt*)
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl5a
\ruletask To delete OPENPREPPROP and interpret its subject as the object 
of the current CLAUSE.
To be added (perhaps): A postposition must be able to reanalyze with the verb, 
as e.g. in {\em dat hij {\bf het bos} is {\bf in} gereden} (Only if adjacent,
no object present(?)  etc.)
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1 x2 [x2 in de kast] zette $\rightarrow$
x1 x2 [in de kast] zette\\
(Piet zette het boek in de kast)\\
x1 x2 [x2 de garage in] reed $\rightarrow$
x1 x2 [de garage in] reed\\
(Piet reed de auto de garage in)
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl5b
\ruletask To delete OPENPREPPROP and interpret its subject as the subject 
of the current CLAUSE.
To be added (perhaps): A postposition must be able to reanalyze with the verb, 
as e.g. in {\em dat hij {\bf het bos} is {\bf in} gereden} (Only if adjacent,
no object present(?)  etc.)
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1  [x1 in de kast] lag $\rightarrow$
x1 [in de kast] lag\\
(Het boek lag in de kast)\\
x1 [x1 in de zak] zat$\rightarrow$
x1  [in de zak] zat\\
Het boek zat in de zak\\
x1 zich [x1 in Spanje] bevind $\rightarrow$
x1 zich [in Spanje] bevind\\
(Piet bevindt zich in Spanje) 
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNoControl5
\ruletask To let closedpreppprops pass the control rules and to turn their 
subject into an object, deleting the closedpreppprop.
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1 [x2 de schuur in] kreeg $\rightarrow$
x1 x2 [de schuur in] kreeg\\
( Ik kreeg hem de schuur in )
[x1 aan lager wal] raakte
x1 [aan lager wal raakte
( Hij raakte aan lager wal )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl5a
\ruletask To delete OPENPREPPROP and interpret its subject as the object 
of the current CLAUSE.
To be added (perhaps): A postposition must be able to reanalyze with the verb, 
as e.g. in {\em dat hij {\bf het bos} is {\bf in} gereden} (Only if adjacent,
no object present(?)  etc.)
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1 x2 [x2 in de kast] zette $\rightarrow$
x1 x2 [in de kast] zette\\
(Piet zette het boek in de kast)\\
x1 x2 [x2 de garage in] reed $\rightarrow$
x1 x2 [de garage in] reed\\
(Piet reed de auto de garage in)
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl5b
\ruletask To delete OPENPREPPROP and interpret its subject as the subject 
of the current CLAUSE.
To be added (perhaps): A postposition must be able to reanalyze with the verb, 
as e.g. in {\em dat hij {\bf het bos} is {\bf in} gereden} (Only if adjacent,
no object present(?)  etc.)
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1  [x1 in de kast] lag $\rightarrow$
x1 [in de kast] lag\\
(Het boek lag in de kast)\\
x1 [x1 in de zak] zat$\rightarrow$
x1  [in de zak] zat\\
Het boek zat in de zak\\
x1 zich [x1 in Spanje] bevind $\rightarrow$
x1 zich [in Spanje] bevind\\
(Piet bevindt zich in Spanje) 
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNoControl5
\ruletask To let closedpreppprops pass the control rules and to turn their 
subject into an object, deleting the closedpreppprop.
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1 [x2 de schuur in] kreeg $\rightarrow$
x1 x2 [de schuur in] kreeg\\
( Ik kreeg hem de schuur in )
[x1 aan lager wal] raakte
x1 [aan lager wal raakte
( Hij raakte aan lager wal )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl6a
\ruletask To interpret and to delete the subject NPVAR or CNVAR of a
complrel/SENTENCE with PROsubject = true, where the antecedent is an
object or an indirect object. (Obligatory Control)
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1 x2 [x2 x3 ] [dwong te lezen]  $\rightarrow$
x1 x2 [x2] dwong te lezen\\
(Piet dwong Klaas de boeken te lezen)\\
x1 x2 [x2 x3] [beval te lezen] $\rightarrow$
x1 x2 [x3] [beval te lezen]\\
(Piet beval Klaas de boeken te lezen )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TOblControl6b
\ruletask To interpret and to delete the subject NPVAR or CNVAR of a
complrel/SENTENCE with PROsubject = true, where the antecedent is a
subject. (Obligatory Control)
\file dutch:tc\_control2.mrule (mrules27.mrule)
\semantics \nosemantics
\example
x1 x2 [x1 x3 ] [beloofde te lezen]  $\rightarrow$
x1 x2 [x1] beloofdete lezen\\
(Piet beloofde Klaas de boeken te lezen)\\
x1 [x1 x3] [probeerde te lezen] $\rightarrow$
x1 [x3] [probeerde te lezen]\\
(Piet probeerde de boeken te lezen )
\remarks \noremarks

\end{member}




\begin{member}
\rulename TNOC1
\ruletask To interpret the subject of extraposed complement sentences as
identical to the direct object or the indirect object of the clause, and to
delete it 
\file dutch:tc\_noc.mrule
\semantics \nosemantics
\example
x1 x2 gedwongen heeft [ x2 de boeken te lezen ] $\rightarrow$
x1 x2 gedwongen heeft [ de boeken te lezen ]\\
(* Piet heeft hem gedwongen de boeken te lezen *)
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNOC2
\ruletask To interpret the subject of extraposed complement sentences as
identical to the subject of the CLAUSE, and to delete it 
\file dutch:tc\_noc.mrule
\semantics \nosemantics
\example
x1 x2 beloofd heeft [ x2 de boeken te lezen ] $\rightarrow$
x1 x2 beloofd heeft [ de boeken te lezen ]\\
(* Piet heeft hem beloofd de boeken te lezen *)
x1 geprobeerd heeft [ x1 de boeken te lezen ] $\rightarrow$
x1 geprobeerd heeft [ de boeken te lezen ]\\
(* Piet heeft geprobeerd de boeken te lezen *)
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNOC3
\ruletask To interpret the subject of extraposed complement sentences as
identical to the prepositional object (aanobjrel, voorobjrel or prepobjrel) of 
the CLAUSE, 
or as identical to the object of the byobjrel/ in the CLAUSE, and to
delete the interpreted subject.
\file dutch:tc\_noc.mrule
\semantics \nosemantics
\example
x1 aan x2 gevraagd heeft [ x2 de boeken te lezen ] $\rightarrow$
x1 aan x2 gevraagd heeft [ de boeken te lezen ]\\
(Piet heeft aan Klaas gevraagd de boeken te lezen )   
door x1 geprobeerd werd [ x1 de boeken te lezen ] $\rightarrow$
door x1 geprobeerd werd [ de boeken te lezen ]\\
( Er werd door Piet geprobeerd de boeken te lezen )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNOC4
\ruletask To interpret the subject of extraposed complement sentences as
referring to a group containing the reference of the subject of the CLAUSE, and
to delete this subject. ( Split antecedents)
\file dutch:tc\_noc.mrule
\semantics \nosemantics
\example
Ik sprak met Piet af ons voortaan beter te gedragen
Jij sprak met Piet af je voortaan beter te gedragen.
\remarks \noremarks

\end{member}


\begin{member}
\rulename TNOC5
\ruletask To interpret the subject of extraposed complement sentences as
referring to a group containing the reference of the direct object or 
indirect object of the CLAUSE, and
to delete this subject. ( Split antecedents)
\file dutch:tc\_noc2.mrule
\semantics \nosemantics
\example
Ik vroeg Piet ons meer te gaan richten op deze problemen
Jij vroeg me ons meer te gaan richten op de volgende problemen
Hij vroeg Piet elkaar te beschermen tegen aanvallen van buitenaf.
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNOC6
\ruletask To interpret the subject of extraposed complement sentences as
referring to a group containing the reference of the antecedent in the 
the prepositional object (aanobjrel, voorobjrel or prepobjrel) of 
the CLAUSE, 
or in the byobjrel/ in the CLAUSE, and to
delete the interpreted subject.
\file dutch:tc\_noc2.mrule
\semantics \nosemantics
\example
Hij aan Piet gevraagd heeft [ BBIGPRO samen  de boeken te lezen ] $\rightarrow$
door x1 geprobeerd werd [ BBIGPRO samen de boeken te lezen ]\\
( Er werd door Piet geprobeerd samen de boeken te lezen )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNOC7
\ruletask To relate the subject of extraposed complement sentences to
to the EMPTYVAR direct object or the indirect object of the clause, and to
delete it. All persons are allowed for the embedded subject 
\file dutch:tc\_noc2.mrule
\semantics \nosemantics
\example
x1 x2 gevraagd heeft [ x2 je  in het openbaar beter te gedragen] $\rightarrow$
x1 x2 gevraagd heeft [ je in het openbaar beter te gedragen]\\
(* Ik heb gevraagd je in het openbaar beter te gedragen *)\\
x1 x2 gevraagd heeft [ x2 zich in het openbaar beter te gedragen] $\rightarrow$
x1 x2 gevraagd heeft [ zich in het openbaar beter te gedragen]\\
(* Ik heb gevraagd zich in het openbaar beter te gedragen *)\\
etc. for all persons
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNOC8
\ruletask To interpret the subject of extraposed complement sentences as
the EMPTYVAR subject of the CLAUSE, and to delete it 
\file dutch:tc\_noc2.mrule
\semantics \nosemantics
\example
??
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNOC9
\ruletask To interpret the subject of extraposed complement sentences 
as the object of the byobjrel/ in the CLAUSE, and to
delete the interpreted subject.
\file dutch:tc\_noc2.mrule
\semantics \nosemantics
\example
door x1 geprobeerd werd [ x1 de boeken te lezen ] $\rightarrow$
door x1 geprobeerd werd [ de boeken te lezen ]\\
( Er werd geprobeerd de boeken te lezen )
\remarks \noremarks

\end{member}


\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}


\begin{mruleclass}{TC\_Fincontrol}
\begin{classdescr}
\kind obligatory transformation class
\classtask to deal with control into finite subordinate clauses 
(in generation only). It is intended to be used when a translation occurred from
an infinite open sentence into a finite sentence.
\end{classdescr}

\begin{members}
\begin{member}
\rulename Tfincontrol1
\ruletask to take care of subject control into finite complements.
(in generation only). It is intended to be used when a translation occurred from
an infinite open sentence into a finite sentence.
\file dutch:tc\_control3.mrule (mrules111.mrule)
\semantics \nosemantics
\example
x1 meent [dat x1 komen moet ]  --> x1 meent dat hij komen moet\\
\remarks \noremarks

\end{member}
\begin{member}
\rulename Tfincontrol0
\ruletask to let structures where fincontrol need not apply pass this 
transformation class
\file dutch:tc\_control3.mrule (mrules111.mrule)
\semantics \nosemantics
\example x1 zwemt \to x1 zwemt
\remarks \noremarks
\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_PostPrepok}
\begin{classdescr}
\kind obligatory transformation class
\classtask to incorporate postpositions and the second part of a
circumposition into the verb when necessary.
\end{classdescr}

\begin{members}
\begin{member}
\rulename Tpostprepok1
\ruletask to incorporate the postposition into the VERB.
\file dutch:tc\_postprepok.mrule (mrules106.mrule)
\semantics \nosemantics
\example .. dat hij [het bos in] liep \to dat hij het bos [ inliep]
\remarks \noremarks

\end{member}
\begin{member}
\rulename Tpostprepok0
\ruletask default rule to let structures not containing a PREPP with a 
postposition pass this transformation.
\file dutch:tc\_postprepok.mrule (mrules106.mrule)
\semantics \nosemantics
\example x1 zwemt \to x1 zwemt
\remarks \noremarks

\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
Rules to incorporate the second part of circumposition have not been written
yet. If they are, then the surface parser must be adapted accordingly.
\end{comments}

\end{mruleclass}

\begin{mruleclass}{RC\_VPadv}
\begin{classdescr}
\kind iterative rule class
\classtask to introduce VP modifying adverbials
\end{classdescr}

The following rules exist:

\begin{description}
  \item[Rvpadv] inserts vpadv adverbials 
  \item[RagvpaDV1] inserts agvpadv adverbials with subject antecedent
  \item[RagvpAdv2] inserts agvpadv adverbials with byobject antecedent
  \item[Ragvpadv3] inserts agvpadv adverbials with object antecedent
  \item[Tnovpadvs] to speed up analysis. It disallows structures containing
                   vpadvs or agvpadvs with [synCLAUSE] as their advpatternefs

\end{description}

All Agvpadv adverbials have the attribute Qstatus set to false. Adverbials
with this attribute set to true cannot be dealt with adequately if the
method for adverbials with ADVPPROP's is used.


%diff advpprop advp : superdeixis, ascompl(?), aktionsarts (of advpprop)
\begin{members}

\begin{member}
\rulename Rvpadv
\ruletask inserts vpadv adverbials
\file dutch:rc\_vpadv.mrule (mrules114.mrule)
\semantics \nosemantics
\example het regent + x2 hard  \to het hard regent
\remarks \noremarks

\end{member}

\begin{member}
\rulename RAgvpadv1
\ruletask inserts agvpadv adverbials with subject antecedent
\file dutch:rc\_vpadv.mrule (mrules114.mrule)
\semantics \nosemantics
\example x1 zwemt + [x1 enthousiast x2] \to x1 enthousiast zwemt
\remarks \noremarks

\end{member}
\begin{member}
\rulename Ragvpadv2
\ruletask inserts agvpadv adverbials with byobject antecedent
\file dutch:rc\_vpadv.mrule (mrules114.mrule)
\semantics \nosemantics
\example door x1 gezwommen word + [x1 enthousiast x2] \to door x1 enthousiast 
           gezwommen word
\remarks \noremarks

\end{member}
\begin{member}
\rulename RAgvpAdv3
\ruletask inserts agvpadv adverbials with object antecedent
\file dutch:rc\_vpadv.mrule (mrules114.mrule)
\semantics \nosemantics
\example 
x1 aankwam + [x1 opzettelijk x2] \to [x1 opzettelijk aankwam
\remarks \noremarks

\end{member}
\end{members}

\nofilters
{\bf Speed Rules} Associated speed rules are:

\begin{members}
\begin{member}
\rulename Tnovpadvs
\ruletask to speed up analysis. It disallows structures containing
                   vpadvs or agvpadvs with [synCLAUSE] as their advpatternefs
\file dutch:rc\_vpadv.mrule (mrules114.mrule)
\remarks \noremarks

\end{member}
\end{members}

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}


\begin{mruleclass}{RC\_Emptysubstitution}
\begin{classdescr}
\kind iterative rule class
\classtask to substitute EMPTYs
\end{classdescr}

\begin{members}
\begin{member}
\rulename REmptysubstitution1
\ruletask To substitute EMPTYs as the obj of a byobjrel/..
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example
x2 [door x1] gelezen werd $\rightarrow$ x2 gelezen\\
( Het boek werd gelezen )
\remarks \noremarks

\end{member}
\begin{member}
\rulename REmptysubstitution2
\ruletask To substitute EMPTYs as objrel/..
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example
x1 x2 at $\rightarrow$ x1 at
(Hij at)
\remarks \noremarks

\end{member}
\begin{member}
\rulename REmptysubstitution3
\ruletask To substitute EMPTYs as indobjrel/..
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example
x1 x2 x3 gaf  $\rightarrow$ x1 x3 gaf
(Piet gaf een boek)
\remarks \noremarks

\end{member}
\begin{member}
\rulename REMPTYsubstitution4
\ruletask To substitute EMPTYs as the obj of a aanobjrel/..
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example
x2 [aan x1] zien (liet) $\rightarrow$ x2 zien (liet)\\
( Piet liet het boek zien)
\remarks \noremarks

\end{member}
\begin{member}
\rulename REmptysubstitution5
\ruletask To substitute EMPTYs as subjrel/..
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example
x1 viel $\rightarrow$ ze vielen\\
x1 te vallen $\rightarrow$ ze te vallen
These cases will occur if an EMPTY occurs of a subject in some other
language, and the relevant verb cannot be passivized in Dutch.
Example: The beans were spilled $\rightarrow$ ze praatten hun mond voorbij
This is the only case, if the DECOMP part of this rule is removed. 
This rule cannot be motivated by considerations internal to Dutch,
so removing the DECOMP part seems a reasonable step. (not done yet)
The choice for spelling out the EMPTY as {\em ze} is
a rather arbitrary one. Notice that there are potentially problems with
reflexive spelling (How do you know at the moment of spelling out {\em
zich }, how the EMPTY antecedent is going to be spelled out?).
If the EMPTY can be spelled out in more than one way, a problem will arise!
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rprepemptysubst1
\ruletask to substitute EMPTYs for objects inside prepobrels
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example hij kijkt naar x2 \to hij kijkt
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rdiremptysubst1
\ruletask to substitute EMPTYs for dirargrels
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example
hij bracht het boek EMPTY $\rightarrow$\\
hij bracht het boek
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rzeemptysubst
\ruletask to substitute an EMPTY for a subject variable and spell it out
as {\em  ze}.
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example x1 dansen \to ze dansen
\remarks \noremarks

\end{member}
\begin{member}
\rulename RIDEMPTYsubstitution1
\ruletask To substitute EMPTYs as the obj of a aanobjrel/..
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example
x2 [[aan x1] zien] (liet) $\rightarrow$ x2 zien (liet)\\
( Piet liet het boek zien)
\remarks \noremarks

\end{member}
\begin{member}
\rulename Rsadjemptysubst
\ruletask to substitute EMPTYs in ADJPs inside CLAUSEs
\file dutch:rc\_emptysubst.mrule (mrules17.mrule)
\semantics \nosemantics
\example hij is tevreden over x1 \to hij is tevreden
\remarks \noremarks

\end{member}
\end{members}

\nofilters

\noindent
{\bf Speed Rules} Associated Speed Rules are:
\begin{description}
\rulename TNoPassORbyobj
\ruletask to speed up analysis. It filters passive structures that do not 
contain a {\em byobjrel}.
\file dutch:tc\_speed.mrule (mrules94.mrule)
\remarks \noremarks
\end{description}


\noplannedrules

\norulesnotince

\begin{comments}
There are a number of problems with empty substitution rules. Most of them
arise because a splitting up of the empty into a numbe rof them makes it
difficult or impossible to get the right mapping of EMPTY's from one langiage 
onto another.
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_Prostatus}
\begin{classdescr}
\kind optional transformation class
\classtask to determine the value of the attribute PROsubject.
\end{classdescr}

\begin{members}
\begin{member}
\rulename TPROstatus1
\ruletask To make optionally 'open' clauses
\file dutch:tc\_prostatusassignment.mrule (mrules8.mrule)
\semantics \nosemantics
\example \noexample
\remarks \noremarks

\end{member}
\end{members}

\nofilters

\noindent
{\bf Speed Rules} Associated Speed Rules are:
\begin{description}
\rulename FPreProstatus
\ruletask it filters structures with the attribute PRosubject = true
\file dutch:tc\_speed.mrule (mrules94.mrule)
\remarks \noremarks
\end{description}

\noplannedrules

\norulesnotince

\begin{comments}
This transformation class was planned originally in the CLAUSEtoSENTENCE
subgrammar. It has been moved to this position, before tc\_objectok,
because the tc\_objectok transformations would not allow indefinite subjects
of e.g. ergative verbs. As  a consequence, a sentence such as 
{\em  hij wil komen} could not be derived, because the part [objrel/x1 komen] would
always be turned into [erEC objrel/x1 komen], and never into 
[subjrel/x1 komen]. This situation has been ameliorated by applying this 
transformation class earlier, and by adapting the tc\_objectok transformations 
in such a way that the value of the attribute PROsubject of the CLAUSe record 
is taken into account.
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_Postsubjformation}
\begin{classdescr}
\kind optional transformation class plus filter
\classtask to form {\em postsubjrel}s out of {\em subjrel}s
\end{classdescr}

\begin{members}
\begin{member}
\rulename TPostsubjformation1
\ruletask To form postsubj-s out of subjs if the subject is indefinite,
not universally quantifying and non-generic, and there is no object present
\file dutch:tc\_postsubjformation.mrule (mrules25.mrule)
\semantics \nosemantics
\example
subj/x1 op straat loopt $\rightarrow$ postsubj/x1 op straat loopt 
(iemand loopt op straat $\rightarrow$ er loopt iemand op straat )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TPostsubjformation2
\ruletask To form postsubj-s out of subjs if the subject is indefinite,
not universally quantifying and non-generic, and there is an indefinite
object present. In analysis the object may be definite as well.
\file dutch:tc\_postsubjformation.mrule (mrules25.mrule)
\semantics \nosemantics
\example
subj/x1 een boek koopt $\rightarrow$ postsubj/x1 een boek koopt 
(iemand koopt een boek $\rightarrow$ er koopt iemand een boek)
(analysis only:)
Er koopt iemand dit boek $\rightarrow$ iemand koopt dit boek
\remarks \noremarks

\end{member}
\begin{member}
\rulename FPostsubjformation1
\ruletask To guarantee that TPostsubjformation1 applies (generation only)
\file dutch:tc\_postsubjformation.mrule (mrules25.mrule)
\semantics \nosemantics
\example
subj/x1 op straat loopt $\rightarrow$ postsubj/x1 op straat loopt 
(iemand loopt op straat $\rightarrow$ er loopt iemand op straat )
\remarks \noremarks

\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_Objectok}
\begin{classdescr}
\kind obligatory transformation class
\classtask to guarantee that there is going to be a subject in the sentence
if required
\end{classdescr}

\begin{members}
\begin{member}
\rulename TObjectok0
\ruletask To let clauses that contain a subject, and no passive or
ergative verbs  pass this TC.
\file dutch:tc\_objectok.mrule (mrules16.mrule)
\semantics \nosemantics
\example
x1 loop $\rightarrow$ x1 loop
\remarks \noremarks

\end{member}
\begin{member}
\rulename TObjectOk1
\ruletask To turn the object into a subject if the verb is passive, or
ergative and not a caseassigner or reflexive. The object must be definite, or
indefinite and not nogeneric, if it is an NPVAR or NP, or it must be a CNVAR.
\file dutch:tc\_objectok.mrule (mrules16.mrule)
\semantics \nosemantics
\example
obj/x1 kwam $\rightarrow$ subj/x1 kwam\\
(Piet kwam)\\
indobj/x2, obj/x1 beviel $\rightarrow$ subj/x1, indobj/x2, beviel\\
( Het boek beviel haar)\\
door x2 obj/x1 gedood werd $\rightarrow$ subj/x1 door x2 gedood werd\\
(De soldaat werd door de vijand gedood)\\
zich vaak obj/x1 voordoen $\rightarrow$ subj/x1 zich voordoen\\
Deze ongelukken doen zich vaak voor
\remarks \noremarks

\end{member}
\begin{member}
\rulename Tobjectok2
\ruletask To perform subject to subject raising (also called NP-raising)
\file dutch:tc\_objectok.mrule (mrules16.mrule)
\semantics \nosemantics
\example
mij [ subj/Piet zich] [ lijkt aan te stellen]  $\rightarrow$\\
subj/Piet mij [ zich ] [ lijkt aan te stellen ]\\
( Piet lijkt mij zich aan te stellen )\\
\mbox{}[ EC  leuke mensen ] [schijnen te komen ] $\rightarrow$\\
EC [leuke mensen] [schijnen te komen ]\\
( Er schijnen leuke mensen te komen)\\
\mbox{}[ het bijltje er bij neer gegooid] [ schijnt te zijn ] $\rightarrow$\\
Het bijltje [ er bij neer gegooid] [ schijnt te zijn ]\\
( Het bijltje schijnt er bij neergegooid te zijn )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TObjectok3
\ruletask To insert the abstract element EC (as an NP) in the sentence
when there is no subject, but a postsubject. The function of EC is comparable
to {\em er}, but for several reasons {\em er} is inserted later.
These reasons are:
1) If {\em er} is inserted immediately, then the subject to subject raising 
rule must be complicated ({\em er} is not a subject, but it can raise).
2) If {\em er} is inserted immediately, then the subject verb agreement rule
(SVA) must be complicated (er is not a subject, but it is subject to SVA ).
3) If {\em er} is inserted immediately, then the rules for the distribution
of {\em er} are complicated (in the case of verb raising followed by S-pruning)
\file dutch:tc\_objectok.mrule (mrules16.mrule)
\semantics \nosemantics
\example
postsubjrel/een jongen [een boek kocht] $\rightarrow$\\
subjrel/NP[EC] postsubjrel/een jongen [een boek kocht]\\
( Er kocht een jongen een boek )
\remarks \noremarks

\end{member}
\begin{member}
\rulename Tobjectok4
\ruletask To insert NP[EC] in clause that do contain no  subject, nor a
postsubject nor a object, nor a complrel with a closed SENTENCE in which there
is a passive or ergative verb. 
\file dutch:tc\_objectok.mrule (mrules16.mrule)
\semantics \nosemantics
\example
gedanst werd $rightarrow$\\
EC gedanst werd\\
( Er werd gedanst )\\
geprobeerd werd [de boeken te verkopen] $rightarrow$\\
EC geprobeerd werd [de boeken te verkopen] \\
(Er werd geprobeerd de boeken te verkopen )
\remarks \noremarks

\end{member}
\begin{member}
\rulename TObjectok5
\ruletask To insert NP[EC] if there is an indefinite not universally
quantifying NPVAR object , or an object idiom chunk. 
\file dutch:tc\_objectok.mrule (mrules16.mrule)
\semantics \nosemantics
\example
objrel/een jongen gedood werd $\rightarrow$\\
EC een jongen gedood werd\\
(Er werd een jongen gedood)\\
\remarks \noremarks

\end{member}
\begin{member}
\rulename TObjectOk6
\ruletask 
To introduce ECNP, not requiring definiteness restrictions on the object,
if the verb is
ergative, or passive, and if the object does not contain a personal pronoun
\file dutch:tc\_objectok.mrule (mrules16.mrule)
\semantics \nosemantics
\example
io/Hem het meisje beviel $\rightarrow$\\
EC io/Hem het meisje beviel\\
([Hij zei dat] hem het meisje beviel)\\
io/Hem het boek gegeven werd$\rightarrow$\\
subj/EC io//hem het boek gegeven werd\\
( [Hij zei dat] hem het boek werd gegeven
\remarks \noremarks

\end{member}
\begin{member}
\rulename Tobjectok7
\ruletask to let structures with voice {\em dooractive} or {\em aanactive} pass
this transformation class without introducing a subject.
\file dutch:tc\_objectok.mrule (mrules16.mrule)
\semantics \nosemantics
\example aan x1 x2 lezen \to aan x1 x2 lezen\\
door x1 x2 schoonmaken \to door x2 x2 schoonmaken
\remarks \noremarks

\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_AdvControl}
\begin{classdescr}
\kind iterative transformation class with filter
\classtask to deal with control into adverbial sentences
\end{classdescr}


Transformations exist to deal with obligatory control of
infinitival adverbial sentences. 
It is assumed that only subjects can control such adverbial clauses.
For other controllers, if possible,  separate transformations must be made.

The transformation class must be applied iteratively. It is followed by
a filter. To speed up analysis, it is preceded by a prefilter.
The TC must be applied after tc\_objectok and before pruning of S.

The following transformations exist:

\begin{description}
\item[tadvcontrol1] deals with subject-control if the subject precedes the
adverbial sentence
\item[tadvcontrol2] deals with subject-control if the subject follows the
adverbial sentence
\item[fadvcontrol] filter to guarantee application of tadvcontrol1 and 
tadvcontrol2 when required
\item[fpreadvcontrol] filter that speeds up the analysis process
\end{description}
\begin{members}

\begin{member}
\rulename Tadvcontrol1
\ruletask deals with subject-control if the subject precedes the
adverbial sentence
\file dutch:tc\_control3.mrule (mrules111.mrule)
\semantics \nosemantics
\example x1 is [zonder x1 om te kijken] weggegaan \to
         x1 is [zonder om te kijken]  weggegaan \\
         x1 is  weggegaan [zonder x1 om te kijken] \to
         x1 is  weggegaan [zonder om te kijken] 
\remarks \noremarks

\end{member}
\begin{member}
\rulename Tadvcontrol2
\ruletask  deals with subject-control if the subject follows the
adverbial sentence
\file dutch:tc\_control3.mrule (mrules111.mrule)
\semantics \nosemantics
\example [zonder x1 om te kijken] x1 is  weggegaan \to
         [zonder om te kijken] x1 is   weggegaan 
\remarks \noremarks

\end{member}
\end{members}

{\bf Filters} Associated filters are:
\begin{members}
\begin{member}
\rulename Fadvcontrol
\ruletask  filter to guarantee application of tadvcontrol1 and 
tadvcontrol2 when required
\file dutch:tc\_control3.mrule (mrules111.mrule)
\remarks \noremarks
\end{member}
\end{members}

{\bf Speed Rules} Associated Speed rules:
\begin{members}
\begin{member}
\rulename Fpreadvcontrol
\ruletask filter that speeds up the analysis process. It filters all structures
containing an adverbial sentence without a {\em subjrel}.
\file dutch:tc\_control3.mrule (mrules111.mrule)
\remarks \noremarks

\end{member}
\end{members}
\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_SVA}
\begin{classdescr}
\kind obligatory transformation class
\classtask to deal with subject verb agreement
\end{classdescr}

\begin{members}
\begin{member}
\rulename SVA0
\ruletask To let non finite clauses pass the subject verb agreement TC
\file dutch:tc\_sva.mrule (mrules15.mrule)
\semantics \nosemantics
\example
x1 x2 kopen $\rightarrow$\\
x1 x2 kopen
\remarks \noremarks

\end{member}
\begin{member}
\rulename SVA1
\ruletask To make the verb agree in person and number with the subject.
If the subject is an NP  containing {\em dit, dat, het } or {\em EC}, then
this NP is made into a singular NP (it may be a plural NP up to this rule).
If the verb is hidden in a verbal complex, then the lowest finite verb and
all higher verbs are marked for person and number. In practice depth is 
maximally 1.
\file dutch:tc\_sva.mrule (mrules15.mrule)
\semantics \nosemantics
\example
Ik kom $\rightarrow$ ik kom\\
jij kom $\rightarrow$ jij komt\\
etc.\\
(de man) die kom $\rightarrow$ (de man) die komt\\
dit het boek ben $\rightarrow$ dit het boek is\\
dit de boeken ben $\rightarrow$ dit de boeken zijn\\
\remarks \noremarks

\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}


\begin{mruleclass}{Caseassignment}
\begin{classdescr}
\kind iterative transformation class plus filter
\classtask to assign nominative and accusative case
\end{classdescr}

\begin{members}
\begin{member}
\rulename TCaseAssignment1
\ruletask To assign accusative case to NPVARs, CNVARs and NPs that 
function as a predrel or, that function  as an objrel if the verb is a Case 
assigner and voice is not passive.\\

\file dutch:tc\_ca.mrule (mrules14.mrule)
\semantics \nosemantics
\example hij is hij \to hij is 'm
\remarks \noremarks

\end{member}
\begin{member}
\rulename tcaseassignment1a
\ruletask
In analysis to set the attribute {\em cases} of NPVAR, CNVAR, NP 
to the value [Nominative] if they function as an objrel, idrel or predrel.
If their value equals [Nominative] already, then the rule is not applicable
(to avoid infinite application of the rule )
\file dutch:tc\_ca.mrule (mrules14.mrule)
\semantics \nosemantics
\example er komt iemand \to er komt iemand
\remarks \noremarks

\end{member}
\begin{member}
\rulename TCaseAssignment2
\ruletask In analysis only: To reduce the value of the attribute cases of
NPVAR, CNVAR, NP to [Nominative]. In order to avoid an infinite loop, the
requirement that the attribute cases is not the set consisting of one element, 
i.e. Nominative has been added.
\file dutch:tc\_ca.mrule (mrules14.mrule)
\semantics \nosemantics
\example \noexample
\remarks \noremarks

\end{member}
\begin{member}
\rulename TCaseAssignment3
\ruletask to assign accustive case to the object inside a {\em prepobjrel, 
aanobjrel, voorobjrel} or {\em byobjrel}
\file dutch:tc\_ca.mrule (mrules14.mrule)
\semantics \nosemantics
\example x2 door hij vermoord \to x2 door hem vermoord
\remarks \noremarks

\end{member}
\begin{member}
\rulename TCaseAssignment4
\ruletask To assign accusative case to the embedded subject of a
closed infinitival clause if the governing verb is transitive, assigns Case
and the voice of its clause is not passive. If the embedded subject has been
shifted already, this case must be assigned to the relevant constituent in
shiftrel/... 
\file dutch:tc\_ca.mrule (mrules14.mrule)
\semantics \nosemantics
\example ik [ hij komen] zie \to ik [hem komen] zie
\remarks \noremarks

\end{member}


\end{members}

{\bf Filters} associated filters are:
\begin{members}
\begin{member}
\rulename FPreCaseAssignment1
\ruletask To guarantee the proper application of TCaseAssignment1 in 
analysis.
\file dutch:tc\_ca.mrule (mrules14.mrule)
\remarks \noremarks

\end{member}
\begin{member}
\rulename FPreCaseAssignment2
\ruletask In analysis only:  To guarantee the proper application of
TCaseAssignment2
\file dutch:tc\_ca.mrule (mrules14.mrule)
\remarks \noremarks

\end{member}
\begin{member}
\rulename FPreCaseAssignment3
\ruletask To guarantee the proper application of TCaseAssignment3 in 
analyis.
\file dutch:tc\_ca.mrule (mrules14.mrule)
\remarks \noremarks

\end{member}
\begin{member}
\rulename FPreCaseAssignment4
\ruletask To guarantee the proper application of TCaseAssignment4 in
analysis
\file dutch:tc\_ca.mrule (mrules14.mrule)
\remarks \noremarks

\end{member}
\begin{member}
\rulename FpostCaseAssignment1
\ruletask To guarantee the application of TCaseAssignment1 in the 
required cases. (i.e. especially in generation )
\file dutch:tc\_ca.mrule (mrules14.mrule)
\remarks \noremarks

\end{member}
\begin{member}
\rulename FPostCaseAssignment3
\ruletask To guarantee the application of TCaseAssignment3 in the right
cases
\file dutch:tc\_ca.mrule (mrules14.mrule)
\remarks \noremarks

\end{member}
\begin{member}
\rulename FPostCaseAssignment4
\ruletask To guarantee the correct applicatiuon of TCaseAssignment4
in the correct cases
\file dutch:tc\_ca.mrule (mrules14.mrule)
\remarks \noremarks

\end{member}
\begin{member}
\rulename Fpreca1a
\ruletask To guarantee the application of TCaseAssignment1a in the 
required cases. (i.e. especially in analysis)
\file dutch:tc\_ca.mrule (mrules14.mrule)
\remarks \noremarks

\end{member}

\end{members}
\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
In this transformation class an problem arose w.r.t nominative case assignment.
It turned out to be the case that an infinite loop could not be prevented in 
generation. This was caused by the fact that the default value of the attribute
{\bf cases} was a really occurring value. For this reason there is an 
asymmetry in nominative case assignment: for certain transformations only 
analytical versions have been written. It would perhaps also be possible to
write perfectly reversible rules, but then the rule would have to formulated in
such a way in generation that it would never be applicable. A general lesson to
be drawn: be very careful if a real value is taken as a default value for 
some attribute: you will
be punished for it as soon as iterative rules must refer to such attributes.
It is in general much more safe to take some abstract value (an Omegavalue)
as a default. Of course this holds only for attributes of non-basic 
expressions, so that for attributes of basic expressions  real values can be 
taken as default values (as is recommended in the document on DOMAIN T).
See als the transformations for {\em eform}-assignment in the NP subgrammar,
where a similar problem of looping arises due to the fact that the default value
is a real value.
\end{comments}

\end{mruleclass}


\begin{mruleclass}{TC\_Argreflspelling}
\begin{classdescr}
\kind iterative transformation class plus filter
\classtask to spell out variables that are coindexed with some other variable
in the structure with which it maintains a specific structural relation
as a reflexive pronoun.
\end{classdescr}

\begin{members}
\begin{member}
\rulename TArgreflspelling1
\ruletask to spell out a variable in VP as a reflexive pronoun if there is
a coindexed variable preceding VERBP under S
\file dutch:tc\_argreflspelling.mrule (mrules53.mrule)
\semantics \nosemantics
\example x1 x2 ziet \to x1 zichzelf ziet
\remarks 

\end{member}
\end{members}

{\bf Filters} Associated filters are:
\begin{members}
\begin{member}
\rulename Fargreflspelling1
\ruletask to guarantee application of Targreflspelling1
\file dutch:tc\_argreflspelling.mrule (mrules53.mrule)
\remarks \noremarks
\end{member}
\end{members}
{\bf Speed Rules} Associated Speed Rules are:
\begin{members}
\begin{member}
\rulename Fpreargrefl
\ruletask it speeds up analysis. Any structure containing a 
reflexive pronoun containing {\em zelf} is filtered.
\file dutch:tc\_argreflspelling.mrule (mrules53.mrule)
\remarks \noremarks
\end{member}
\end{members}


\norulesnotince

\begin{comments}
This transformation class consists of exactly one transformation at the moment.
This class must clearly be extended to deal with other cases, as specified in
doc. R0155, p. 8. (Jan Odijk - {\em Rule and Transformation Classes common to all
languages}).


This transformation class should perhaps be ordered after TC\_NPoverAdv to deal
with such cases as ..preadvrel/x1..VERBP[..../x1..]. Examples of such
such cases in an earlier version of the grammar were {\em ik toonde de man
aan zichzelf}. In the current version, however, the aan-PP can be treated as
a prepositional object as well, so that the need for the ordering relationship
proposed is at least diminished.
\end{comments}

\end{mruleclass}

\begin{mruleclass}{RC\_Reciprocalspelling}
\begin{classdescr}
\kind iterative rule class
\classtask to substitue reciprocal pronouns and relate them to their antecedents
\end{classdescr}

\begin{members}
\begin{member}
\rulename Rreciprocalsubst1
\ruletask to substitute reciprocal pronouns inside VERBP 
and relate them to their antecedent to the left of VERBP under CLAUSE
\file dutch:rc\_reciprocalspelling.mrule (mrules100.mrule)
\semantics \nosemantics
\example x1 x2 zie + elkaar \to x1 elkaar zie
\remarks \noremarks

\end{member}
\end{members}

\nofilters
{\bf Speed Rules } Associated Speed Rules are:
\begin{members}
\begin{member}
\rulename Fprerecipro1
\ruletask to speed up analysis. If the structure still contains {\em elkaar}
it is filtered.
\file dutch:rc\_reciprocalspelling.mrule (mrules100.mrule)
\remarks \noremarks

\end{member}
\end{members}

\noplannedrules

\norulesnotince

\begin{comments}
The rules contained in this rule class are very special M-rules that I would 
like to call Binding-M-rules. These rules substitute an NP headed by 
a reciprocal for some variable (for this reason they have a parameter 
containing the index of the variable to be substituted for), and they relate
this reciprocal NP to some antecedent, i.e. by mentioning in the rule some
other variable that serves as the antecedent and by imposing conditions on this
variable (it must be plural etc.). Since the choice of antecedent is 
information relevant to translation (see below) the index of the variable 
serving as an antecedent is stored in a parameter of the rule (antecedent 
paramewter). As a consequence, these rules are rules with two parameters
of type indextype.

The fact that these rules are very special caused problems in transfer
(indextype parameters (except LEVEL) could not be transferred). The 
solution of this problem caused a delay in writing additional rules for
this rule class. Evidently  it must be extended with more members.

The following facts show that the choice of antecedent is information relevant
to translation, and they therefore also show that the original treatment 
for reciprocal as proposed in doc. R0155 is wrong.


In the original treatment reflexive pronouns are dealt with as the spelling out
of a reflexive pronoun for one of two coindexed variables. This operation is
performed by a transformation: {\em x1 ziet x1 \to x1 ziet zichzelf}.

Reciprocals cannot be dealt with in the same manner, because in that case it
would be possible to translate {\em  zij zien zichzelf} into {\em  zij zien 
elkaar}. On the other hand, there must be a relation between the antecedent
and the reciprocal (cf. {\em *hij zag elkaar}). This was solved by assuming a 
meaningful rule (not a transformation) 
that would turn {\em x1 zien x1} into {\em x1 xien elkaar}.

Even this is not sufficient to account correctly for all facts. Consider a
verb such as {\em  iemand aan iemand voorstellen}. Both the direct object NP
and the subject NP can be antecedents for reciprocal pronouns in the 
{\em aan}-PP:

\begin{description}
  \item[] Ik stelde {\em hen} aan elkaar voor 
  \item[] {\em Zij} stelden mij aan elkaar voor
\end{description}

Suppose now that all three arguments of this verb are coindexed. Then, starting
from a structure of the form {\em  x1 stelde x1 aan x1 voor} four sentences
can be derived given the rules of reflexives and reciprocals:

\begin{description}
  \item[] Zij stelden zichzelf aan zichzelf voor 
  \item[] Zij stelden zichzelf aan elkaar voor 
  \item[] Zij stelden elkaar aan zichzelf voor
  \item[] Zij stelden elkaar aan elkaar voor
\end{description}

In the first sentence only reflexive spelling has applied.\footnote{ 
Notice by the way that
it can be derived in 
two ways: either the subject is the antecedent for both reflexive pronouns
(in this case again two derivations are possible: first reflexivizing the 
object and then the reflexiveizing the aan-object, or the other way around); or
the subject is the antecedent for the object-reflexive and the object
is the antedent for the reflexive in the {\em aan}-PP. }

In the fourth sentence reciprocal spelling has applied twice.

In the second and third sentence reciprocal spelling and reflexive spelling
have both  been applied once. Notice however, that it is not in any way 
recorded in the derivation tree to which occurrence of the variable x1 
reciprocal spelling has applied, and to which occurrence of variable x1
reflexive spelling has applied. For this reason the second and third 
sentence cannot be distinguished further and hence will be considered to be
synonimous!

This clearly is wrong. These sentences do not have the same meaning, and in 
fact the third sentence is semantically rather odd (one does not introduce
people to oneself). The semantic oddness cannot be taken into account in any
way
because the derivation trees of the second (perfect) sentence 
and the third (odd) sentence cannot be distinguished. Under this approach
also the second and the third sentence can be translated into each other.

To solve this problem the reciprocal rule has been turned into a substitution
rule, that substitutes a reciprocal NP, and that relates it to an antecedent
variable with a different index. The relation between antecedent and reciprocal
is encoded as an index-parameter on the reciprocal substitution rule.

The second sentence will now be derived in the following manner:
\begin{description}
  \item[Input] x1 stelden x1 aan x2 voor 
  \item[Reflexive] x1 stelden zichzelf aan x2 voor
  \item[Reciprocal(index=2, antecedent=1)] x1 stelden zichzelf aan x2 voor + 
elkaar \to x1 stelden zichzelf aan elkaar voor
\end{description}
 
The third sentence will now be derived in the following manner:

\begin{description}
  \item[Input] x1 stelden x2 aan x1 voor 
  \item[Reflexive] x1 stelden x2 aan zichzelf voor
  \item[Reciprocal(index=2, antecedent=1)] x1 stelden x2 aan zichzelf voor + 
elkaar \to x1 stelden elkaar aan zichzelf voor
\end{description}

Given this approach, the two sentences are clearly distinguished. The start 
rule for the second sentence applies to {\em  voorstellen} + x1 + x1 + x2
(in this order), the start rule for the third sentence applies to
{\em voorstellen} + x1 + x2 + x1 (in this order).


A disadvantage of the solution sketched is that no use can be made anymore of 
the pre-action to `know in advance' the features of the reciprocal pronoun.
Since the index of the variable that the reciprocal NP is substituted for
is not equal to the index of the antecedent, the appropriate features of the
reciprocal can be determined only when the relation with the antecedent is 
made. Before that point all possible variants of reciprocal pronouns must
be generated in parallel.
For Dutch and English this does not lead to inefficiencies, because there is
only one form of the reciprocal (it does not distinguish person, gender etc.)

In Spanish gender distinctions are made. This leads to a temporarily 
double generation, which is resolved in the reciprocalspelling rule.

For the distinction between singular and plural reciprocals 
({\em el uno al otro} vs. {\em  los unos a los otros}) and the related 
distinction between {\em each other} and {\em  one another} in English,
see the Spanish and English documentation.


\end{comments}

\end{mruleclass}

\begin{mruleclass}{Removetransformations}
\begin{classdescr}
\kind optional and iterative transformations
\classtask to remove elements from an infinitival sentence that has the feature
VRcompl set to true and to which Verb raising has been applied.
\end{classdescr}

\begin{members}
\begin{member}
\rulename TRemoveclitics1
\ruletask To move clitics out of a VRcomplement. If no  argument NPs are
inside the higher VP, then all clitics can be moved out. If there are
argument NPs in the higher VP, then only the clitics {\em het, 't} can be moved 
out
\file dutch:tc\_removers.mrule (mrules26.mrule)
\semantics \nosemantics
\example
dat hij hem ['t ] [beloofde uit te legen] $\rightarrow$
dat hij 't hem beloofde uit te leggen\\
dat hij [ 't 'm ] [wilde geven] $\rightarrow$\\
dat hij 't 'm [] [wilde geven]\\ 
dat hij [zich] [wilde verontschuldigen] $\rightarrow$\\
dat hij zich [wilde verontschuldigen]\\
dat hij [ 'm zich] [ probeerde te herinneren] $\rightarrow$\\
dat hij 'm zich [] [probeerde te herinneren]\\
NOT: cases such as:\\
dat hij de man [ 'm] [ beloofde te doden] $\rightarrow$\\
*dat hij 'm de man [beloofde te doden]\\
etc.
Clitics inside the VRcompl cannot be moved out later. Hence we cannot derive
{\em Ik liet de man 'm doden}. The reason for not being able to do so, is that some
sort of a global constraint holds that NPs cannot end up crossed, but here we
must make them cross twice. We cannot guarantee that the double crossing will
apply. 

A possible solution could be the following:
Allow subjrel to become preadvrel directly. This has not bneen done yet.
\remarks 

\end{member}
\begin{member}
\rulename TRemovesadvs1
\ruletask To remove outsidevpadverbs . Modal adverbs cannot occur
here, and are explicitly excluded by not allowing sentadvrels.
\file dutch:tc\_removers.mrule (mrules26.mrule)
\semantics \nosemantics
\example
..dat hij [morgen de boeken] [beloofde te lezen] $\rightarrow$\\
..dat hij morgen [de boeken] [beloofde te lezen]\\
..dat hij [in de tuin ] [probeerde te lezen] $\rightarrow$
..dat hij in de tuin [] [probeerde te lezen]\\
..dat hij [opzettelijk iemand] [probeerde te doden]  $\rightarrow$
..dat hij opzettelijk [iemand] [probeerde te doden]\\
(graag? andere subjadvps?)
\remarks \noremarks

\end{member}
\begin{member}
\rulename TRemovesubj1
\ruletask To remove the subject from a closed VRcomplement, and to make
it into a argrel. 
\file dutch:tc\_removers.mrule (mrules26.mrule)
\semantics \nosemantics
\example
..dat hij [de kinderen ] [ liet zwemmen]  $\rightarrow$\\
..dat hij de kinderen [] [liet zwemmen]\\

..dat hij [de man de kinderen] [liet doden] $\rightarrow$\\
..dat hij de man [de kinderen] [liet doden]\\

..dat EC [iemand ziek ] [schijnt te zijn ] $\rightarrow$\\
..dat EC iemand [ziek] [schijnt te zijn]

\remarks \noremarks

\end{member}
\begin{member}
\rulename Tremovesubj2
\ruletask  To remove the wh-subject from a closed VRcomplement, and to make
it into a shiftrel. 
\file dutch:tc\_removers.mrule (mrules26.mrule)
\semantics \nosemantics
\example
hij [wie het boek] liet lezen \to
wie hij[ het boek] liet lezen
\remarks \noremarks

\end{member}
\begin{member}
\rulename TRemoveVPArgs1
\ruletask To remove vp arguments out of VRcomplements
\file dutch:tc\_removers.mrule (mrules26.mrule)
\semantics \nosemantics
\example
..dat hij [ door Piet gedood] wilde worden $\rightarrow$\\
..dat hij door Piet [gedood] wilde worden\\
..dat hij [ op de boeken gerekend] kan hebben $\rightarrow$\\
..dat hij op de boeken [gerekend] kan hebben\\
\remarks \noremarks

\end{member}
\begin{member}
\rulename RemoveR1
\ruletask To remove erposrel and erqrel from VRcomplements. In the higher
clause no erposrel or erqrel may be present already. (This is practically
impossible: It would only be possible if there were idioms taking {\em er} and
apply V-raising: these do not exist according to Evers 75)
\file dutch:tc\_removers.mrule (mrules26.mrule)
\semantics \nosemantics
\example
..dat hij [ er ] [wilde wonen] $\rightarrow$\\
..dat hij er [] [wilde wonen]\\
..dat hij iemand [er] [liet wonen] $\rightarrow$\\
..dat hij er iemand [] [liet wonen]\\
..dat hij iemand [ er twee] [liet kopen] $\rightarrow$\\
..dat hij er iemand [twee] [liet kopen]\\
..dat hij iemand [ er ] [beloofde te gaan wonen] $\rightarrow$\\
..dat hij er iemand [] [beloofde te gaan wonen] 
\remarks \noremarks

\end{member}
\begin{member}
\rulename TRemoveshift1
\ruletask To remove shiftrels from Vrcompls to make pruning possible.
It must be a separate, optional transformation, since in analysis a shiftrel
in the higher clause can originate in the higher clause or in the VRcomplement,
so that both options must be attempted.
\file dutch:tc\_removers.mrule (mrules26.mrule)
\semantics \nosemantics
\example
...  hij [ welke boeken gelezen ] [probeerde te hebben] $\rightarrow$\\
... welke boeken hij [gelezen] [probeerde te hebben] 
\remarks \noremarks

\end{member}
\begin{member}
\rulename TRemovevpadvs1
\ruletask To move vp-internal adverbials out of the VRcomplement. 
\file dutch:tc\_removers.mrule (mrules26.mrule)
\semantics \nosemantics
\example
..dat hij de man [ met een hamer] [dwong te werken] $\rightarrow$\\
..dat hij de man met een hamer [] [dwong te werken]\\
..dat hij de man [ hard ] [dwong te werken] $\rightarrow$\\
..dat hij de man hard [] [dwong te werken]\\

Notice that in e.g.\\
..dat hij met een hamer de man dwong te werken \\
the phrase {\em met een hamer} modifies only {\em dwingen}

\remarks \noremarks

\end{member}
\begin{member}
\rulename TremoveargNP
\ruletask to remove NPs bearing relation argrel
\file dutch:tc\_removers.mrule (mrules26.mrule)
\semantics \nosemantics
\example hij [argrel/het boek ] zou willen laten lezen
\remarks \noremarks

\end{member}
\end{members}

\nofilters
{\bf Speed Rules} Associated Speed Rules are:


\begin{members}
\begin{member}
\rulename Fremovespeed1
\ruletask it filters VR structure in which the superordinate clause contains
{\em aanobjrel, voorobjrel, prepobjrel, locargrel, dirargrel, predrel}, or
{\em byobjrel}.
\file dutch:tc\_speed.mrule (mrules94.mrule)
\remarks \noremarks
\end{member}

\begin{member}
\rulename Fnoclitics
\ruletask it filters structures containing clitics under the superordinate
CLAUSE
\file dutch:tc\_speed.mrule (mrules94.mrule)
\remarks \noremarks
\end{member}

\begin{member}
\rulename Fnoshift
\ruletask it filters structures containing a {\em shiftrel} under the 
superordinate CLAUSE, 
unless this 
{\em shiftrel} is the adverb {\em dan}.
\file dutch:tc\_speed.mrule (mrules94.mrule)
\remarks \noremarks
\end{member}

\begin{member}
\rulename FnoR
\ruletask It filters structures containing {\em erposrel} or {\em erqrel} under
the superordinate CLAUSE
\file dutch:tc\_speed.mrule (mrules94.mrule)
\remarks \noremarks
\end{member}


\begin{member}
\rulename Fnoargs
\ruletask to speed up analysis. It checks whether there are no argrel/NPs
in the superordinate CLAUSE anymore
\file dutch:tc\_removers.mrule (mrules26.mrule)
\remarks \noremarks

\end{member}


\end{members}

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_SentPruning}
\begin{classdescr}
\kind obligatory transformation class
\classtask To prune a SENTENCE-node with attribute VRCompl=true
\end{classdescr}

\begin{members}
\begin{member}
\rulename TSpruning1
\ruletask To prune the SENTENCE node of VRcomplements
\file dutch:tc\_sentpruning.mrule (mrules12.mrule)
\semantics \nosemantics
\example
..dat hij de mensen [op] [probeerde te bellen $\rightarrow$
..dat hij de mensen op [probeerde te bellen]\\
..dat hij de mensen [gebeld] [kan hebben] $\rightarrow$
..dat hij de menen gebeld [kan hebben]\\
\remarks \noremarks

\end{member}
\begin{member}
\rulename TSpruning0
\ruletask to pass non VR structures.

\file dutch:tc\_sentpruning.mrule (mrules12.mrule)
\semantics \nosemantics
\example x1 zwem \to x1 zwem

\remarks \noremarks

\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_PPoverV}
\begin{classdescr}
\kind iterative transformation class
\classtask to move preverbal PREPPs to a postverbal position
\end{classdescr}


The following transformations are necessary (! means: not written yet):
\begin{description}
\item [TPPoverV1, prepobjrel \to postvporel*] Hij heeft gekeken naar het meisje
\item[TPPoverV3, byobjrel \to postverbrel*] De man wordt gezien door de vader
\item[TPPoverV2, vpadvrel \to postverbrel*] Hij heeft het meisje gezien met een verrekijker
\item[preprepobjrel \to postvporel] Hij heeft geen kaas gegeten van wiskunde 
\item[TPPoverV4,S,locadvrel \to postverbrel*] Hij heeft gezwommen in de kerk
\item[!TPPoverV5,tempadvrel \to ?posttemprel] Hij heeft gezwommen op dat tijdstip
\item[TadjPPoverV1, prepobjrel in ADJP \to postvporel*] Hij is gehecht geraakt
aan zijn moeder
\item[!TadjPPoverV2, postprepobjrel in ADJP \to postvporel] Hij is bang geweest voor 
de os 
\end{description}
They exist in analysis only!



\begin{members}
\begin{member}
\rulename TPPOverV1
\ruletask To move PP's over verbs.
The rather complicated matchcondition are necessary to guarantee that
only particles verbs and and postvporels intervene between
the source and the target position of the PREPPVAR.
All in all it is the case that the adverbial PREPPVARs and argumental PREPPVARs
retain their relative distance to the verb. Therefore there are two PPoverV
rules

dat hij [van wiskunde] niet veel kaas had gegeten $\rightarrow$\\
dat hij niet veel kaas heeft gegeten van wiskunde
must be dealt with separately. the pp must bear here preprepobjrel!
\file dutch:tc\_ppoverv.mrule (mrules11.mrule) (mrules11.mrule)
\semantics \nosemantics
\example
..dat hij gisteren naar dit meisje gekeken had $\rightarrow$\\
..dat hij gisteren gekeken had naar dit meisje\\
..dat hij gisteren met deze jongen gesproken had over wiskunde $\rightarrow$\\
..dat hij gisteren gesproken had over wiskunde met deze jongen\\

\remarks \noremarks

\end{member}
\begin{member}
\rulename TPPOVERV2
\ruletask to turn vpadvrel/PREPPs into postvrels
\file dutch:tc\_ppoverv.mrule (mrules11.mrule) (mrules11.mrule)
\semantics \nosemantics
\example Hij heeft met een verrekijker het meisje gezien \to
Hij heeft het meisje gezien met een verrekijker
\remarks \noremarks

\end{member}
\begin{member}
\rulename TPPoverV3
\ruletask to turn byobjrel/PREPPs into postvrels
\file dutch:tc\_ppoverv.mrule (mrules11.mrule) (mrules11.mrule)
\semantics \nosemantics
\example
De man wordt door hem gezien \to
De man wordt gezien door hem
\remarks \noremarks

\end{member}
\begin{member}
\rulename TPPoverV4
\ruletask to turn locadvrel/PREPPs into postvrels
\file dutch:tc\_ppoverv.mrule (mrules11.mrule) (mrules11.mrule)
\semantics \nosemantics
\example
Hij heeft in de kerk gezwommen \to
Hij heeft gezwommen in de kerk\\
hij heeft in de tuin van de buurman gespeeld \to
hij heeft gespeeld in de tuin van de buurman
\remarks \noremarks

\end{member}
\begin{member}
\rulename TadjppoverV1
\ruletask to put prepositional objects of adjectives to the right of V
\file dutch:tc\_ppoverv.mrule (mrules11.mrule) (mrules11.mrule)
\semantics \nosemantics
\example dat hij tevreden over x1 is \to
         dat hij tevreden is over x1
\remarks \noremarks

\end{member}
\end{members}

\nofilters
{\bf Speed Rules} Associated Speed rules are:
\begin{description}
\rulename FprePPoverV
\ruletask to speed up analysis. It rejects all structures containing a 
postverbal PREPP unless it is a verb raising structure
\file dutch:tc\_ppoverv.mrule (mrules11.mrule) (mrules11.mrule)
\remarks \noremarks
\end{description}

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}

\begin{mruleclass}{TC\_NPoverAdv}
\begin{classdescr}
\kind iterative transformation class
\classtask to turn {\em objrel}s and {\em indobjrel}s into {\em preadvrel}s.
\end{classdescr}

\begin{members}
\begin{member}
\rulename TNPoverADv1
\ruletask To turn object and indirect object NPVARs or CNVARs into
preadvrels, when no aanobjrel or voorobjrel is present.
\file dutch:tc\_npoveradv.mrule (mrules10.mrule)
\semantics \nosemantics
\example
x1 gisteren x2 x3 gaf $\rightarrow$\\
x1 x2 gisteren x3 gaf $\rightarrow$\\
x1 x2 x3 gisteren gaf
(hij gaf gisteren de man het boek $\rightarrow$\\
 hij gaf de man gisteren het boek
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNPOVERADV2
\ruletask To turn object and indirect object NPVARs or CNVARs into
preadvrels, when an aanobjrel or voorobjrel is present. The object, or
indirect object must follow the aanobjrel, voorobjrel.

(in practice indobjrel cannot occur here. Change this ! )

\file dutch:tc\_npoveradv.mrule (mrules10.mrule)
\semantics \nosemantics
\example
x1 gisteren x2 x3 gaf $\rightarrow$\\
x1 x2 gisteren x3 gaf $\rightarrow$\\
x1 x2 x3 gisteren gaf
(hij gaf gisteren de man het boek $\rightarrow$\\
 hij gaf de man gisteren het boek
\remarks \noremarks

\end{member}
\begin{member}
\rulename TNPOVERADV3
\ruletask To turn object and indirect object NPVARs or CNVARs into
preadvrels, when an aanobjrel or voorobjrel is present. The object, or
indirect object must precede the aanobjrel, voorobjrel, hence be an argument of 
a verb that does not take this aanobj or ovoorobj as one of its arguments

(in practice indobjrel cannot occur here. Change this ! )

\file dutch:tc\_npoveradv.mrule (mrules10.mrule)
\semantics \nosemantics
\example
..dat x1 gisteren x2 aan x3 x4 beloofde te geven
..dat x1 x2 gisteren aan x3 x4 beloofde te geven
( ..dat hij Piet gisteren aan de jongen water beloofde te geven*)
\remarks \noremarks

\end{member}
\end{members}

\nofilters

\nospeedrules

\noplannedrules

\norulesnotince

\begin{comments}
\end{comments}

\end{mruleclass}


