$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$AC @
$XC ~`

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta3.software

    ---------------------------------------------------------







         Title        :  PASSDE problems

         Author       :  J. Rous









         Doc.Nr       :  69

         Date         :  20/1/86

         Status       :  informal

         Supersedes   :  

         Distribution :  software group

         Clearance    :  Philips

         Keywords     :  PASSDE
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Nederlandse Philips Bedrijven B.V.

$ph Rosetta          Doc.nr: 69                        date:20/1/86
$LD 4
$Np 1
$QM
This document is meant to be a working paper for a discussion which will 
take place between members of the FPP project and the ROSETTA project. 
The goal of the discussion will be to avoid duplication of work in the
two projects. 
$NL
One subject of discussion will be the PASSDE ( an acronym for PASCAL software 
development environment ) system. The intention of this system is to use
modular PASCAL and to perform an intermodule type-checking to guarantee the
consistency of the export and import mechanism. Also the VAX/VMS library
utility CMS is incorporated in the environment for storing source
and object code.
$NL
This document gives an overview of a number of problems which would arise
in case the PASSDE system would be put to use within the ROSETTA project.
$NL 2
$HL 4,1.
For PASSDE an inter-modular type-checking mechanism has been developed
within the fileprocessor project. This was necessary because two different
PASCAL compilers had to be used. The 
Rosetta project, however, will use only one compiler, i.e. the VAX/VMS PASCAL 
compiler. This
compiler also provides for a inter-modular type-checking mechanism. It 
therefore would seem
rather strange not to use this VAX/VMS mechanism, especially when 
the alternative, the PASSDE mechanism, has some disadvantages. 
$NL
First of all, it
is based on the use of the include mechanism. This implies that the 
type-definitions specified in the include files
will be compiled for every module that uses them. But 
what is worse, no guarantee is given that the compiler optimizes the
type-definitions in exactly the same way in all the modules that use them.
$NL
Secondly, the PASSDE mechanism is attuned to BSO-PASCAL, this means that
generation of the VAX-PASCAL object-code is rather time-consuming. 
$NL
Thirdly, it is
possible with some minor additions to the VAX/VMS mechanism to have a
MODULA-2-like seperation of declarations and bodies of functions/procedures 
by means of
so called definition and implementation modules. This seperation is not
so clear in the PASSDE system.
$NL
Finally, the VAX/VMS PASCAL compiler is
tested and supported by DEC, whereas the PASSDE compiler has hardly been 
tested ( compared to the DEC compiler ) and is not supported at all.
$NL 1
$HL 4,2.
PASSDE also provides for a code control facility. This facility is based on 
CMS and MMS. There are a number of reasons why the PASSDE code control
facility is not suited for the ROSETTA project. Most of these reasons become
obvious when reading the specifications of the different systems. However, it
is good to mention a few of them here. 
$NL
First of all only one CMS library can 
be used. For a large system like Rosetta one library is absolutely 
insufficient. It should be possible to map the conceptual division of the 
system into components onto the library structure.
$NL
Furthermore the object files generated by the VAX/VMS PASCAL compiler cannot 
be incorporated in the PASSDE code control system. A code control facility
for ROSETTA, however, should not only offer facilities to manage source code
but should also offer facilities for managing object code and executables.
$NL
Finally a code control system should also give at least a minimal protection 
of the software in the archive. This means that the system should prevent 
people from changing the software in the archive without having tested that 
software in an independent environment. This last point is especially
important within the ROSETTA project, where non-computer-scientists have
to add software to the system. 
