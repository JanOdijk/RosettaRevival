$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta3.morphology

    ---------------------------------------------------------







         Title        :  Rosetta3 Dutch Morphology, inflection (rules)

         Author       :  Harm Smit









         Doc.Nr       :  135

         Date         :  25/09/86

         Status       :  concept

         Supersedes   :  

         Distribution :  project

         Clearance    :  project

         Keywords     :  Dutch, morphology, inflection, rules
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Copyright (c) Nederlandse Philips Bedrijven B.V.

$ph Rosetta          Doc.nr: 0135                    date:25/09/86
$AC ¨
$NP 1
$LD 4
$BC %
$UC _
Preface

$ In ROSETTA, morphology deals with inflection and derivation. For the time
being, compounding will be ignored. In this document, we will give 
a listing of all rules that are made for the inflection of Dutch words.$
$ A separate document explains the rules, attributes, keys, etc.$
$NP
$CH 1,Introduction
$ This document consists of several parts, which are:$
- GLUE rules, namely: LGLUE- and MGLUE-rules,
- prefix-, freefix- and suffix-rules,
- lextree rules.
Note: the list of lextree rules also contains rules that change a 'BCAT' into a 
'SUBCAT' for words _without_ derivational affixes.
$NP
$CH 2,GLUE rules
$ Note: in Dutch, GLUE rules always join _two_ strings.$
$CH 2.1,LGLUE rules

TYPE LGLUE2;

{ verbs with partikel }

TABLE

aan       + * :: aan*;
aaneen    + * :: aaneen*;      {aaneenschakelen}
achter    + * :: achter*;      {achterhouden}
achteraan + * :: achteraan*;   {achteraangaan}
achterna  + * :: achterna*;    {achternalopen}
achterom  + * :: achterom*;    {achteromkijken}
achterop  + * :: achterop*;    {achteropkomen}
achterover + * :: achterover*;  {achteroverdrukken}
achteruit + * :: achteruit*;   {achteruitgaan}
adem      + * :: adem*;        {ademhalen}
ader      + * :: ader*;        {aderlaten}
af        + * :: af*;
auto      + * :: auto*;        {autorijden}

bakzeil   + * :: bakzeil*;     {bakzeilhalen}
beet      + * :: beet*;        {beetnemen}
bekend    + * :: bekend*;      {bekendmaken}
belang    + * :: belang*;      {belangstellen}
bellen    + * :: bellen*;      {bellenblazen; LET OP: "los" volt.deelw.!}
bezig     + * :: bezig*;
bij       + * :: bij*;
bijeen    + * :: bijeen*;     
binnen    + * :: binnen*;
bloot     + * :: bloot*;       {blootgeven}
boek      + * :: boek*;        {boekhouden}
bot       + * :: bot*;         {botvieren}
boven     + * :: boven*;       {bovenkomen}
buiten    + * :: buiten*;      {buitensluiten}
buitenom  + * :: buitenom*;    {buitenomgaan}

daar      + * :: daar*;
dank      + * :: dank*;        {dankzeggen}
deel      + * :: deel*;
dicht     + * :: dicht*;       {dichtslaan}
diep      + * :: diep*;        {diepgaan}
dol       + * :: dol*;         {doldraaien}
dood      + * :: dood*;
door      + * :: door*;
droog     + * :: droog*;       {droogvallen}
dubbel    + * :: dubbel*;      {dubbelslaan}
dwars     + * :: dwars*;       {dwarsliggen}

eruit     + * :: eruit*;       {eruitzien}

feest     + * :: feest*;       {feestvieren}
fijn      + * :: fijn*;        {fijnmalen}
flauw     + * :: flauw*;

gade      + * :: gade*;        {gadeslaan}
geheim    + * :: geheim*;      {geheimhouden}
gelijk    + * :: gelijk*;      {gelijkrichten}
geluk     + * :: geluk*;
gevaar    + * :: gevaar*;
gereed    + * :: gereed*;      {gereedkomen}
gering    + * :: gering*;      {geringschatten}
gerust    + * :: gerust*;      {geruststellen}
gevangen  + * :: gevangen*;    {gevangennemen}
gewaar    + * :: gewaar*;      {gewaarworden}
glad      + * :: glad*;        {gladstrijken}
goed      + * :: goed*;        {goedkeuren}
groot     + * :: groot*;       {grootbrengen}

hard      + * :: hard*;
heen      + * :: heen*;        {heengaan}
heet      + * :: heet*;        {heetlopen}
heruit    + * :: heruit*;      {heruitbrengen}
                 {LET OP: "heruitbrengen" en "heruitzenden" hebben geen OVT!}
hoog      + * :: hoog*;        {hoogachten}

in        + * :: in*;
ineen     + * :: ineen*;       {ineenslaan}

ja        + * :: ja*;          {jaknikken; LET OP: geen "tijden" vermeld!} 

kaal      + * :: kaal*;        {kaalslaan}
kaart     + * :: kaart*;       {kaartspelen}
kapot     + * :: kapot*;       {kapotgaan}
kennis    + * :: kennis*;      {kennismaken}
klaar     + * :: klaar*;       {klaarspelen}
klein     + * :: klein*;       {kleinkrijgen}
komedie   + * :: komedie*;     {komediespelen; LET OP: "los" volt. deelw.!}
kopje     + * :: kopje*;       {kopjeduikelen; LET OP: "los" volt. deelw.!}
kort      + * :: kort*;        {kortsluiten}
krom      + * :: krom*;        {kromliggen}
kuit      + * :: kuit*;        {kuitschieten}
kwaad     + * :: kwaad*;       {kwaadspreken}
kwijt     + * :: kwijt*;       {kwijtraken}

lam       + * :: lam*;         {lamslaan}
ledig     + * :: ledig*;       {lediggaan}
les       + * :: les*;         {lesgeven; LET OP: geen tijden vermeld in vD!}
leeg      + * :: leeg*;        {leeggooien}
lief      + * :: lief*;
los       + * :: los*;

maat      + * :: maat*;        {maathouden}
mat       + * :: mat*;         {matbranden}
mede      + * :: mede*;        {medeplegen}
mee       + * :: mee*;
mis       + * :: mis*;         {misgaan}
model     + * :: model*;       {modeltekenen}
mooi      + * :: mooi*;        {mooizitten}

na        + * :: na*;
nabij     + * :: nabij*;       {nabijkomen}
nat       + * :: nat*;         {natregenen}
neder     + * :: neder*;       {nederdalen}
neer      + * :: neer*;

om        + * :: om*;
omhoog    + * :: omhoog*;      {omhoogduwen}
omlaag    + * :: omlaag*;      {omlaaghalen}
omver     + * :: omver*;
onder     + * :: onder*;
onderdoor + * :: onderdoor*;   {onderdoorspelen}
onderuit  + * :: onderuit*;    {onderuitgaan}
op        + * :: op*;
opeen     + * :: opeen*;       {opeenstapelen}
over      + * :: over*;
overeen   + * :: overeen*; 
overhoop  + * :: overhoop*;    {overhoopliggen}

paardje   + * :: paardje*;     {paaardjerijden}
paard     + * :: paard*;       {paardrijden}
plaats    + * :: plaats*;      {plaatsmaken}
plat      + * :: plat*;        {platbranden}
post      + * :: post*;        {postvatten}
prijs     + * :: prijs*;       {prijsgeven}

raak      + * :: raak*;        {raakslaan}
recht     + * :: recht*;       {rechtbuigen}
rond      + * :: rond*;        {rondbabbelen}

samen     + * :: samen*;
schaak    + * :: schaak*;      {schaakspelen}
schadeloos+ * :: schadeloos*;  {schadeloosstellen}
scheef    + * :: scheef*;      {scheefbuigen}
school    + * :: school*;      {schoolgaan}
schoon    + * :: schoon*;
schoot    + * :: schoot*;      {schootgaan}
schuil    + * :: schuil*;      {schuilgaan}
stand     + * :: stand*;       {standhouden}
steek     + * :: steek*;       {steekhouden}
stijf     + * :: stijf*;       {stijfvloeken}
stil      + * :: stil*;
stop      + * :: stop*;        {stopzetten}
storm     + * :: storm*;       {stormlopen}
stuk      + * :: stuk*;        {stukbijten}

tegen     + * :: tegen*;
tegenover + * :: tegenover*;   {tegenoverstellen}
tekeer    + * :: tekeer*;      {tekeergaan}
teleur    + * :: teleur*;
teloor    + * :: teloor*;      {teloorgaan}
teniet    + * :: teniet*;      {tenietdoen}
tentoon   + * :: tentoon*;
terecht   + * :: terecht*;
terneder  + * :: terneder*;    {ternederdrukken}
terneer   + * :: terneer*;     {terneerdrukken}
terug     + * :: terug*;
tevreden  + * :: tevreden*;    {tevredenstellen}
teweeg    + * :: teweeg*;      {teweegbrengen}
tewerk    + * :: tewerk*;      {tewerkstellen}
thee      + * :: thee*;        {theezetten} 
thuis     + * :: thuis*;       {thuisbezorgen}
toe       + * :: toe*;
toneel    + * :: toneel*;      {toneelspelen}
tussen    + * :: tussen*;      {tussenvoegen}

uit       + * :: uit*;
uiteen    + * :: uiteen*; 

vaarwel   + * :: vaarwel*;     {vaarwelzeggen}
vast      + * :: vast*;
vet       + * :: vet*;         {vetmesten}
vol       + * :: vol*;         {volgieten}
voor      + * :: voor*;
vooraf    + * :: vooraf*;      {voorafgaan}
voorbij   + * :: voorbij*; 
voorop    + * :: voorop*;      {vooroplopen}
voort     + * :: voort*;
vooruit   + * :: vooruit*;     {vooruitrijden}
vreemd    + * :: vreemd*;      {vreemdgaan}
vrij      + * :: vrij*;
vuil      + * :: vuil*;        {vuilmaken}

waar      + * :: waar*; 
wacht     + * :: wacht*;       {wachtlopen}
warm      + * :: warm*;        {warmlopen}
weder     + * :: weder*;       {wederkomen}
weer      + * :: weer*;        {weergeven}
weerom    + * :: weerom*;      {weeromkomen}
weg       + * :: weg*;         
wel       + * :: wel*;         {weldoen}
wijs      + * :: wijs*;        {wijsmaken}

zoek      + * :: zoek*;        {zoekbrengen}
zwart     + * :: zwart*;       {zwartkijken}


{ voornaamwoordelijke bijwoorden }

er      + * :: er*;       {ertoe, erheen, etc.}

daar    + * :: daar*;     {daartoe, daarheen, etc.}

hier    + * :: hier*;     {hiertoe, hierheen, etc.}

ergens  + * :: ergens*;   {ergensvandaan, etc.}

nergens + * :: nergens*;  {nergensvandaan, etc.; vgl. "ergens + *"/ ANS 7.5.1}

overal  + * :: overal*;   {overalvandaan, etc.; vgl. "ergens + *"/ ANS 7.5.1}

waar    + * :: waar*;     {waarheen, waarin, etc.}

{note: for "ergens*", "nergens*", "overal*", see: ANS 7.5.1, no. I; this section
       implies that these words are 'GLUEed'. This doesn't hold for cases that
       are dealt with no. II in this section of ANS. See also p. 384 of ANS. The
       way ANS formulates about this phenomena is a bit fuzzy.}

{ LET OP:                                                              }
{-er zijn verschillende soorten voornaamwoordelijke bijwoorden; zie    }
{ ANS, 7.5; derhalve kan een woord als "daarheen" onstaan zijn uit     }
{ "naar daar" (dan hebben we te maken met een voorzetsel + een         }
{ bijwoord van plaats) of uit "naar dat" (dan hebben we te maken met   }
{ een voorzetsel + een voornaamwoord, die tesamen een voorzetselconsti-}
{ tuent vormen). Dus:                                                  }
{   naar + daar       -->  daarheen                                    }
{   naar + dat        -->  daarheen                                    }
{-Tevens zien we hier dat de volgorde van voorzetsel en bijwoord resp. }
{ pronomen omgekeerd wordt. Andere voorbeelden:                        }
{   naar + iets + toe -->  daarheen OF daarnaartoe                     }
{   met  + er         -->  ermee                                       }
{   met  + dit        -->  hiermee                                     }
{                                enz.                                  }
{-Ook zien we dat de vorm van het voorzetsel verandert:                }
{   met-->mee; tot-->toe; naar-->heen, naartoe; van-->(van)af,         }
{   vandaan;                                                           }
{ (Bij "naar" en "van" ook onveranderde vormen: "ernaar", "daarvan-    }
{ daan". Vaak worden "mee", "heen", etc. als bijwoord of ook wel als   }
{ achterzetsel betiteld.)                                              }
{-Niet alle voorzetsels komen voor (vgl. ANS 7.5.1).                   }
{-Als de beide helften naast elkaar staan, worden ze als e¨'e¨'n woord }   
{ geschreven, BEHALVE bij _onbepaalde_ voornaamwoordelijke bijwoorden,   }
{ waar ze los geschreven moeten worden: "Dat slaat nergens op", "Dat   }
{ blijkt overal uit". (vgl ANS 7.5.1.). Als er tussen beide helften    }
{ andere elementen staan worden ze (uiteraard) niet als e¨'e¨'n woord  }
{ geschreven: "Ik ben _er_ bang _voor_". (vgl ANS 7.5.4).                  } 
{-Niet altijd is het verplicht te 'herschrijven': "van daar uit" kan   }
{ naast "daarvanuit". We¨`l verplicht is: PREP+het-->erPREP:           }
{    *Hij baalt van het.                                               }
{     Hij baalt ervan.                                                 }
END
$NP
$CH 2.2, MGLUE rules

TYPE MGLUE2;

{ One case of PREPOSITION and ARTICLE; only in analysis }

TABLE

/A van   + de   :: der;

END
$NP
$CH 3,Affix rules
$CH 3.1,Prefix rules

TYPE RPREFIX;

VAR

A = [ a, b, c, d, f, g, h, j, k, l, m, n, o, p, q, r, s, t, v, w, x, y, z];
B = [ e, i, u];
C = [ a, d, g, l, m, n, o, r, s, t];
D = [ m, r, s, t];

TABLE

   PFKge      +   (A)*    ::  ge(A)*;

/A PFKge      +   a*      ::  gea¨"*;
/A PFKge      +   o*      ::  geo¨"*;

   PFKge      +   e*      ::  gee¨"*;

   PFKge      +   i(C)*   ::  gei¨"(C)*;
   PFKge      +   ij*     ::  geij*;   {geijld, geijverd, geijzeld, geijsbeerd}
   
   PFKge      +   u(D)*   ::  geu(D)*;
   PFKge      +   ui*     ::  geui*;   {geuit}


{remarks: 'analytic' rules can be added for other begin-vowels than "a" and "o".
          Van Dale is not always consistent: "geo¨"haad", instead of "geohaad", 
          and "geimpregneerd" instead of "gei¨"mpregneerd".
          The variables 'C' and 'D' are based on the verbs that occur in Van 
          Dale; other consonants (and maybe vowels?) can be added to both.}


   PFKaller   +     *     ::  aller*;   {allergrootst, allermooist, ...}

END
$NP
$CH 3.2,Freefix rules

TYPE FREEFIX;

VAR  M2 = [ b, d, f, g, k, l, m, n, p, r, s, t ];
     K1 = [ a, e, i, o, u ];

TABLE


{............ Rules for pronouns }

{.............. BPERSPRO->PERSPRO; reduced nominative forms}

    ik         + SFKsgnomred  :: 'k;
/A  ik         + SFKsgnom     :: ikke;
    jij        + SFKsgnomred  :: je;
    gij        + SFKsgnomred  :: ge;
    hij        + SFKsgnomred  :: ie;
    het        + SFKsgnomred  :: 't;
    zij        + SFKsgnomred  :: ze;

    wij        + SFKplnomred  :: we;
/A  jullie     + SFKplnom     :: jelui;
    gij        + SFKplnomred  :: ge;
/A  gij        + SFKplnom     :: gijlieden;
    zij        + SFKplnomred  :: ze;

{.............. BPERSPRO->PERSPRO; accusative and dative forms}

    ik         + SFKsgacc      :: mij;      
    ik         + SFKsgaccred   :: me;       
    jij        + SFKsgacc      :: jou;      
    jij        + SFKsgaccred   :: je;       
    u          + SFKsgacc      :: u;        
    hij        + SFKsgacc      :: hem;      
    hij        + SFKsgaccred   :: 'm;       
    zij        + SFKsgacc      :: haar;     
/A  zij        + SFKsgaccred   :: 'r;       
    zij        + SFKsgaccred   :: d'r;      
/A  zij        + SFKsgaccred   :: ze;       
    het        + SFKsgacc      :: het;      
    het        + SFKsgaccred   :: 't;       

    wij        + SFKplacc      :: ons;      
    jullie     + SFKplacc      :: jullie;   
    u          + SFKplacc      :: u;        
    zij        + SFKplacc      :: hen;      
/A  zij        + SFKplacc      :: hun;      
    zij        + SFKplaccred   :: ze;       

    ik         + SFKsgdat      :: mij;      
    ik         + SFKsgdatred   :: me;       
    jij        + SFKsgdat      :: jou;      
    jij        + SFKsgdatred   :: je;       
    u          + SFKsgdat      :: u;        
    hij        + SFKsgdat      :: hem;      
    hij        + SFKsgdatred   :: 'm;       
    zij        + SFKsgdat      :: haar;     
/A  zij        + SFKsgdatred   :: 'r;       
    zij        + SFKsgdatred   :: d'r;      
/A  zij        + SFKsgdatred   :: ze;       
    het        + SFKsgdat      :: het;      
    het        + SFKsgdatred   :: 't;       

    wij        + SFKpldat      :: ons;      
    jullie     + SFKpldat      :: jullie;   
    u          + SFKpldat      :: u;        
/A  zij        + SFKpldat      :: hen;      
    zij        + SFKpldat      :: hun;      
    zij        + SFKpldatred   :: ze;       

{.......... PERSPRO->POSSADJ}

    ik         + SFKsgpossadj     :: mijn;
    ik         + SFKsgpossadjred  :: m'n;
    jij        + SFKsgpossadj     :: jouw;
    jij        + SFKsgpossadjred  :: je; 
    u          + SFKsgpossadj     :: uw;
    hij        + SFKsgpossadj     :: zijn;
    hij        + SFKsgpossadjred  :: z'n;      
    zij        + SFKsgpossadj     :: haar;
 /A zij        + SFKsgpossadjred  :: 'r;  
    zij        + SFKsgpossadjred  :: d'r;

    wij        + SFKplpossadjons  :: ons;
    wij        + SFKplpossadjonze :: onze;
    jullie     + SFKplpossadj     :: jullie;
    u          + SFKplpossadj     :: uw;
    zij        + SFKplpossadj     :: hun;

{
........... note: "ons" has the 'e-form' "onze"; the other POSSADJ's don't
........... have 'e-form's, except in idioms like "mijne heren".
}
{and the (obsolete) genitive-forms:}

/A ik          + SFKsgpossadjgen  :: mijner;
/A jij         + SFKsgpossadjgen  :: jouwer;
/A u           + SFKsgpossadjgen  :: uwer;
/A hij         + SFKsgpossadjgen  :: zijner;
/A zij         + SFKsgpossadjgen  :: harer;

/A wij         + SFKplpossadjgen  :: onzer;
/A u           + SFKplpossadjgen  :: uwer;
/A zij         + SFKplpossadjgen  :: hunner;

{.......... PERSPRO->POSSPRO}

   ik          + SFKsgposs      :: mijne;
   jij         + SFKsgposs      :: jouwe;
   u           + SFKsgposs      :: uwe;
   hij         + SFKsgposs      :: zijne;
   zij         + SFKsgposs      :: hare;

   wij         + SFKplposs      :: onze;
{.......... a 'jullie'-form doesn't exist ! }
   u           + SFKplposs      :: uwe;
   zij         + SFKplposs      :: hunne;

   ik          + SFKsgpossnvorm :: mijnen;
   jij         + SFKsgpossnvorm :: jouwen;
   u           + SFKsgpossnvorm :: uwen;
   hij         + SFKsgpossnvorm :: zijnen;
   zij         + SFKsgpossnvorm :: haren;
   
   wij         + SFKplpossnvorm :: onzen;
{.......... a 'jullie'-vorm doesn't exist ! }
   u           + SFKplpossnvorm :: uwen;
   zij         + SFKplpossnvorm :: hunnen;

{  BWHPRO-->POSSADJ  }

   wie         + SFKpossadjwiens    :: wiens;
   wie         + SFKpossadjwier     :: wier;

{  BDEMPRO-->POSSADJ  }

   die         + SFKpossadjdiens    :: diens;

END
$NP
$CH 3.3,Suffix rules

$CH 3.3.1,Rsuffix rules

TYPE RSUFFIX;

{
........"/A" is used for rules that should work in analysis only.
........
.......description of the 'VARs':                                       
........
........K1 contains single vowels.
........K2 contains all possible pairs of unequal vowels, and 'ii';
........
........M1 contains all consonants that can be doubled, except 's' and 'f'.
........M2 is M1 plus 's' and 'f'.         
........M3 contains all consonants except 'q'.
........
........SL means: voiceless (minus 't', 's' and 'f').
........SH means: voiced (minus 'd').                       
........
........T1 contains all letters the verb-stem can end in, except: 't', 
........'a', 'o' and 'u' (for these letters the inflection of the second
........and third person differ from the others); 'c' and 'q' are never
........the last letter of the stem.
}

VAR SL = [ ce, ch, k, p, sh, sj, x];
    SH = [ a, b, dge, ee, ie, oe, ue, g, i, ij, l, m, n, o, r, u, w, y];

    T1 = [ b, d, e, f, g, h, i, j, k, l, m, n, p, r, s, ou, v, w, x, y, z];

    M0 = [       d,    g,       k, l, m, n, p,       t               ];
    M1 = [       d,    g,       k, l, m, n, p, r,    t               ];
    M2 = [ b,    d, f, g,       k, l, m, n, p, r, s, t,              ];
    M3 = [ b, c, d, f, g, h, j, k, l, m, n, p, r, s, t, v, w, x, y, z];

    K1 = [ a, e, i, o, u];         
    K2 = [ ae, ai, ao, au, ea, ei, eo, eu, ia, ie, io, iu, oa, oe, oi, ou, ua,
    ue, ui, uo , ii, ie¨", i¨"e, ei¨", e¨"i, oi¨", ai¨", ui¨", oe¨", ou¨^ ];
$NP
TABLE

{------------------------------------------------------------------------------}

{.........Rules for genitive-s}

{......... note:
 .........
 ......... difference between "e¨'" and "e¨'e":
 ......... Andre¨'  -> Andre¨''s werk; 
 ......... Andre¨'e -> Andre¨'es werk;
 .........
 ......... All nouns ending in "e" are handled by one rule:
 ......... Lisettes auto / Maries werk;
}

*a          + SFKgens    :: *a's;       {Franciska's verslag}
*b          + SFKgens    :: *bs;        {Robs falen}
*c          + SFKgens    :: *cs;        {Marcs fiets}
*d          + SFKgens    :: *ds;        {Aads huis}
*e          + SFKgens    :: *es;        {Rumenigges schot; Adries inzet}
*e¨'          + SFKgens    :: *e¨''s;       {Andre¨''s inspanningen} 
*f          + SFKgens    :: *fs, FONleegonwissel;  {Cruijffs voetbalschoenen}
*g          + SFKgens    :: *gs;        {Borgs tennisracket}
*(K1)h      + SFKgens    :: *(K1)h's;   {Sjah's opvolger}
*(M3)h      + SFKgens    :: *(M3)hs;    {Magaths voetbalbroek}
*i          + SFKgens    :: *i's;       {Rossi's goals, Leni's films}
*sj         + SFKgens    :: *sj';       {Tsarevitsj' ziekte}
*ij         + SFKgens    :: *ij's;      {Schalij's schaatstriomf}
*k          + SFKgens    :: *ks;        {Zoetemelks fiets}
*l          + SFKgens    :: *ls;        {Carels geld}
*m          + SFKgens    :: *ms;        {Harms bureau}
*n          + SFKgens    :: *ns;        {Jans werkstuk}
*o          + SFKgens    :: *o's;       {Falcao's dieptepass}
*p          + SFKgens    :: *ps;        {Joeps kamer}
*q          + SFKgens    :: *qs;        {de Cocqs oplossing}
*r          + SFKgens    :: *rs;        {Peters schaakspel}
*s          + SFKgens    :: *s', FONleegonwissel;  {Frans' overwinning}
*t          + SFKgens    :: *ts;        {Hinaults kniee¨"n}
*u          + SFKgens    :: *u's;       {Landru's moorden}
*v          + SFKgens    :: *vs;        {Jeliaskovs trainingspak}
*w          + SFKgens    :: *ws;        {van der Louws voetbalbond}
*x          + SFKgens    :: *x';        {Ajax' successen}
*(M3)y      + SFKgens    :: *(M3)y's;   {Elly's kookkunsten}
*(K1)y      + SFKgens    :: *(K1)ys;    {Shelleys dichtwerk}
*z          + SFKgens    :: *z';        {Cruz' olympisch record}


{-----------------------------------------------------------------------------}

{....... Rules for s-plurals (of nouns) }


{....... regular, with '-s':}
{....... The following letters are never the last letter of nouns that get 
         s-plural: j, q, s, v, x, z.                                          }


*(M1)   + SFKmvs         :: *(M1)s;        {dikkerds, pisangs, tanks, vogels, 
   drugs, bezems, wagens, chips, kleuters, restaurants, arre¨^ts, ragou¨^ts}
*b      + SFKmvs         :: *bs;           {clubs}
*c      + SFKmvs         :: *cs;           {trucs, comics, echecs,compact-discs}
*f      + SFKmvs         :: *fs, FONleegonwissel; {chefs}
*ch     + SFKmvs         :: *ches;         {sandwiches, speeches, coaches}
*sh     + SFKmvs         :: *shes;         {crashes, finishes}
*kh     + SFKmvs         :: *khs;          {sikhs}
*(K1)h  + SFKmvs         :: *(K1)h's;      {sjah's, ayatollah's}
*w      + SFKmvs         :: *ws;           {shows, interviews, peluws}
*(M3)y  + SFKmvs         :: *(M3)y's;      {baby's, dandy's, buggy's, whisky's,
                  lolly's, dummy's, pony's, puppy's, sherry's, gipsy's, party's}
*(K1)y  + SFKmvs         :: *(K1)ys;       {essays}

*(M3)a  + SFKmvs         :: *(M3)a's;      {pyjama's, maya's, papaya's}
*n¨~a     + SFKmvs         :: *n¨~a's;     {don¨~a's (in Van Dale: entry "don")}
*(M3)i  + SFKmvs         :: *(M3)i's;      {abri's, taxi's}
*(M3)o  + SFKmvs         :: *(M3)o's;      {foto's, jojo's, embryo's}
*(M3)u  + SFKmvs         :: *(M3)u's;      {menu's}
*c¨,u     + SFKmvs         :: *c¨,u's;         {rec¨,u's, aperc¨,u's}
*e¨'      + SFKmvs         :: *e¨'s;           {loge¨'s, employe¨'s, cafe¨'s}
*(M3)e  + SFKmvs         :: *(M3)es;       {etalages, koetjes, luxes (?), races}
*e¨'e     + SFKmvs         :: *e¨'es;          {employe¨'es}

*qu     + SFKmvs         :: *qu's;         {  ?  }

{....... There are no words ending in "-aa".}
*ea     + SFKmvs         :: *ea's;    {spirea's, alinea's, area's, azalea's}
*ia     + SFKmvs         :: *ia's;    {dia's, acacia's, sequoia's, aria's}
*oa     + SFKmvs         :: *oa's;    {boa's, moa's [moa=kind of bird]}
*ua     + SFKmvs         :: *ua's;    {antiqua's}

{....... Nouns with "-ae" never have s-plural.}
*ee     + SFKmvs         :: *ees;     {abonnees, chimpansees, dominees}
*ie     + SFKmvs         :: *ies;     {kolonies}
*oe     + SFKmvs         :: *oes;     {taptoes}
*ue     + SFKmvs         :: *ues;     {attaques, cheques, barbecues, tenues}

*ai     + SFKmvs         :: *ais;     {bonsais, ais [ai='soort luiaard'] }
*ei     + SFKmvs         :: *eis;     {leis [lei='muntsoort'] }
{....... Nouns with "-ii" never have s-plurals.}
*oi     + SFKmvs         :: *ois;     {barzois [barzoi=kind of dog]}
*ui     + SFKmvs         :: *uis;     {etuis}

*ao     + SFKmvs         :: *ao's;    {farao's}
*eo     + SFKmvs         :: *eo's;    {beo's, video's, rodeo's}
*io     + SFKmvs         :: *io's;    {adagio's, studio's, radio's, folio's}
*oo     + SFKmvs         :: *oos;     {shampoos}
*uo     + SFKmvs         :: *uo's;    {duo's}

*au     + SFKmvs         :: *aus;     {bureaus, kenaus}
*eu     + SFKmvs         :: *eus;     {keus, milieus}
{....... There are no nouns ending in "-iu".}
*ou     + SFKmvs         :: *ous;     {apokoinous, bijous, clous, sous}
{....... There are no nouns ending in "-uu."}


{....... irregular s-plurals: }
/A *au    + SFKmvs       :: *au's;    {See vanDale: reclamebureau's, ...}
/A *ao    + SFKmvs       :: *aos;     {See vanDale: faraos i.p.v. farao's}
   *a     + SFKsIrreg    :: *aas;     {laas, raas, vlaas, eegaas}

{....... P.S. in KLEIN & VISSCHER [1985] the above mentioned spellings of
 ....... 'la', 'ra', 'vla' and 'eega' are accepted. Forms like: 'faraos', 
 ....... however, are not.
}
{------------------------------------------------------------------------------}

{...... Rules for "-en" (plurals of nouns and verbs}

*(M3)(M1) + SFKen  ::  *(M3)(M1)en, FONleegsjwa;  {verg-en, hurken, gelden, ..}

{note: the rule also works for: "gym"-"gymen". Van Dale gives "gymmen" instead
 of "gymen"; but compare to nouns: "enzym"-"enzymen" (and not "enzymmen"). If 
 we want "gymmen", it has to be a irregular verb, and special rules will have 
 to be made. }

*(M3)s    + SFKen  ::  *(M3)sen, FONonwisselsjwa;   {polsen}
*(M3)s    + SFKen  ::  *(M3)zen, FONwisselsjwa;     {gonzen}
*(M3)f    + SFKen  ::  *(M3)fen, FONonwisselsjwa;   {golfen}
*(M3)f    + SFKen  ::  *(M3)ven, FONwisselsjwa;     {golven}

*ch       + SFKen  ::  *chen, FONleegsjwa;        {kuchen}  
*th       + SFKen  ::  *then, FONleegsjwa;        {nouns only: Scythen}
*sh       + SFKen  ::  *shen, FONleegsjwa;        {pushen}  
*sj       + SFKen  ::  *sjen, FONleegsjwa;        {roetsjen} 
*i        + SFKen  ::  *ien,  FONleegsjwa;        {aaien}
*ij       + SFKen  ::  *ijen, FONleegsjwa;        {vlijen}
*ou       + SFKen  ::  *ouen, FONleegsjwa;        {jouen}
*eu       + SFKen  ::  *euen, FONleegsjwa;        {reuen, keuen}
*(M3)u    + SFKen  ::  *(M3)uen, FONleegsjwa;     {nouns only: individuen}
*x        + SFKen  ::  *xen,  FONleegsjwa;        {telexen, mixen}          
*yx       + SFKen  ::  *yxen, FONleegsjwa;        {nouns only: onyxen}
*y        + SFKen  ::  *yen,  FONleegsjwa;        {lobbyen, hockeyen}          
*w        + SFKen  ::  *wen,  FONleegsjwa;        {vermurwen, duwen, showen,
                                                       bouwen, interviewen    }
*(M3)z  + SFKen   :: *(M3)zen, FONleegsjwa;       {witzen}

*el       + SFKen  ::  *elen,  FONsjwasjwa;       {wa¨'ndelen, be¨'delen}
*em       + SFKen  ::  *emen,  FONsjwasjwa;       {a¨'demen, bli¨'ksemen} 
*en       + SFKen  ::  *enen,  FONsjwasjwa;       {wa¨'penen, ke¨'rstenen}
*er       + SFKen  ::  *eren,  FONsjwasjwa;       {vo¨'rderen, be¨'teren} 
*es       + SFKen  ::  *esen,  FONsjwasjwa;       {ha¨'nnesen, lu¨'iwammesen}
*ig       + SFKen  ::  *igen,  FONsjwasjwa;       {stenigen}
*ik       + SFKen  ::  *iken,  FONsjwasjwa;       {prediken, hinniken}
*ier      + SFKen  ::  *ieren, FONsjwasjwa;       {luieren, poeieren, waaieren, 
                                               schooieren}{compare: *(K2)(M1)!}
*et       + SFKen  :: *eten, FONsjwasjwa;         {nouns only: lemmeten}
*it       + SFKen  :: *iten, FONsjwasjwa;         {nouns only: kieviten}

{...... Rules for deletion of vowels + "-en" }

*aa(M1)   + SFKen  ::  *a(M1)en, FONleegsjwa;     {laden}
*ee(M1)   + SFKen  ::  *e(M1)en, FONleegsjwa;     {kleden}
*e¨"e(M1)   + SFKen  ::  *e¨"(M1)en, FONleegsjwa;     {cree¨"ren}
*oo(M1)   + SFKen  ::  *o(M1)en, FONleegsjwa;     {lonen}
*uu(M1)   + SFKen  ::  *u(M1)en, FONleegsjwa;     {vuren}

*aas      + SFKen  ::  *azen, FONwisselsjwa;      {blazen} 
*ees      + SFKen  ::  *ezen, FONwisselsjwa;      {lezen}
*ees      + SFKen  ::  *esen, FONonwisselsjwa;    {ex.: hesen (=OVT of hijsen)}
*oos      + SFKen  ::  *ozen, FONwisselsjwa;      {lozen}
*uus      + SFKen  ::  *uzen, FONwisselsjwa;      { ? }
{ "*asen", "*osen", "*usen", "*e¨"sen" and "*e¨"zen" don't exist in Dutch !?}

*aaf      + SFKen  ::  *aven, FONwisselsjwa;      {laven}
*eef      + SFKen  ::  *even, FONwisselsjwa;      {leven}
*oof      + SFKen  ::  *oven, FONwisselsjwa;      {roven}
*uuf      + SFKen  ::  *uven, FONwisselsjwa;      { ? }
*aaf      + SFKen  ::  *afen,  FONscherpsjwa;     {nouns only: fotografen}
*oof      + SFKen  ::  *ofen,  FONscherpsjwa;     {nouns only: filosofen}
{ "*efen", "*ufen", "*e¨"fen"/"*e¨"ven" don't exist in Dutch !?}


{...... Rules for "-en" + consonantdoubling }

*(M3)(K1)(M2)  + SFKen  :: *(M3)(K1)(M2)(M2)en, FONonsjwasjwa;{liggen}
    (K1)(M2)   + SFKen  :: (K1)(M2)(M2)en, FONleegsjwa;       {eggen}
*(K1)z         + SFKen  :: *(K1)zzen, FONleegsjwa;            {fezzen, quizzen}
{note: - the '(M3)'-variable is necessary to make clear that the vowel is not 
         one of a pair (see rule for '*(K2)(M1)'!
       - Van Dale gives also: "-sen" as plural for "quiz" ???}

{...... Rules for pairs of unequal vowels }

*(K2)(M1) + SFKen  :: *(K2)(M1)en, FONleegsjwa;    {creamen, scheiden, nieten,
                                 trainen, zouten, zoeten, teuten, tuiten, ...}
*(K2)f    + SFKen  :: *(K2)fen, FONonwisselsjwa;     {stoefen}
*(K2)f    + SFKen  :: *(K2)ven, FONwisselsjwa;       {snoeven}
*(K2)s    + SFKen  :: *(K2)sen, FONonwisselsjwa;     {kuisen}
*(K2)s    + SFKen  :: *(K2)zen, FONwisselsjwa;       {suizen}

{...... Rules for "-en"  + deletion of "e"}

*ie       + SFKen  :: *ien, FONsjwasjwa;       {goeien, kwaaien}
*ue       + SFKen  :: *ue¨"n, FONleegsjwa;       {tenue¨"n}
*ue       + SFKen  :: *uen, FONleegsjwa;       {dagtenuen, fonduen, barbecuen}
{note: VanDale gives both "tenue¨"n" and "dagtenuen"; here we accept both forms
       for all words ending in "-ue". Thus, "barbecue¨"n" is all right too! }
*ce       + SFKen  :: *cen,    FONleegsjwa;    {racen}
*dge      + SFKen  :: *dgen,   FONleegsjwa;    {bridgen}
*(M3)e    + SFKen  :: *(M3)en, FONsjwasjwa;    {Rule for plural of OVT-forms
                                                    ending in "-te" and "-de"}
{note: the difference between the FONrules is essential in these rules!}

{...... Rules for "-en" + trema ("e" can be deleted)}

*ie       + SFKen  :: *ie¨"n,  FONleegsjwa;    {skie¨"n, taxie¨"n, ruzie¨"n}
*a        + SFKen  :: *ae¨"n,  FONleegsjwa;    {iae¨"n, ohae¨"n}
*ee       + SFKen  :: *eee¨"n, FONleegsjwa;    {sleee¨"n}
*oe       + SFKen  :: *oee¨"n, FONleegsjwa;    {roekoee¨"n}
*o        + SFKen  :: *oe¨"n,  FONleegsjwa;    {poloe¨"n,kanoe¨"n,shampooe¨"n}
*(M3)u    + SFKen  :: *(M3)ue¨"n, FONleegsjwa; {kukelekue¨"n (not in vanDale)}

{note: here we took "skie" as stem of "skie¨"n" instead of "ski". If we want 
       "ski" rules have to be added for "*(M3)i" combined with 'SFKt', 'SFKen', 
       'SFKe', 'SFKdete'and 'SFKdt'; and also we have to change the already 
       existing rules for "*i" for verbs like "aaien", "roeien", etc.}

{....... Rules for plurals of nouns that are variants of "-en"-plural }
{note: these rules are not with 'SFKen'.}

{...... Special rule for words ending in stressed "-ie": }

*ie  + SFKieAccent :: *ie¨"en, FONleegsjwa;
                                 {kniee¨"n, voetbalkniee¨"n, melodiee¨"n}

{....... Change in the length of the vowel:}

*a(M1)   + SFKaTOaa   :: *a(M1)en, FONleegsjwa; {baden, bladen(!), dagen, daken,
                                  dalen, gaten, paden, slagen, vaten, verdragen}
*as      + SFKaTOaa   :: *azen, FONwisselsjwa;  {glazen}
*af      + SFKaTOaa   :: *aven, FONwisselsjwa;  {staven(!), graven}

*a(M1)   + SFKaTOee   :: *e(M1)en, FONleegsjwa; {steden}
*as      + SFKaTOee   :: *ezen, FONwisselsjwa;  {  ?  }
*af      + SFKaTOee   :: *even, FONwisselsjwa;  {  ?  }

*e(M1)   + SFKeTOee   :: *e(M1)en, FONleegsjwa; {bevelen, gebeden, gebreken, 
                                             genen, spelen, treden(!), wegen}
*es      + SFKeTOee   :: *ezen, FONwisselsjwa;  {  ?  }
*ef      + SFKeTOee   :: *even, FONwisselsjwa;  {  ?  }

*ei(M1)  + SFKeiTOee  :: *e(M1)en, FONleegsjwa; {waarheden, heren (from: heir)}
*eis     + SFKeiTOee  :: *ezen, FONwisselsjwa;  {  ?  }
*eif     + SFKeiTOee  :: *even, FONwisselsjwa;  {  ?  }

*i(M1)   + SFKiTOee   :: *e(M1)en, FONleegsjwa; {leden, schepen, smeden, speten}
*is      + SFKiTOee   :: *ezen, FONwisselsjwa;  {  ?  }
*if      + SFKiTOee   :: *even, FONwisselsjwa;  {reven}

*o(M1)   + SFKoTOoo   :: *o(M1)en, FONleegsjwa; {geboden, goden, hertogen,
                               motoren, holen, loten, oorlogen, schoten, sloten}
*os      + SFKoTOoo   :: *ozen, FONwisselsjwa;  {  ?  }
*of      + SFKoTOoo   :: *oven, FONwisselsjwa;  {hoven, verloven}
*oz      + SFKoTOoo   :: *ozen, FONonwisselsjwa; {kolchozen (from: kolchoz)}

{note: the variant form of "heir", "heer" has the same plural as "heir": 
       "heren", but for "heer" it is regular; the same holds for the variant 
       form of "rif": "reef" (plural "reven").
       Many of the above plurals are also (regular) plural of other words:
       "sloten" of "sloot", "staven" of "staaf", "treden" of "trede", etc.
       "Blad" has also: "blaren", "bladeren".}

{....... With "-eren": }

*been    + SFKeren  :: *beenderen, FONleegsjwa;{also: 'benen' in some meanings}
*berd    + SFKeren  :: *berderen,  FONleegsjwa;{also: 'berden'}
*blad    + SFKeren  :: *bladeren,  FONleegsjwa;{also: 'bladen', 'blaren' in
                                                          some meanings}
*ei      + SFKeren  :: *eieren,    FONleegsjwa;
*e¨"i      + SFKeren  :: *e¨"ieren,    FONleegsjwa;{eendee¨"ieren}
*gelid   + SFKeren  :: *gelederen,  FONleegsjwa;
*gemoed  + SFKeren  :: *gemoederen, FONleegsjwa;
*goed    + SFKeren  :: *goederen,  FONleegsjwa;
*hoen    + SFKeren  :: *hoenderen, FONleegsjwa;{also: 'hoenders'(all meanings)}
*kalf    + SFKeren  :: *kalveren,  FONleegsjwa;
*kind    + SFKeren  :: *kinderen,  FONleegsjwa;
*kleed   + SFKeren  :: *klederen,  FONleegsjwa;{sometimes also: 'kleren', 
                                                      sometimes also: 'kleden'}
*lam     + SFKeren  :: *lammeren,  FONleegsjwa;
*lied    + SFKeren  :: *liederen,  FONleegsjwa;
*rad     + SFKeren  :: *raderen,   FONleegsjwa;
*rund    + SFKeren  :: *runderen,  FONleegsjwa;
*volk    + SFKeren  :: *volkeren,  FONleegsjwa;{also: 'volken'}

*veer    + SFKeren  :: *vederen,    FONleegsjwa;{or: 'veder' -> 'vederen' ???}

{....... other special noun plurals: }

*(K2)      + SFKien     :: *(K2)ien,     FONleegsjwa; {koeien}
*(M3)(K1)  + SFKien     :: *(M3)(K1)(K1)ien, FONleegsjwa; {vlooien}
*(M3)(K1)  + SFKden     :: *(M3)(K1)den, FONleegsjwa; {laden (from: la)}
*(K2)      + SFKden     :: *(K2)den,     FONleegsjwa; {roeden (from: roe)}
*ee        + SFKden     :: *eden,        FONleegsjwa; {steden, treden}
{note: many of these words have variant forms with the same plurals (but 
       regular): "lade", "roede", "stede", "trede", ...}

*(K1)      + SFKnen     :: *(K1)nen, FONleegsjwa; {regionen, lendenen, redenen}
{note: also other plurals: "regio's"/"regiones", "lenden", "redes", ...}

*bamboe     + SFKenIrreg :: *bamboezen, FONleegsjwa;

{-----------------------------------------------------------------------------}

{...... Rules for "-t" }

{note: these rules are used for the second and third person singular (present)
       of verbs; irregularities for stems ending in: "-t", "-a", "-o" and "-u".
       The rule for verbs with stem ending in "t" is necessarily non-recursive!}

   *(T1)  + SFKt   :: *(T1)t, FONleegonwissel; {werkt, slaapt, telext, hockeyt,
                                                   sleet, ruziet, roekoet, jout}
   *a     + SFKt   :: *aat;          {i¨"aat, ohaat}
/A *a     + SFKt   :: *a't;          {in analysis also: i¨"a't, oha't}
   *(M3)o + SFKt   :: *(M3)oot;      {echoot, kanoot, poloot}
/A *(M3)o + SFKt   :: *(M3)o't;      {in analysis also: echo't, polo't}
   *oo    + SFKt   :: *oot;          {shampoot}
   *(M3)u + SFKt   :: *(M3)uut;      {kukelekuut /"kukelekue¨"n" not in vDale}
/A *(M3)u + SFKt   :: *(M3)u't;      {in analysis also: kukeleku't}

{------------------------------------------------------------------------------}

{$NP}
{.........Rules for "-te" for the ovt of weak verbs. }

{note: plural forms are made out of "-te" in combination with "-en".}
 
*(SL)     + SFKdete    ::  *(SL)te, FONleegsjwa;
*t        + SFKdete    ::  *tte, FONleegsjwa;
{
.........examples: werk-te, plant-te, rek-te, zet-te, kook-te, loot-te, etc.
........."special" stem endings:
.........  SL=ce     race-te.
.........  SL=ch     coach-te, douch-te, kuch-te, lunch-te, lach-te, etc.
.........  SL=sh     crash-te, finish-te, push-te.
.........  SL=sj     ramsj-te, verramsj-te, roetsj-te.
.........  SL=x      telex-te, mix-te, fax-te, relax-te, xerox-te.
}

{.........Rules for "-de" for the ovt of weak verbs. }

{note: plural forms are made out of "-de" in combination with "-en".}

*(SH)     + SFKdete    ::  *(SH)de, FONleegsjwa;
*d        + SFKdete    ::  *dde, FONleegsjwa;   
{
.........examples: verg-de, land-de, leg-de, red-de, dool-de, dood-de, etc.
........."special" stem endings:
.........  SH=a      ia-de, oha-de.                    
.........  SH=dge    bridge-de.
.........  SH=ee     slee-de.                          
.........  SH=oe     roekoe-de.                        
.........  SH=ie     skie-de, taxie-de, ruzie-de, neurie-de, etc.  
.........  SH=ue     barbecue-de, fondue-de.           
.........  SH=i      aai-de, klei-de, roei-de, schooi-de, rui-de, etc.
.........  SH=ij     jij-de, dij-de, vlij-de, vrij-de.
.........  SH=o      echo-de, judo-de, kano-de, polo-de, shampoo-de 
.........  SH=u      jou-de, kukeleku-de / "kukelekue¨"n" 
.........  SH=w      miauw-de, trouw-de, etc.
.........  SH=y      display-de, hockey-de, lobby-de, volley-de.              
}

{...... Rules for stem ending in -f and -s (sometimes "-de", sometimes "-te")}

*f   + SFKdete  ::  *fte, FONonwisselsjwa;  {stoef-te, golf-te(from: 'golfen'),
                                                                  paf-te, etc.}
*f   + SFKdete  ::  *fde, FONwisselsjwa;    {snoef-de, golf-de(from: 'golven'),
                                                                          etc.}
*s   + SFKdete  ::  *ste, FONonwisselsjwa;  {dans-te, spons-te(from: sponsen), 
                                                                  pas-te, etc.}
*s   + SFKdete  ::  *sde, FONwisselsjwa;    {gons-de, spons-de(from: sponzen), 
                                                                 suis-de, etc.}

{note: Van Dale is not consistent about the past forms of "surfen": for the
       verbs "surfen" and "sneeuwsurfen" "-de(n)" is chosen (the stem ending
       "f", however, doesn't change in infinitive and ott plural!). For the
       verb "windsurfen" the suffix "-te(n)" is chosen. At the moment, the 
       rules only allow the second approach; therefore we have to adjust the
       past forms of "surfen" and "sneeuwsurfen" (or we should write "surven"
       and "sneeuwsurven"!). Another choice is to consider "surfen" and 
       "sneeuwsurfen" as irregular verbs, but this certainly is a less
       attractive choice.)}

{------------------------------------------------------------------------------}

{........Rules for 'SFKdt'}

{note: no doubling of "t" or "d" occurs in case the stem ends in "t" resp. "d".
       The rules for stem ending in "t" and "d" are necesarrily non-recursive!}

*(SL) + SFKdt    ::  *(SL)t;     {gewerkt}
*(SH) + SFKdt    ::  *(SH)d;     {geverfd}

*f    + SFKdt    ::  *ft, FONonwisselleeg; {gestoeft, gegolft (from: 'golfen'), 
                                             gepaft, etc.                      }
*f    + SFKdt    ::  *fd, FONwisselleeg;   {gesnoefd, gegolfd (from: 'golven'),
                                                                         etc.}
*s    + SFKdt    ::  *st, FONonwisselleeg; {gedanst, gesponst (from: sponsen), 
                                                                gepast, etc. }
*s    + SFKdt    ::  *sd, FONwisselleeg;   {gegonsd, gesponsd (from: sponzen),
                                                                gesuisd, etc.}


{-----------------------------------------------------------------------------}
{....... Rules for "-e"}
{note: rules for "-e" work on past and present participles, and adjectives;
       they are also used for conjunctives. Some rules are non-recursive:
       - the rule for "*e"-strings (+sjwa), which don't change with 'SFKe';
       - the rule for "*e"-strings (-sjwa), which don't change with 'SFKe'.}

*a          + SFKe :: *ae¨",  FONleegsjwa;     {(men) ohae¨"}
*o          + SFKe :: *oe¨",  FONleegsjwa;     {(men) kanoe¨"}
*en         + SFKe :: *ene, FONsjwasjwa;     {(de) ervarene, (men) tekene}
*es         + SFKe :: *ese, FONsjwasjwa;     {(men) hannese}
*ik         + SFKe :: *eke, FONsjwasjwa;     {(men) hinnike}
*ier        + SFKe :: *iere, FONsjwasjwa;    {(men) luiere}
*sh         + SFKe :: *she, FONleegsjwa;     {(men) pushe}
*sj         + SFKe :: *sje, FONleegsjwa;     {(men) roetsje}
*ou         + SFKe :: *oue, FONleegsjwa;     {(men) joue}

*(M3)(M1)   + SFKe :: *(M3)(M1)e, FONleegsjwa; {exacte, geschubde, harde, lange,
         manke, kalme, interne, plompe, korte, mysogyne, getelexte, ALSO: rijke}
*(M3)f      + SFKe :: *(M3)fe, FONonwisselsjwa; {isomorfe, allomorfe}
*(M3)f      + SFKe :: *(M3)ve, FONwisselsjwa;  {halve} 
*(M3)s      + SFKe :: *(M3)se, FONonwisselsjwa; {gojse, blitse, doodse, ranse}
*(M3)s      + SFKe :: *(M3)ze, FONwisselsjwa;   {ranze, vunze} {ALSO: 'ranse'!}
{note: because "j" is in (M3), these rules also work for "grijze", "wijze", etc}

*ch         + SFKe :: *che, FONleegsjwa;       {technische}

*(K1)e      + SFKe :: *(K1)ee¨", FONonsjwasjwa;  {weee¨", gedweee¨", moee¨",
                          (men) sleee¨", (men) barbequee¨", (men) ruziee¨", ...}

*u          + SFKe :: *ue¨",  FONleegsjwa;   {crue¨", bleue¨",(men) kukelekue¨"}
*w          + SFKe :: *we,  FONleegsjwa;   {ruwe, rauwe, murwe}
*x          + SFKe :: *xe,  FONleegsjwa;   {complexe, convexe, orthodoxe, 
                                                                perplexe}
*y          + SFKe :: *ye¨",  FONonsjwasjwa; {(het) sexye¨", (men) hockeye¨"}
/A *y          + SFKe :: *ye,  FONonsjwasjwa;     {(het) sexye, (men) hockeye}

*el         + SFKe :: *ele, FONsjwasjwa;       {variabele, capabele}
*em         + SFKe :: *eme, FONsjwasjwa;       {stiekeme, goocheme}
*er         + SFKe :: *ere, FONsjwasjwa;       {zekere, lekkere, macabere}
*ig         + SFKe :: *ige, FONsjwasjwa;       {aardige, gezellige}

*(K2)(M1)   + SFKe :: *(K2)(M1)e, FONonsjwasjwa;  {precaire, hautaine, kleine, 
           jeui¨"ge, tweee¨"iige, leuke, fiere, kiene, koene, notoire, luide}

*(K2)s      + SFKe :: *(K2)ze, FONwisselsjwa;  {modieuze, vieze, wijze, ...}
*(K2)f      + SFKe :: *(K2)ve, FONwisselsjwa;{lieve, stroeve, stijve, nai¨"eve,
                                                                           ...}

*(K2)s      + SFKe :: *(K2)se, FONonwisselsjwa;  {heuse, kiese, Goese, Friese}
*(K2)f      + SFKe :: *(K2)fe, FONonwisselsjwa;  {viefe (?)}

*ei         + SFKe :: *eie,  FONleegsjwa;      {(men) breie, (men) roeie}
*ui         + SFKe :: *uie,  FONleegsjwa;      {luie}
*oi         + SFKe :: *oie,  FONleegsjwa;      {mooie, (men) gooie}
*aai        + SFKe :: *aaie, FONleegsjwa;      {saaie, (men) aaie}

*ij         + SFKe :: *ije, FONleegsjwa;       {blije}

{....... Adjectives with -e + deletion of vowel }

*aa(M1)     + SFKe :: *a(M1)e, FONleegsjwa;     {kwade, lage, rake, vale, gare,
                                          ideale, bekwame, ontdane, gare, late}

*(M3)ee(M1) + SFKe :: *(M3)e(M1)e, FONleegsjwa; {wrede, lege, bleke, gele, hete
                                                   extreme, gemene, lepe, zere}
*aee(M1)    + SFKe :: *ae(M1)e, FONleegsjwa;    {  ?  }
*ee¨"e(M1)    + SFKe :: *ee¨"(M1)e, FONleegsjwa;    {ree¨"le}
*iee(M1)    + SFKe :: *ie¨"(M1)e, FONleegsjwa;    {financie¨"le}
*oee(M1)    + SFKe :: *oe¨"(M1)e, FONleegsjwa;    {  ?  }
*uee(M1)    + SFKe :: *ue(M1)e, FONleegsjwa;    {seksuele, visuele}

*oo(M1)     + SFKe :: *o(M1)e, FONleegsjwa;     {rode, hoge, vrome, schone,
                                                                   gore, blote}
*uu(M1)     + SFKe :: *u(M1)e, FONleegsjwa;     {immune, gure, brute}

*oob        + SFKe :: *obe, FONleegsjwa; {ae¨"robe, claustrofobe, lactofobe}

*aas        + SFKe :: *aze, FONwisselsjwa;      {dwaze}
*aas        + SFKe :: *ase, FONonwisselsjwa;    {Indiase}
*aaf        + SFKe :: *ave, FONwisselsjwa;      {brave}   

*ees        + SFKe :: *eze, FONwisselsjwa;      {   ?   }
*ees        + SFKe :: *ese, FONonwisselsjwa;    {hese, Chinese, genuese}
*eef        + SFKe :: *eve, FONwisselsjwa;      {scheve}  

*oos        + SFKe :: *oze, FONwisselsjwa;      {boze}
*oos        + SFKe :: *ose, FONonwisselsjwa;    {Tokiose, Togose}
*oof        + SFKe :: *ove, FONwisselsjwa;      {dove}    

*uus        + SFKe :: *use, FONonwisselsjwa;    {confuse}


{........ Adjectives witk "-e" + consonantdoubling}

*(M3)(K1)(M2)  + SFKe :: *(M3)(K1)(M2)(M2)e, FONonsjwasjwa; 
                    {maffe, makke, malle, lamme, rappe, starre, krasse, platte}
                    {geredde, kleffe, gekke, schelle, ad remme, verre, nette}
                    {dikke, kille, gisse, witte}
                    {doffe, logge, dolle, domme, dorre, losse, zotte}
                    {duffe, rulle, drukke, dunne, knusse, blutte}

{$NP}
{....... Rules with "-er" (for comparatives)}

{note: adjectives ending in "r" get "-der" instead of "-er" }

*r     +  SFKer :: *der, FONleegsjwa; {verder, gaarder, fierder, zekerder}

*y     +  SFKer :: *ier, FONleegsjwa; {tipsier, sexier, shabbier, groggier}

*e     +  SFKer :: *er, FONsjwasjwa;  {timider, stupider, rozer, luxer,chiquer}

*en       +  SFKer :: *ener, FONsjwasjwa;        {geborgener, tevredener, ...}
*h        +  SFKer :: *her,  FONleegsjwa;        {higher}
*(M3)(M0) + SFKer :: *(M3)(M0)er, FONleegsjwa;   {exacter, harder, langer, 
                                 manker, kalmer, plomper, korter, ALSO: rijker}

*(M3)f    + SFKer :: *(M3)fer, FONonwisselsjwa;  {allomorfer} 
*(M3)f    + SFKer :: *(M3)ver, FONwisselsjwa;    {halver(?)} 
*(M3)s    + SFKer :: *(M3)ser, FONonwisselsjwa;  {blitser, doodser, ranser}
*(M3)s    + SFKer :: *(M3)zer, FONwisselsjwa;    {ranzer,vunzer}{ALSO: 'ranser'}
{note: because "j" is in (M3), these rules also make: "grijzer", "wijzer", etc}

*ch       + SFKer :: *cher, FONleegsjwa;         {technischer}
*e        + SFKer :: *ee¨"r,  FONonsjwasjwa;    {weee¨"r, gedweee¨"r, moee¨"r}
*u        + SFKer :: *ue¨"r,  FONleegsjwa;         {crue¨"r, bleue¨"r}
*w        + SFKer :: *wer,  FONleegsjwa;         {ruwer, rauwer, murwer}
*x        + SFKer :: *xer,  FONleegsjwa;         {complexer}
*i        + SFKer :: *ier,  FONleegsjwa;         {luier, mooier, saaier}
*ij       + SFKer :: *ijer, FONleegsjwa;         {blijer}

*el       + SFKer :: *eler, FONsjwasjwa;         {variabeler, capabeler}
*em       + SFKer :: *emer, FONsjwasjwa;         {stiekemer}
*ig       + SFKer :: *iger, FONsjwasjwa;         {aardiger}

*(K2)(M0) + SFKer :: *(K2)(M0)er, FONonsjwasjwa; {hautainer, kleiner, leuker, 
                                          jeui¨"ger, kiener, koener, luider}
*(K2)s    + SFKer :: *(K2)zer, FONwisselsjwa;    {modieuzer, viezer, wijzer}
*(K2)f    + SFKer :: *(K2)ver, FONwisselsjwa;    {liever, nai¨"ever, stijver}
*(K2)s    + SFKer :: *(K2)ser, FONonwisselsjwa;  {kieser, heuser, ...}
*(K2)f    + SFKer :: *(K2)fer, FONonwisselsjwa;  {viefer (?)}

{....... Comparative with "-er" + deletion of vowel }

*aa(M0)     + SFKer :: *a(M0)er, FONleegsjwa;     {kwader, lager, raker, valer}
*(M3)ee(M0) + SFKer :: *(M3)e(M0)er, FONleegsjwa; {wreder, leger, bleker, 
                                       geler, heter, extremer, gemener, leper}
*aee(M0)    + SFKer :: *ae(M0)er, FONleegsjwa;    {  ?  }
*ee¨"e(M0)    + SFKer :: *ee¨"(M0)er, FONleegsjwa;    {ree¨"ler}
*iee(M0)    + SFKer :: *ie¨"(M0)er, FONleegsjwa;    {financie¨"ler}
*oee(M0)    + SFKer :: *oe¨"(M0)er, FONleegsjwa;    {  ?  }
*uee(M0)    + SFKer :: *ue(M0)er, FONleegsjwa;    {seksueler, visueler}

*oo(M0)     + SFKer :: *o(M0)er, FONleegsjwa;     {roder, hoger, vromer,bloter}
*uu(M0)     + SFKer :: *u(M0)er, FONleegsjwa;     {immuner, bruter}
*oob        + SFKer :: *ober,    FONleegsjwa;     {ae¨"rober}

*aas        + SFKer :: *azer, FONwisselsjwa;      {dwazer}
*aas        + SFKer :: *aser, FONonwisselsjwa;    {Indiaser}
*aaf        + SFKer :: *aver, FONwisselsjwa;      {braver}

*ees        + SFKer :: *ezer, FONwisselsjwa;      {   ?   }
*ees        + SFKer :: *eser, FONonwisselsjwa;    {heser, Chineser}
*eef        + SFKer :: *ever, FONwisselsjwa;      {schever}

*oos        + SFKer :: *ozer, FONwisselsjwa;      {bozer}
*oos        + SFKer :: *oser, FONonwisselsjwa;    {Tokioser, Togoser}
*oof        + SFKer :: *over, FONwisselsjwa;      {dover}

*uus        + SFKer :: *user, FONonwisselsjwa;    {confuser, abstruser}

{........ Adjectives with "-er" + consonantdoubling}

*(M3)(K1)(M0)  + SFKer :: *(M3)(K1)(M0)(M0)er, FONonsjwasjwa; 
                    {makker, maller, lammer, rapper, platter, geredder, gekker,
                     scheller, ad remmer, netter, dikker, killer, witter, log-
                     ger, doller, dommer, zotter, ruller, drukker, dunner, ...}
*(M3)(K1)s  + SFKer :: *(M3)(K1)sser, FONonsjwasjwa;       {krasser, gisser, 
                                                              losser, knusser }
*(M3)(K1)f  + SFKer :: *(M3)(K1)ffer, FONonsjwasjwa;       {maffer, kleffer, 
                                                              doffer, duffer }

{$NP}
{....... Rules with "-st" (for superlatives)}

*a        +  SFKst :: *a'st;               {  ?  }
*e        +  SFKst :: *est, FONsjwasjwa;   {chiquest, timidest, stupidest}
*e        +  SFKst :: *est, FONonsjwasjwa; {gedweest (?)}
*i        +  SFKst :: *i'st;               {  ?  }
*o        +  SFKst :: *o'st;               {  ?  }
*u        +  SFKst :: *u'st;               {cru'st (?)}
*y        +  SFKst :: *iest, FONleegsjwa;  {tipsiest, sexiest, shabbiest }

*(M1)     +  SFKst :: *(M1)st;             {laagst, jeui¨"gst, rotst}
*b        +  SFKst :: *bst;                {ae¨"roobst (?)}
*f        +  SFKst :: *fst, FONleegonwissel; {liefst}
*w        +  SFKst :: *wst;                {ruwst}
*ij       +  SFKst :: *ijst;               {vrijst}

*s        +  SFKst :: *st, FONleegonwissel;  {boost}
*sch      +  SFKst :: *scht;                 {komischt, logischt}
*x        +  SFKst :: *xt;                   {complext, orthodoxt}


{$NP}
{....... Rules for "-s" (s-form of adjectives}

{note: adjectives ending in "s", "sch" and "x" do not get an extra "s"; the
       rules for these endings are necessarily non-recursive}

*a        +  SFKadjs  :: *a's;               {lila's (?)}
*e        +  SFKadjs  :: *es, FONsjwasjwa;   {chiques, timides, stupides}
*e        +  SFKadjs  :: *es, FONonsjwasjwa; {gedwees}
*i        +  SFKadjs  :: *i's;               {kaki's (?)}
*o        +  SFKadjs  :: *o's;               {  ?  }
*u        +  SFKadjs  :: *u's;               {cru's} 
*y        +  SFKadjs  :: *ies, FONleegsjwa;  {tipsies, sexies, shabbies }

*(M1)     +  SFKadjs  :: *(M1)s;             {laags, jeui¨"gs, rots}
*b        +  SFKadjs  :: *bs;                {ae¨"roobs}
*c        +  SFKadjs  :: *cs;                {chics}
*f        +  SFKadjs  :: *fs, FONleegonwissel; {liefs, nai¨"efs}
*w        +  SFKadjs  :: *ws;                {ruws}
*ij       +  SFKadjs  :: *ijs;               {vrijs}


END
$NP
$CH 3.3.2,Suffix rules

TYPE SUFFIX;

{........"/A" is used for rules that should work in analysis only.}

VAR  M3 = [ b, c, d, f, g, h, j, k, l, m, n, p, r, s, t, v, w, x, y, z];

{$NP}
TABLE
{...... Rule for "-t" }

{note: the rules for "-t" are used for the second and third person singular 
       (present) of verbs; only the rule for verbs with stem ending in "t" is 
       necessarily non-recursive!}

*t     + SFKt   :: *t;            {plant} 

{........Rules for 'SFKdt'}

{note: no doubling of "t" or "d" occurs in case the stem ends in "t" resp. "d".
       Only the rules for stem ending in "t" and "d" are necesarrily 
       non-recursive!}

*t    + SFKdt    ::  *t;             {geplant}   
*d    + SFKdt    ::  *d;             {gered}     


{-----------------------------------------------------------------------------}
{....... Rules for "-e"}
{note: rules for "-e" work on past and present participles, and adjectives;
       they are also used for conjunctives.}

*e          + SFKe :: *e,  FONsjwasjwa;         {timide, luxe, stupide}
*(M3)e      + SFKe :: *(M3)e,  FONonsjwasjwa;   {race, bridge}

{note: the following rules for irregular forms are non-recursive. }
{      '*' is given for certainty: "ingrof"->"ingrove"            }

*grof        + SFKonrege :: *grove, FONleegsjwa;   {'grove' is the only form! }
*boud        + SFKonrege :: *boute, FONleegsjwa;   {'boude' is well-formed too}
*bijdehand   + SFKonrege :: *bijdehante, FONleegsjwa;{ the only form; see ANS }
*halfbloed   + SFKonrege :: *halfbloed;
*volbloed    + SFKonrege :: *volbloed;
*overzee     + SFKonrege :: *overzeese, FONleegsjwa;

{........ What about 'chic'->'chique' ???}

{Rules for "-er"}
{note: these rules handle irregular comparatives. }

*graag       + SFKonreger :: *liever, FONleegsjwa;
*gaarne      + SFKonreger :: *liever, FONleegsjwa;       

*grof        + SFKonreger :: *grover, FONleegsjwa; {'grover' is the only form}
*boud        + SFKonreger :: *bouter, FONleegsjwa; {'bouder' is well-formed too}
*bijdehand   + SFKonreger :: *bijdehanter, FONleegsjwa; 
*goed        + SFKonreger :: *beter, FONleegsjwa;
*weinig      + SFKonreger :: *minder, FONleegsjwa;
*veel        + SFKonreger :: *meer;

*kwaad       + SFKonreger :: *erger, FONleegsjwa;    
                            {but: 1. (in other meaning): "kwader"; 
                                  2. "erger" is ALSO the comparative of "erg"}
*dichtbij     + SFKonreger :: *dichterbij;   {"-er" is not the ENDING!}
*dichtbevolkt + SFKonreger :: *dichterbevolkt;
*goedgevormd  + SFKonreger :: *betergevormd; {or from: <beter + vormen>???}

{
........ What about 'chic'->'chiquer'??? Or: 'chicer'???
}

{Rules with "st"}
{note: these rules handle irregular superlatives. }

*graag       + SFKonregst   :: *liefst;       
*gaarne      + SFKonregst   :: *liefst;       

*goed        + SFKonregst   :: *best;
*weinig      + SFKonregst   :: *minst;
*veel        + SFKonregst   :: *meest;
*kwaad       + SFKonregst   :: *ergst;       
                              {but: 1. (in other meaning): "kwader"; "kwaadst"; 
                                    2. "ergst" is also comparative of "erg"}
*dichtbij    + SFKonregst   :: *dichtstbij;   
*goedgevormd + SFKonregst   :: *bestgevormd; {or from: beter + vormen?}

*dichtbevolkt  + SFKonregst :: *dichtstbevolkt;
*bijdehand     + SFKonregst :: *bijdehandst;    
{
........ what about: dichtbij + SFKonregst :: het dichtst bij???
........ what about "chicst"???
}
{....... Rules for "-s" (s-form of adjectives}

{note: adjectives ending in "s", "sch" and "x" do not get an extra "s"; the
       rules for these endings are necessarily non-recursive}

*s        +  SFKadjs  :: *s, FONleegonwissel;  {boos}
*sch      +  SFKadjs  :: *sch;                 {komisch, logisch}
*x        +  SFKadjs  :: *x;                   {complex, orthodox}


{-----------------------------------------------------------------------------}
{........ non-recursive rules for irregular plurals}

*man       + SFKlui     :: *lui;                  {werklui}
*man       + SFKlieden  :: *lieden, FONleegsjwa;  {brandweerlieden}


{....... regular and irregular latin plurals }
{....... note: this inventory might be incomplete}

{....... regular: }

*ma  + SFKlat  :: *mata;   {aroma, trauma, schema, lemma, prisma, stigma}
*ca  + SFKlat  :: *cae;    {melancholica}
*da  + SFKlat  :: *dae;     
*ga  + SFKlat  :: *gae;     
*ia  + SFKlat  :: *iae;    {media-mediae}
*la  + SFKlat  :: *lae;     
*na  + SFKlat  :: *nae;     
*ra  + SFKlat  :: *rae;    {cathedra}
*sa  + SFKlat  :: *sae;    {mensa}
*ta  + SFKlat  :: *tae;     
*va  + SFKlat  :: *vae;     

*e   + SFKlat  :: *ia;     {impersonale}

*aal + SFKlat  :: *alia;   {regaal}

*um  + SFKlat  :: *a;      {datum, spectrum, maximum, quotum, abstractum}
*u¨"m  + SFKlat  :: *a;      {vacuu¨"m}

*on  + SFKlat  :: *a;    {distichon, protozoo¨"n, epitheton, farmacon, lexicon}
*en  + SFKlat  :: *ina;    {examen, tentamen, volumen, crimen, specimen, omen}

*o   + SFKlat  :: *i;      {conto, saldo, collo, porto, intermezzo}

*or  + SFKlat  :: *ores;   {conquistador, pastor, quaestor, junior, imperator}
*aur + SFKlat  :: *auri;   {centaur}
*uur + SFKlat  :: *ures;   {censuur, paruur, cultuur (compare: sinecure, 
                                                                      vacature)}
*as  + SFKlat  :: *ates;   {civitas}
*is  + SFKlat  :: *es;     {thesis, dosis, basis, crisis, fortis, tenuis, arsis}
*ns  + SFKlat  :: *ntia;   {presens, deponens, detergens, absorbens}
*os  + SFKlat  :: *oi;     {topos}
*ps  + SFKlat  :: *pora;   {corps}
*rs  + SFKlat  :: *rtes;   {pars}
*us  + SFKlat  :: *i;      {cyclus, academicus, internuntius, baccalaureus}

*nt  + SFKlat  :: *ntia;   {deodorant}
*ut  + SFKlat  :: *ita;    {caput}

*ex  + SFKlat  :: *ices;   {codex, index, vertex}
*ix  + SFKlat  :: *ices;   {appendix, radix, helix, matrix}
*ox  + SFKlat  :: *oces;   {vox}
*ux  + SFKlat  :: *uces;   {crux}

{....... irregular latin plurals: }

*stotinka   + SFKlatIrreg :: *stotinki;
*mamma      + SFKlatIrreg :: *mammae;   {irregular because of: '-ma'-->'mata'}

*regio      + SFKlatIrreg :: *regiones;
*virgo      + SFKlatIrreg :: *virgines;
*homo       + SFKlatIrreg :: *homines;

*dactylus   + SFKlatIrreg :: *dactylen;
*genus      + SFKlatIrreg :: *genera;
*opus       + SFKlatIrreg :: *opera;
*tempus     + SFKlatIrreg :: *tempora;
*corpus     + SFKlatIrreg :: *corpora;
*jus        + SFKlatIrreg :: *jura;
*modulus    + SFKlatIrreg :: *modules;
*casus      + SFKlatIrreg :: *casus;
*lapsus     + SFKlatIrreg :: *lapsus;
*genius     + SFKlatIrreg :: *genie¨"n;    {in fact the plural of "genie" ??} 

*singularis + SFKlatIrreg :: *singularia;
*pluralis   + SFKlatIrreg :: *pluralia;
*lapsis     + SFKlatIrreg :: *lapides;
*pelvis     + SFKlatIrreg :: *pelvis;
*glacis     + SFKlatIrreg :: *glacis;
*permis     + SFKlatIrreg :: *permis; {Fr.}

*hospes     + SFKlatIrreg :: *hospites;
*praeses    + SFKlatIrreg :: *praesides;

*mecenas    + SFKlatIrreg :: *mecenaten;
*maecenas   + SFKlatIrreg :: *maecenaten;

*simplex    + SFKlatIrreg :: *simplicia;

{-----------------------------------------------------------------------------}
{$NP}
{....... Rules for irregular verbs and strong verbs (with ablaut) }

{note: rules for ablaut are non-recursive: in almost any of them the resulting
       string is _not_ longer than the original one.}
         
{...... Rules for conjugationclasses 1 and 2 (irregular verbs):}

{note: these rules are for verbs like:
       -  "hebben", "zijn";
       -  auxiliaries, like "kunnen", "willen", etc.
       -  other irregular verbs, like "zeggen" (because of "zei"), "meten"
          (because of "mat"/"maten" [instead of: "matten"]), etc.
       Not always the verbs have all forms ("zullen" lacks the past participle,
       for instance) and a few verbs have etra forms for 'person = 0' (see:
       'SFKirrottenk0').
       _Resulting_ forms ending in 's' and 'f' or with sjwa-ending have got a 
       FONrule because it seems best to be principle; but, presumably these 
       forms will never be input of other segmentation rules. The FONrules never
       give conditions (all rules are of the type FON_leeg_....) so the value of
       the phonological attribute of the dictionary forms will be irrelevant 
       (this is possible because the strings themselves will be sufficiently 
       specific).}



 ben      + SFKirrottenk2 :: bent;
 ben      + SFKirrottenk3 :: is, FONleegonwissel;
/A ben      + SFKirrott4    :: is, FONleegonwissel;
 ben      + SFKirrott4    :: bent;
 ben      + SFKirrott5    :: zijt;
 ben      + SFKirrottmv   :: zijn;
 ben      + SFKirrovtenk  :: was, FONleegonwissel;
 ben      + SFKirrovt5    :: waart;
 ben      + SFKirrovtmv   :: waren,  FONleegsjwa;
 ben      + SFKirrvd      :: weest;      
 ben      + SFKirrgb      :: wees, FONleegwissel;
 ben      + SFKirrconjott :: zij;
 ben      + SFKirrconjovt :: ware, FONleegsjwa;

 heb      + SFKirrottenk2 :: hebt;
 heb      + SFKirrottenk3 :: heeft;
 heb      + SFKirrott4    :: heeft;
 heb      + SFKirrott4    :: hebt;
 heb      + SFKirrott5    :: hebt;
 heb      + SFKirrottmv   :: hebben,  FONleegsjwa;
 heb      + SFKirrovtenk  :: had;
 heb      + SFKirrovt5    :: hadt;
 heb      + SFKirrovtmv   :: hadden,  FONleegsjwa;
 heb      + SFKirrvd      :: had;
 heb      + SFKirrgb      :: heb;
 heb      + SFKirrconjott :: hebbe, FONleegsjwa;

 kan      + SFKirrottenk0 :: kun;        {Alternative to 'kan je'}
 kan      + SFKirrottenk2 :: kan;
 kan      + SFKirrottenk2 :: kunt;       {Alternative to 'je kan'}
 kan      + SFKirrottenk3 :: kan;
 kan      + SFKirrott4    :: kunt;
 kan      + SFKirrott5    :: kunt;
 kan      + SFKirrottmv   :: kunnen, FONleegsjwa;
 kan      + SFKirrovtenk  :: kon;
 kan      + SFKirrovt5    :: kondt;
 kan      + SFKirrovtmv   :: konden, FONleegsjwa;
 kan      + SFKirrvd      :: kund;     
                               {'kunnen' has neither imperative nor conjunctive}

 wil      + SFKirrottenk0 :: wil;        {'wil jij'}
 wil      + SFKirrottenk2 :: wil;        {'jij wil' naast 'jij wilt'}
 wil      + SFKirrottenk2 :: wilt;       {ook: 'jij wil'}
 wil      + SFKirrottenk3 :: wil;
 wil      + SFKirrott4    :: wilt;
 wil      + SFKirrott5    :: wilt;
 wil      + SFKirrottmv   :: willen,  FONleegsjwa;
 wil      + SFKirrovtenk  :: wou;
 wil      + SFKirrovtenk  :: wilde,  FONleegsjwa;
 wil      + SFKirrovt5    :: wilde,  FONleegsjwa;    {alternative to "wou"    }
 wil      + SFKirrovtmv   :: wouden, FONleegsjwa;    {"wouen" is not accepted }
 wil      + SFKirrovtmv   :: wilden, FONleegsjwa;    {alternative to "wouden" }
 wil      + SFKirrvd      :: wild;                
 wil      + SFKirrgb      :: wil;
                                         {"willen" doesn't have a conjunctive}

 zal      + SFKirrottenk0 :: zul;                    {alternative to:'jij zal'}
 zal      + SFKirrottenk2 :: zal;
 zal      + SFKirrottenk2 :: zult;
 zal      + SFKirrottenk3 :: zal;
 zal      + SFKirrott4    :: zult;
 zal      + SFKirrott5    :: zult;
 zal      + SFKirrottmv   :: zullen,  FONleegsjwa;
 zal      + SFKirrovtenk  :: zou;
 zal      + SFKirrovt5    :: zoudt;
 zal      + SFKirrovtmv   :: zouden,  FONleegsjwa;    {"zouen" is not accepted}
                 {"zullen" doesn't have past part., imperative and conjunctive}

*mag      + SFKirrottenk2 :: *mag;     
*mag      + SFKirrottenk3 :: *mag;     
*mag      + SFKirrott4    :: *mag;
*mag      + SFKirrott5    :: *moogt;
*mag      + SFKirrottmv   :: *mogen,   FONleegsjwa;
*mag      + SFKirrovtenk  :: *mocht;
*mag      + SFKirrovt5    :: *mocht;
*mag      + SFKirrovtmv   :: *mochten, FONleegsjwa;
{......... for rules for past participle, see FREEFIX-table     }
*mag      + SFKirrconjott :: *moge, FONleegsjwa;
 mag      + SFKirrvd      ::  mogen,   FONleegsjwa;  {for the past participle}
/A mag      + SFKirrvd      ::  moogd;  {'gemoogd' is not very usual}
/A mag      + SFKirrvd      ::  mocht;  {'gemocht' is not very usual}
vermag   + SFKirrvd      ::  vermocht;  {'vermocht' is past part. of 'vermogen'}
                                     {'mogen' doesn't seem to have imperative}

*zeg      + SFKirrottenk2 :: *zegt;              {"zeggen" also weak          }
*zeg      + SFKirrottenk3 :: *zegt;              {'*' for "ontzeggen"-"ontzei"}
*zeg      + SFKirrott4    :: *zegt;
*zeg      + SFKirrott5    :: *zegt;
*zeg      + SFKirrottmv   :: *zeggen, FONleegsjwa;
*zeg      + SFKirrovtenk  :: *zei;
*zeg      + SFKirrovt5    :: *zegde;
*zeg      + SFKirrovtmv   :: *zeiden, FONleegsjwa;   {"zeien" is not accepted}
*zeg      + SFKirrvd      :: *zegd;
*zeg      + SFKirrgb      :: *zeg;
*zeg      + SFKirrconjott :: *zegge, FONleegsjwa; 

{...note: the following irregular verbs have irregular ott plural and irregular
          past participles}

*doe      + SFKirrottenk2 :: *doet;
*doe      + SFKirrottenk3 :: *doet;
*doe      + SFKirrott4    :: *doet;
*doe      + SFKirrott5    :: *doet;
*doe      + SFKirrottmv   :: *doen;
*doe      + SFKirrovtenk  :: *deed;
*doe      + SFKirrovt5    :: *deedt;
*doe      + SFKirrovtmv   :: *deden,  FONleegsjwa;
*doe      + SFKirrvd      :: *daan;
*doe      + SFKirrgb      :: *doe;
*doe      + SFKirrconjott :: *doe;

*sta      + SFKirrottenk2 :: *staat;
*sta      + SFKirrottenk3 :: *staat;
*sta      + SFKirrott4    :: *staat;
*sta      + SFKirrott5    :: *staat;
*sta      + SFKirrottmv   :: *staan;
*sta      + SFKirrovtenk  :: *stond;
*sta      + SFKirrovt5    :: *stondt;
*sta      + SFKirrovtmv   :: *stonden,  FONleegsjwa;
*sta      + SFKirrvd      :: *staan;
*sta      + SFKirrgb      :: *sta;
*sta      + SFKirrconjott :: *sta;

*sla      + SFKirrottenk2 :: *slaat;
*sla      + SFKirrottenk3 :: *slaat;
*sla      + SFKirrott4    :: *slaat;
*sta      + SFKirrott5    :: *slaat;
*sla      + SFKirrottmv   :: *slaan;
*sla      + SFKirrovtenk  :: *sloeg;
*sla      + SFKirrovt5    :: *sloegt;
*sla      + SFKirrovtmv   :: *sloegen, FONleegsjwa;
*sla      + SFKirrvd      :: *slagen,  FONleegsjwa;
*sla      + SFKirrgb      :: *sla;
*sla      + SFKirrconjott :: *sla;

*ga       + SFKirrottenk2 :: *gaat;
*ga       + SFKirrottenk3 :: *gaat;
*ga       + SFKirrott4    :: *gaat;
*ga       + SFKirrott5    :: *gaat;
*ga       + SFKirrottmv   :: *gaan;
*ga       + SFKirrovtenk  :: *ging;
*ga       + SFKirrovt5    :: *gingt;
*ga       + SFKirrovtmv   :: *gingen,  FONleegsjwa;
*ga       + SFKirrvd      :: *gaan;
*ga       + SFKirrgb      :: *ga;
*ga       + SFKirrconjott :: *ga;


{note: the following verbs have change of the length of the stem vowel in ott
         ("komen") or ovt (all). The past participle of "eten" ("gegeten") is
         irregular too.}

*beveel   + SFKirrottenk2 :: *beveelt;
*beveel   + SFKirrottenk3 :: *beveelt;
*beveel   + SFKirrott4    :: *beveelt;
*beveel   + SFKirrott5    :: *beveelt;
*beveel   + SFKirrottmv   :: *bevelen,  FONleegsjwa;
*beveel   + SFKirrovtenk  :: *beval;
*beveel   + SFKirrovt5    :: *bevaalt;
*beveel   + SFKirrovtmv   :: *bevalen,  FONleegsjwa;
*beveel   + SFKirrvd      :: *bevolen,  FONleegsjwa;
*beveel   + SFKirrgb      :: *beveel;
*beveel   + SFKirrconjott :: *bevele, FONleegsjwa;

*bid      + SFKirrottenk2 :: *bidt;
*bid      + SFKirrottenk3 :: *bidt;
*bid      + SFKirrott4    :: *bidt;
*bid      + SFKirrott5    :: *bidt;
*bid      + SFKirrottmv   :: *bidden,  FONleegsjwa;
*bid      + SFKirrovtenk  :: *bad;
*bid      + SFKirrovt5    :: *badt;
*bid      + SFKirrovtmv   :: *baden,  FONleegsjwa;
*bid      + SFKirrvd      :: *beden,  FONleegsjwa;
*bid      + SFKirrgb      :: *bid;
*bid      + SFKirrconjott :: *bidde, FONleegsjwa;

*breek    + SFKirrottenk2 :: *breekt;
*breek    + SFKirrottenk3 :: *breekt;
*breek    + SFKirrott4    :: *breekt;
*breek    + SFKirrott5    :: *breekt;
*breek    + SFKirrottmv   :: *breken,  FONleegsjwa;
*breek    + SFKirrovtenk  :: *brak;
*breek    + SFKirrovt5    :: *braakt;
*breek    + SFKirrovtmv   :: *braken,  FONleegsjwa;
*breek    + SFKirrvd      :: *broken,  FONleegsjwa;
*breek    + SFKirrgb      :: *breek;
*breek    + SFKirrconjott :: *breke, FONleegsjwa;

 eet      + SFKirrottenk2 :: eet;
 eet      + SFKirrottenk3 :: eet;
 eet      + SFKirrott4    :: eet;
 eet      + SFKirrott5    :: eet;
 eet      + SFKirrottmv   :: eten,  FONleegsjwa;
 eet      + SFKirrovtenk  :: at;
 eet      + SFKirrovt5    :: at;
 eet      + SFKirrovtmv   :: aten,  FONleegsjwa;
 eet      + SFKirrvd      :: geten, FONleegsjwa;
 eet      + SFKirrgb      :: eet;
 eet      + SFKirrconjott :: ete, FONleegsjwa;

*geef     + SFKirrottenk2 :: *geeft, FONleegonwissel;
*geef     + SFKirrottenk3 :: *geeft, FONleegonwissel;
*geef     + SFKirrott4    :: *geeft, FONleegonwissel;
*geef     + SFKirrott5    :: *geeft, FONleegonwissel;
*geef     + SFKirrottmv   :: *geven,  FONleegsjwa;
*geef     + SFKirrovtenk  :: *gaf, FONleegwissel;
*geef     + SFKirrovt5    :: *gaaft, FONleegonwissel;
*geef     + SFKirrovtmv   :: *gaven,  FONleegsjwa;
*geef     + SFKirrvd      :: *geven,  FONleegsjwa;
*geef     + SFKirrgb      :: *geef, FONleegwissel;
*geef     + SFKirrconjott :: *geve, FONleegsjwa;

*genees     + SFKirrottenk2 :: *geneest, FONleegonwissel;
*genees     + SFKirrottenk3 :: *geneest, FONleegonwissel;
*genees     + SFKirrott4    :: *geneest, FONleegonwissel;
*genees     + SFKirrott5    :: *geneest, FONleegonwissel;
*genees     + SFKirrottmv   :: *genezen,  FONleegsjwa;
*genees     + SFKirrovtenk  :: *genas, FONleegwissel;
*genees     + SFKirrovt5    :: *genaast, FONleegonwissel;
*genees     + SFKirrovtmv   :: *genazen,  FONleegsjwa;
*genees     + SFKirrvd      :: *genezen,  FONleegsjwa;
*genees     + SFKirrgb      :: *genees, FONleegwissel;
*genees     + SFKirrconjott :: *geneze, FONleegsjwa;

*kom      + SFKirrottenk2 :: *komt;  {BUT: "verwelkomen" in OVT and VD regular!}
*kom      + SFKirrottenk3 :: *komt;
*kom      + SFKirrott4    :: *komt;
*kom      + SFKirrott5    :: *komt;
*kom      + SFKirrottmv   :: *komen,  FONleegsjwa;
*kom      + SFKirrovtenk  :: *kwam;
*kom      + SFKirrovt5    :: *kwaamt;
*kom      + SFKirrovtmv   :: *kwamen, FONleegsjwa;
*kom      + SFKirrvd      :: *komen,  FONleegsjwa;
*kom      + SFKirrgb      :: *kom; 
*kom      + SFKirrconjott :: *kome, FONleegsjwa;

*lees     + SFKirrottenk2 :: *leest, FONleegonwissel; {'*' for: "herlezen" etc.}
*lees     + SFKirrottenk3 :: *leest, FONleegonwissel;
*lees     + SFKirrott4    :: *leest, FONleegonwissel;
*lees     + SFKirrott5    :: *leest, FONleegonwissel;
*lees     + SFKirrottmv   :: *lezen,  FONleegsjwa;
*lees     + SFKirrovtenk  :: *las, FONleegwissel;
*lees     + SFKirrovt5    :: *laast, FONleegonwissel;
*lees     + SFKirrovtmv   :: *lazen,  FONleegsjwa;
*lees     + SFKirrvd      :: *lezen,  FONleegsjwa;
*lees     + SFKirrgb      :: *lees, FONleegwissel;
*lees     + SFKirrconjott :: *leze, FONleegsjwa;

*lig      + SFKirrottenk2 :: *ligt;                 {'*' for: "verliggen", etc.}
*lig      + SFKirrottenk3 :: *ligt;     
*lig      + SFKirrott4    :: *ligt;
*lig      + SFKirrott5    :: *ligt;
*lig      + SFKirrottmv   :: *liggen, FONleegsjwa;   
*lig      + SFKirrovtenk  :: *lag;
*lig      + SFKirrovt5    :: *laagt;
*lig      + SFKirrovtmv   :: *lagen,  FONleegsjwa;
*lig      + SFKirrvd      :: *legen,  FONleegsjwa;
*lig      + SFKirrgb      :: *lig;
*lig      + SFKirrconjott :: *ligge, FONleegsjwa;

*meet     + SFKirrottenk2 :: *meet;
*meet     + SFKirrottenk3 :: *meet;
*meet     + SFKirrott4    :: *meet;
*meet     + SFKirrott5    :: *meet;
*meet     + SFKirrottmv   :: *meten,  FONleegsjwa;
*meet     + SFKirrovtenk  :: *mat;
*meet     + SFKirrovt5    :: *mat;
*meet     + SFKirrovtmv   :: *maten,  FONleegsjwa;
*meet     + SFKirrvd      :: *meten,  FONleegsjwa;
*meet     + SFKirrgb      :: *meet;
*meet     + SFKirrconjott :: *mete, FONleegsjwa;


*neem     + SFKirrottenk2 :: *neemt;
*neem     + SFKirrottenk3 :: *neemt;
*neem     + SFKirrott4    :: *neemt;
*neem     + SFKirrott5    :: *neem;
*neem     + SFKirrottmv   :: *nemen,  FONleegsjwa;
*neem     + SFKirrovtenk  :: *nam;
*neem     + SFKirrovt5    :: *naamt;
*neem     + SFKirrovtmv   :: *namen,  FONleegsjwa;
*neem     + SFKirrvd      :: *nomen,  FONleegsjwa;
*neem     + SFKirrgb      :: *neem;
*neem     + SFKirrconjott :: *neme, FONleegsjwa;

*spreek   + SFKirrottenk2 :: *spreekt;
*spreek   + SFKirrottenk3 :: *spreekt;
*spreek   + SFKirrott4    :: *spreekt;
*spreek   + SFKirrott5    :: *spreekt;
*spreek   + SFKirrottmv   :: *spreken,  FONleegsjwa;    
*spreek   + SFKirrovtenk  :: *sprak;
*spreek   + SFKirrovt5    :: *spraakt;
*spreek   + SFKirrovtmv   :: *spraken,  FONleegsjwa;
*spreek   + SFKirrvd      :: *sproken,  FONleegsjwa;
*spreek   + SFKirrgb      :: *spreek;
*spreek   + SFKirrconjott :: *spreke, FONleegsjwa;

*steek    + SFKirrottenk2 :: *steekt;
*steek    + SFKirrottenk3 :: *steekt;
*steek    + SFKirrott4    :: *steekt;
*steek    + SFKirrott5    :: *steekt;
*steek    + SFKirrottmv   :: *steken,  FONleegsjwa;    
*steek    + SFKirrovtenk  :: *stak;
*steek    + SFKirrovt5    :: *staakt;
*steek    + SFKirrovtmv   :: *staken,  FONleegsjwa;
*steek    + SFKirrvd      :: *stoken,  FONleegsjwa;
*steek    + SFKirrgb      :: *steek;
*steek    + SFKirrconjott :: *steke, FONleegsjwa;

*steel    + SFKirrottenk2 :: *steelt;
*steel    + SFKirrottenk3 :: *steelt;
*steel    + SFKirrott4    :: *steelt;
*steel    + SFKirrott5    :: *steelt;
*steel    + SFKirrottmv   :: *stelen,  FONleegsjwa;    
*steel    + SFKirrovtenk  :: *stal;
*steel    + SFKirrovt5    :: *staalt;
*steel    + SFKirrovtmv   :: *stalen,  FONleegsjwa;
*steel    + SFKirrvd      :: *stolen,  FONleegsjwa;
*steel    + SFKirrgb      :: *steel;
*steel    + SFKirrconjott :: *stele, FONleegsjwa;

*treed    + SFKirrottenk2 :: *treedt;
*treed    + SFKirrottenk3 :: *treedt;
*treed    + SFKirrott4    :: *treedt;
*treed    + SFKirrott5    :: *treedt;
*treed    + SFKirrottmv   :: *treden,  FONleegsjwa;    
*treed    + SFKirrovtenk  :: *trad;
*treed    + SFKirrovt5    :: *trad;
*treed    + SFKirrovtmv   :: *traden,  FONleegsjwa;
*treed    + SFKirrvd      :: *treden,  FONleegsjwa;
*treed    + SFKirrgb      :: *treed;
*treed    + SFKirrconjott :: *trede, FONleegsjwa;

*vreet    + SFKirrottenk2 :: *vreet;
*vreet    + SFKirrottenk3 :: *vreet;
*vreet    + SFKirrott4    :: *vreet;
*vreet    + SFKirrott5    :: *vreet;
*vreet    + SFKirrottmv   :: *vreten,  FONleegsjwa;
*vreet    + SFKirrovtenk  :: *vrat;
*vreet    + SFKirrovt5    :: *vrat;
*vreet    + SFKirrovtmv   :: *vraten,  FONleegsjwa;
*vreet    + SFKirrvd      :: *vreten,  FONleegsjwa;
*vreet    + SFKirrgb      :: *vreet;
*vreet    + SFKirrconjott :: *vrete, FONleegsjwa;

*vergeet  + SFKirrottenk2 :: *vergeet;
*vergeet  + SFKirrottenk3 :: *vergeet;
*vergeet  + SFKirrott4    :: *vergeet;
*vergeet  + SFKirrott5    :: *vergeet;
*vergeet  + SFKirrottmv   :: *vergeten,  FONleegsjwa;
*vergeet  + SFKirrovtenk  :: *vergat;
*vergeet  + SFKirrovt5    :: *vergat;
*vergeet  + SFKirrovtmv   :: *vergaten,  FONleegsjwa;
*vergeet  + SFKirrvd      :: *vergeten,  FONleegsjwa;
*vergeet  + SFKirrgb      :: *vergeet;
*vergeet  + SFKirrconjott :: *vergete, FONleegsjwa;

*zie      + SFKirrottenk2 :: *ziet;
*zie      + SFKirrottenk3 :: *ziet;
*zie      + SFKirrott4    :: *ziet;
*zie      + SFKirrott5    :: *ziet;
*zie      + SFKirrottmv   :: *zien;
*zie      + SFKirrovtenk  :: *zag;
*zie      + SFKirrovt5    :: *zaagt;
*zie      + SFKirrovtmv   :: *zagen,  FONleegsjwa;
*zie      + SFKirrvd      :: *zien;
*zie      + SFKirrgb      :: *zie;
*zie      + SFKirrconjott :: *zie, FONleegsjwa;

*zit      + SFKirrottenk2 :: *zit;
*zit      + SFKirrottenk3 :: *zit;
*zit      + SFKirrott4    :: *zit;
*zit      + SFKirrott5    :: *zit;
*zit      + SFKirrottmv   :: *zitten, FONleegsjwa;
*zit      + SFKirrovtenk  :: *zat;
*zit      + SFKirrovt5    :: *zat;
*zit      + SFKirrovtmv   :: *zaten,  FONleegsjwa;
*zit      + SFKirrvd      :: *zeten,  FONleegsjwa;
*zit      + SFKirrgb      :: *zit;
*zit      + SFKirrconjott :: *zitte, FONleegsjwa;

{$NP}
{...... Rules conjugationclasses 5 and 6: }
{note: verbs of these classes have ablaut in ovt only (marked with 'SFKovt1')}

*blaas         + SFKovt1        :: *blies, FONwisselwissel;
*draag         + SFKovt1        :: *droeg;               
*graaf         + SFKovt1        :: *groef, FONwisselwissel;
*hang          + SFKovt1        :: *hing;
*houd          + SFKovt1        :: *hield;
*houw          + SFKovt1        :: *hieuw;
*laat          + SFKovt1        :: *liet;
*loop          + SFKovt1        :: *liep;
*moet          + SFKovt1        :: *moest;
*raad          + SFKovt1        :: *ried;
*roep          + SFKovt1        :: *riep;
*slaap         + SFKovt1        :: *sliep;
*stoot         + SFKovt1        :: *stiet;
*vaar          + SFKovt1        :: *voer;
*val           + SFKovt1        :: *viel;
*vang          + SFKovt1        :: *ving;
*was           + SFKovt1        :: *wies, FONonwisselonwissel;
*weet          + SFKovt1        :: *wist;
*word          + SFKovt1        :: *werd;                

{$NP}
{...... Rules for conjugationclasses 7 and 8: }
{note: verbs of these classes have ablaut in ovt and vd (with: 'SFKovtvd1')}
{note: the verbs "rijs" en "krijs" have different FONrules, so that the rules
       for these verbs won't interfere!}

*berg          + SFKovtvd1      :: *borg;
*berst         + SFKovtvd1      :: *borst;
*bied          + SFKovtvd1      :: *bood;
*bijt          + SFKovtvd1      :: *beet;
*bind          + SFKovtvd1      :: *bond;
*blijf         + SFKovtvd1      :: *bleef, FONwisselwissel;
*blink         + SFKovtvd1      :: *blonk;      
*buig          + SFKovtvd1      :: *boog;       
*ding          + SFKovtvd1      :: *dong;       
*drijf         + SFKovtvd1      :: *dreef, FONwisselwissel;      
*dring         + SFKovtvd1      :: *drong;      
*drink         + SFKovtvd1      :: *dronk;
*druip         + SFKovtvd1      :: *droop;
*duik          + SFKovtvd1      :: *dook;       
*dwing         + SFKovtvd1      :: *dwong;      
*fluit         + SFKovtvd1      :: *floot;      
*geld          + SFKovtvd1      :: *gold;       
*geniet        + SFKovtvd1      :: *genoot;     
*giet          + SFKovtvd1      :: *goot;       
*glim          + SFKovtvd1      :: *glom;       
*grijp         + SFKovtvd1      :: *greep;      
*hijs          + SFKovtvd1      :: *hees, FONonwisselonwissel; 
*kies          + SFKovtvd1      :: *koos, FONwisselwissel;       
*kijf          + SFKovtvd1      :: *keef, FONwisselwissel;       
*kijk          + SFKovtvd1      :: *keek;       
*klim          + SFKovtvd1      :: *klom;
*klink         + SFKovtvd1      :: *klonk;      
*kluif         + SFKovtvd1      :: *kloof, FONwisselwissel;      
*krijs         + SFKovtvd1      :: *krees, FONonwisselonwissel;
*krimp         + SFKovtvd1      :: *kromp;      
*kruip         + SFKovtvd1      :: *kroop;      
*lieg          + SFKovtvd1      :: *loog;       
*lijd          + SFKovtvd1      :: *leed;       
*lijk          + SFKovtvd1      :: *leek;       
*luik          + SFKovtvd1      :: *look;       
*mijd          + SFKovtvd1      :: *meed;       
*nijg          + SFKovtvd1      :: *neeg;       
*nijp          + SFKovtvd1      :: *neep;       
*pluis         + SFKovtvd1      :: *ploos, FONwisselwissel;      
*prijs         + SFKovtvd1      :: *prees, FONwisselwissel;      
*riek          + SFKovtvd1      :: *rook;       
*rijd          + SFKovtvd1      :: *reed;       
*rijg          + SFKovtvd1      :: *reeg;       
*rijs          + SFKovtvd1      :: *rees,  FONwisselwissel; 
*rijt          + SFKovtvd1      :: *reet;       
*rijf          + SFKovtvd1      :: *reef,  FONwisselwissel;       
*ruik          + SFKovtvd1      :: *rook;       
*scheer        + SFKovtvd1      :: *schoor;     
*scheld        + SFKovtvd1      :: *schold;     
*schend        + SFKovtvd1      :: *schond;     
*schenk        + SFKovtvd1      :: *schonk;     
*schiet        + SFKovtvd1      :: *schoot;     
*schijn        + SFKovtvd1      :: *scheen;
*schijt        + SFKovtvd1      :: *scheet;     
*schrijf       + SFKovtvd1      :: *schreef, FONwisselwissel;    
*schrik        + SFKovtvd1      :: *schrok;     
*schuif        + SFKovtvd1      :: *schoof, FONwisselwissel;     
*schuil        + SFKovtvd1      :: *school;     
*slijp         + SFKovtvd1      :: *sleep;      
*slijt         + SFKovtvd1      :: *sleet;      
*slink         + SFKovtvd1      :: *slonk;      
*sluip         + SFKovtvd1      :: *sloop;      
*sluit         + SFKovtvd1      :: *sloot;      
*smelt         + SFKovtvd1      :: *smolt;      
*smijt         + SFKovtvd1      :: *smeet;      
*snijd         + SFKovtvd1      :: *sneed;      
*snuif         + SFKovtvd1      :: *snoof, FONwisselwissel;      
*snuit         + SFKovtvd1      :: *snoot;      
*spijt         + SFKovtvd1      :: *speet;      
*spin          + SFKovtvd1      :: *spon;       
*splijt        + SFKovtvd1      :: *spleet;     
*spring        + SFKovtvd1      :: *sprong;     
*spruit        + SFKovtvd1      :: *sproot;     
*spuit         + SFKovtvd1      :: *spoot;      
*stijf         + SFKovtvd1      :: *steef, FONwisselwissel;      
*stink         + SFKovtvd1      :: *stonk;      
*strijk        + SFKovtvd1      :: *streek;     
*stuif         + SFKovtvd1      :: *stoof, FONwisselwissel;         
*tijg          + SFKovtvd1      :: *teeg;       
*tijg          + SFKovtvd1      :: *toog;       
*tref          + SFKovtvd1      :: *trof,  FONonwisselonwissel;       
*trek          + SFKovtvd1      :: *trok;       
*vecht         + SFKovtvd1      :: *vocht;      
*vijs          + SFKovtvd1      :: *vees,   FONwisselwissel;      
*vind          + SFKovtvd1      :: *vond;       
*vlecht        + SFKovtvd1      :: *vlocht;     
*vlied         + SFKovtvd1      :: *vlood;      
*vliet         + SFKovtvd1      :: *vloot;      
*weeg          + SFKovtvd1      :: *woog;       
*wijk          + SFKovtvd1      :: *week;       
*wijs          + SFKovtvd1      :: *wees,  FONwisselwissel;       
*wijt          + SFKovtvd1      :: *weet;       
*win           + SFKovtvd1      :: *won;        
*wind          + SFKovtvd1      :: *wond;       
*wrijf         + SFKovtvd1      :: *wreef, FONwisselwissel;      
*wring         + SFKovtvd1      :: *wrong;      
*wuif          + SFKovtvd1      :: *woof,  FONwisselwissel; {only in ANS}
*zeik          + SFKovtvd1      :: *zeek;
*zend          + SFKovtvd1      :: *zond;       
*zijg          + SFKovtvd1      :: *zeeg;       
*zin           + SFKovtvd1      :: *zon;        
*zing          + SFKovtvd1      :: *zong;       
*zink          + SFKovtvd1      :: *zonk;       
*zuig          + SFKovtvd1      :: *zoog;       
*zuip          + SFKovtvd1      :: *zoop;       
*zwel          + SFKovtvd1      :: *zwol;       
*zwelg         + SFKovtvd1      :: *zwolg;      
*zwem          + SFKovtvd1      :: *zwom;       
*zwijg         + SFKovtvd1      :: *zweeg;      
*zweer         + SFKovtvd1      :: *zwoor;      
*delf          + SFKovtvd1      :: *dolf,  FONwisselwissel;       
*melk          + SFKovtvd1      :: *molk;       
*spuug         + SFKovtvd1      :: *spoog;      
*vries         + SFKovtvd1      :: *vroor, FONwisselleeg;      
*kerf          + SFKovtvd1      :: *korf,  FONwisselwissel; 
        
{note: the following verbs belong to class 8; they don't have 'simple' forms
       (verbs like "driegen", "ginnen", "drieten", etc. do _not_ exist!)     }

*bedrieg       + SFKovtvd1      :: *bedroog;
*begin         + SFKovtvd1      :: *begon;
*ontgin        + SFKovtvd1      :: *ontgon;
*verdriet      + SFKovtvd1      :: *verdroot;
*verdwijn      + SFKovtvd1      :: *verdween;
*verslind      + SFKovtvd1      :: *verslond;
*verlies       + SFKovtvd1      :: *verloor, FONwisselleeg;

{$NP}
{...... Rules for conjugationclasses 9 and 10: }
{note: verbs of these classes have ablaut in ovt and vd (with: 'SFKovtvd2')}

*breng         + SFKovtvd2      :: *bracht;
*denk          + SFKovtvd2      :: *dacht;
*dunk          + SFKovtvd2      :: *docht;
*koop          + SFKovtvd2      :: *kocht;
*zoek          + SFKovtvd2      :: *zocht;

{$NP}
{...... Rules for conjugationclasses 11 and 12: }
{note: verbs of these classes have (different) ablaut in ovt ('SFKovt2') and vd 
       ('SFKvd1')}

*bederf        + SFKovt2        :: *bedierf, FONwisselwissel;
*help          + SFKovt2        :: *hielp;
*hef           + SFKovt2        :: *hief,    FONonwisselwissel;  
*schep         + SFKovt2        :: *schiep;
*sterf         + SFKovt2        :: *stierf,  FONwisselwissel;
*werf          + SFKovt2        :: *wierf,   FONwisselwissel;
*werp          + SFKovt2        :: *wierp;
*zweer         + SFKovt2        :: *zwoer;

*bederf        + SFKvd1         :: *dorf,    FONwisselwissel;
*help          + SFKvd1         :: *holp;
*hef           + SFKvd1         :: *heef,    FONonwisselwissel;  
*schep         + SFKvd1         :: *schaap; 
*sterf         + SFKvd1         :: *storf,   FONwisselwissel;
*werf          + SFKvd1         :: *worf,    FONwisselwissel;
*werp          + SFKvd1         :: *worp;
*zweer         + SFKvd1         :: *zwoor; 

{$NP}
{...... Rules conjugationclasses 13: }
{note: verbs of these class have ablaut in ovt only (marked with 'SFKovt3');
       they do not have a past participle }

*dunk          + SFKovt3        :: *dacht;     
*durf          + SFKovt3        :: *dorst;     
*jaag          + SFKovt3        :: *joeg;      
*leg           + SFKovt3        :: *lei;       
*pleeg         + SFKovt3        :: *placht;
*vraag         + SFKovt3        :: *vroeg;     
*waai          + SFKovt3        :: *woei;      

{$NP}
{...... Rules conjugationclasses 15 and 16: }
{note: verbs of these classes have ablaut in vd only (marked with 'SFKvd2');
       this ablaut is for most verbs 'imaginary', only the last six verbs have
       real ablaut. In fact, two groups of verbs have been combined here, and
       therefore we needed ablaut rules which do not change anything. } 

*bak           + SFKvd2         :: *bak;
*ban           + SFKvd2         :: *ban;
*barst         + SFKvd2         :: *barst;
*brouw         + SFKvd2         :: *brouw;
*heet          + SFKvd2         :: *heet;
*hoef          + SFKvd2         :: *hoef,  FONwisselwissel; {only in ANS}
*lach          + SFKvd2         :: *lach;
*laad          + SFKvd2         :: *laad;
*maal          + SFKvd2         :: *maal;
*raad          + SFKvd2         :: *raad;
*scheid        + SFKvd2         :: *scheid;
*span          + SFKvd2         :: *span;
*spouw         + SFKvd2         :: *spouw;                  {only in ANS}
*stoot         + SFKvd2         :: *stoot;
*vouw          + SFKvd2         :: *vouw;
*was           + SFKvd2         :: *was,   FONonwisselonwissel;
*weef          + SFKvd2         :: *weef,  FONwisselwissel; {only in ANS}
*zout          + SFKvd2         :: *zout;
*zweet         + SFKvd2         :: *zweet;

*berst         + SFKvd2         :: *borst;
*delf          + SFKvd2         :: *dolf,  FONwisselwissel; 
*melk          + SFKvd2         :: *molk;      
*wreek         + SFKvd2         :: *wrook;     
*zied          + SFKvd2         :: *zood;      
*zweer         + SFKvd2         :: *zwoor;     

END

$NP
$CH 4,Lextree rules
$CH 4.1,Lextree rules for verbs

Note:
-  irregular verbs don't have class 0 (as they had in ROSETTA2) but class 1 
   and 2.
-  even class-number correspond with verbs without "ge"-prefix in the past
   participle, odd class-numbers correspond with verbs with "ge"-prefix.
-  the function "copy...." copies the value of the -in the rule not mentioned-
   fields of the old record to those of the new one.
-  Conjugationclass 14 does _not_ exist.

Rule for verbs without derivational affixes:

%VerbBtoSub

m1:   BVERB{BVERBrec1}
m:    SUBVERB{SUBVERBrec1} [head/ BVERB{BVERBrec1}]

comp:        
         C:  true
         A:  SUBVERBrec1 := copybverbtosubverb(BVERBrec1)

decomp:      
         C: true
         A:  @
&
$NP
$CH 4.1.1,Rules for weak and strong verbs (irregular verbs: see section 4.1.2)
$CH 4.1.1.1,Rules for OTT
Rule for OTT "0"th and 1th person singular

%VerbOttEnk1

m1:   SUBVERB{SUBVERBrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:        
         C:  [3,4,5,6,7,8,9,10,11,12,13,15,16] * SUBVERBrec1.conjclasses <> []
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := ott;
             VERBrec1.number   := singular;
             VERBrec1.persons  := [1,0]

decomp:      
         C:  (VERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> [])
             and (VERBrec1.tijd  = ott) and
             (VERBrec1.number = singular) and
             ((1 in VERBrec1.persons) or (0 in VERBrec1.persons))
         A: @
&


Rule for OTT 2th , 3th, 4th and 5th person singular

%VerbOttEnk2

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:        
         C: (SUBVERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> [])
            and (SFCATrec1.key = SFKt)
         A: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
            VERBrec1.tijd     := ott;
            VERBrec1.number   := singular;
            VERBrec1.persons  := [2,3,4,5]

decomp:      
          C: (VERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> []) 
            and (VERBrec1.tijd  = ott) and 
            (VERBrec1.number = singular) and
            ((2 in VERBrec1.persons) or (3 in VERBrec1.persons) or
             (4 in VERBrec1.persons) or (5 in VERBrec1.persons))
         A: SFCATrec1.key  := SFKt
&
$NP
Rule for OTT plural

%VerbOttMv

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1: (SUBVERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> [])
             C2: (SFCATrec1.key = SFKen)
             A2: VERBrec1.persons  := [1,2,3]
             C2: (SFCATrec1.key = SFKt)
             A2: VERBrec1.persons  := [4,5]
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := ott;
             VERBrec1.number   := plural

decomp:
         C1: (VERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> [])
             and (VERBrec1.tijd  = ott) and
             (VERBrec1.number = plural)
             C2: (1 in VERBrec1.persons) or (2 in VERBrec1.persons) or
                 (3 in VERBrec1.persons)
             A2:  SFCATrec1.key   := SFKen
             C2: (4 in VERBrec1.persons) or (5 in VERBrec1.persons)
             A2:  SFCATrec1.key   := SFKt

         A1: @
&
$NP
$CH 4.1.1.2,Rules for OVT
Rule for OVT person 1, 2, 3 and 4 sing. (+ 5 sing. for class 3,4,15,16)

%VerbOvtEnk

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1:  true
           C2:  (SUBVERBrec1.conjclasses * [3,4] <> []) and
                                                      (SFCATrec1.key = SFKdete)
           A2:  VERBrec1.persons  := [1,2,3,4,5]
           C2:  (SUBVERBrec1.conjclasses * [5,6] <> []) and 
                                                      (SFCATrec1.key = SFKovt1)
           A2:  VERBrec1.persons  := [1,2,3,4]
           C2:  (SUBVERBrec1.conjclasses * [7,8] <> []) and
                                                     (SFCATrec1.key = SFKovtvd1)
           A2:  VERBrec1.persons  := [1,2,3,4]
           C2:  (SUBVERBrec1.conjclasses * [9,10] <> [])  and 
                                                     (SFCATrec1.key = SFKovtvd2)
           A2:  VERBrec1.persons  := [1,2,3,4]
           C2:  (SUBVERBrec1.conjclasses * [11,12] <> []) and 
                                                       (SFCATrec1.key = SFKovt2)
           A2:  VERBrec1.persons  := [1,2,3,4]
           C2:  (13 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKovt3)
           A2:  VERBrec1.persons  := [1,2,3,4]
           C2:  (SUBVERBrec1.conjclasses * [15,16] <> []) and 
                                                       (SFCATrec1.key = SFKdete)
           A2:  VERBrec1.persons  := [1,2,3,4,5]
         A1: VERBrec1        := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd   := ovt;
             VERBrec1.number := singular

decomp:
         C1: (VERBrec1.tijd   = ovt) and
             (VERBrec1.number = singular)
           C2:  (1 in VERBrec1.persons) or (2 in VERBrec1.persons) or
                 (3 in VERBrec1.persons) or (4 in VERBrec1.persons)
             C3:  VERBrec1.conjclasses * [3,4]   <> []
             A3:  SFCATrec1.key := SFKdete
             C3:  VERBrec1.conjclasses * [5,6]   <> []
             A3:  SFCATrec1.key := SFKovt1
             C3:  VERBrec1.conjclasses * [7,8]   <> []
             A3:  SFCATrec1.key := SFKovtvd1
             C3:  VERBrec1.conjclasses * [9,10]  <> []
             A3:  SFCATrec1.key := SFKovtvd2
             C3:  VERBrec1.conjclasses * [11,12] <> []
             A3:  SFCATrec1.key := SFKovt2
             C3:  13 in VERBrec1.conjclasses
             A3:  SFCATrec1.key := SFKovt3
             C3:  VERBrec1.conjclasses * [15,16] <> []
             A3:  SFCATrec1.key := SFKdete
           A2:  @
           C2: 5 in VERBrec1.persons 
             C3:  VERBrec1.conjclasses * [3,4]    <> []
             A3:  SFCATrec1.key := SFKdete
             C3:  VERBrec1.conjclasses * [15,16]  <> []
             A3:  SFCATrec1.key := SFKdete
           A2:  @
         A1: @
&
$NP
Rule for OVT 5th person sing. for classes 5,6,7,8,9,10,11,12,13

%VerbOvtEnkPers5extra

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m3:   SFCAT{SFCATrec2}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1: SFCATrec2.key = SFKt
           C2:  (SUBVERBrec1.conjclasses * [5,6] <> []) and 
                                                       (SFCATrec1.key = SFKovt1)
           A2:  @
           C2:  (SUBVERBrec1.conjclasses * [7,8] <> []) and 
                                                     (SFCATrec1.key = SFKovtvd1)
           A2:  @
           C2:  (SUBVERBrec1.conjclasses * [9,10] <> []) and 
                                                     (SFCATrec1.key = SFKovtvd2)
           A2:  @
           C2:  (SUBVERBrec1.conjclasses * [11,12] <> []) and 
                                                       (SFCATrec1.key = SFKovt2)
           A2:  @
           C2:  (13 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKovt3)
           A2:  @
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := ovt;
             VERBrec1.number   := singular;
             VERBrec1.persons  := [5]

decomp:
         C1: (VERBrec1.tijd   = ovt) and
             (VERBrec1.number = singular) and
             (5 in VERBrec1.persons)
           C2:  VERBrec1.conjclasses * [5,6]   <> []
           A2:  SFCATrec1.key := SFKovt1
           C2:  VERBrec1.conjclasses * [7,8]   <> []
           A2:  SFCATrec1.key := SFKovtvd1
           C2:  VERBrec1.conjclasses * [9,10]  <> []
           A2:  SFCATrec1.key := SFKovtvd2
           C2:  VERBrec1.conjclasses * [11,12] <> []
           A2:  SFCATrec1.key := SFKovt2
           C2:  13 in VERBrec1.conjclasses
           A2:  SFCATrec1.key := SFKovt3
           C2:  VERBrec1.conjclasses * [15,16] <> []
           A2:  SFCATrec1.key := SFKdete
         A1: SFCATrec2.key := SFKt
&
$NP
Rule for OVT person 1, 2, 3 plural (+ 5 plural for class 5,6,7,8,9,10,11,12,13) 

%VerbOvtMv 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m3:   SFCAT{SFCATrec2}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1: true
           C2:  SFCATrec2.key = SFKen
             C3:  (SUBVERBrec1.conjclasses * [3,4] <> []) and 
                                                      (SFCATrec1.key = SFKdete)
             A3:  @
             C3:  (SUBVERBrec1.conjclasses * [5,6] <> []) and 
                                                      (SFCATrec1.key = SFKovt1)
             A3:  @
             C3:  (SUBVERBrec1.conjclasses * [7,8] <> []) and 
                                                    (SFCATrec1.key = SFKovtvd1)
             A3:  @
             C3:  (SUBVERBrec1.conjclasses * [9,10] <> []) and 
                                                    (SFCATrec1.key = SFKovtvd2)
             A3:  @
             C3:  (SUBVERBrec1.conjclasses * [11,12] <> []) and 
                                                      (SFCATrec1.key = SFKovt2)
             A3:  @
             C3:  (13 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKovt3)
             A3:  @
             C3:  (SUBVERBrec1.conjclasses * [15,16] <> []) and 
                                                      (SFCATrec1.key = SFKdete)
             A3:  @
           A2:  VERBrec1.persons  := [1,2,3]
           C2:  SFCATrec2.key = SFKt
             C3:  (SUBVERBrec1.conjclasses * [5,6] <> []) and 
                                                      (SFCATrec1.key = SFKovt1)
             A3:  @
             C3:  (SUBVERBrec1.conjclasses * [7,8] <> []) and 
                                                    (SFCATrec1.key = SFKovtvd1)
             A3:  @
             C3:  (SUBVERBrec1.conjclasses * [9,10] <> []) and 
                                                    (SFCATrec1.key = SFKovtvd2)
             A3:  @
             C3:  (SUBVERBrec1.conjclasses * [11,12] <> []) and 
                                                      (SFCATrec1.key = SFKovt2)
             A3:  @
             C3:  (13 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKovt3)
             A3:  @
           A2:  VERBrec1.persons  := [5]
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := ovt;
             VERBrec1.number   := plural

decomp:
         C1: (VERBrec1.tijd   = ovt) and
             (VERBrec1.number = plural)
           C2:  (1 in VERBrec1.persons) or (2 in VERBrec1.persons)
                                         or (3 in VERBrec1.persons)
             C3:  VERBrec1.conjclasses * [3,4] <> []
             A3:  SFCATrec1.key := SFKdete
             C3:  VERBrec1.conjclasses * [5,6] <> []
             A3:  SFCATrec1.key := SFKovt1
             C3:  VERBrec1.conjclasses * [7,8] <> []
             A3:  SFCATrec1.key := SFKovtvd1
             C3:  VERBrec1.conjclasses * [9,10] <> []
             A3:  SFCATrec1.key := SFKovtvd2
             C3:  VERBrec1.conjclasses * [11,12] <> []
             A3:  SFCATrec1.key := SFKovt2
             C3:  13 in VERBrec1.conjclasses
             A3:  SFCATrec1.key := SFKovt3
             C3:  VERBrec1.conjclasses * [15,16] <> []
             A3:  SFCATrec1.key := SFKdete
           A2: SFCATrec2.key := SFKen
           C2:  5 in VERBrec1.persons 
             C3:  VERBrec1.conjclasses * [5,6] <> []
             A3:  SFCATrec1.key := SFKovt1
             C3:  VERBrec1.conjclasses * [7,8] <> []
             A3:  SFCATrec1.key := SFKovtvd1
             C3:  VERBrec1.conjclasses * [9,10] <> []
             A3:  SFCATrec1.key := SFKovtvd2
             C3:  VERBrec1.conjclasses * [11,12] <> []
             A3:  SFCATrec1.key := SFKovt2
             C3:  13 in VERBrec1.conjclasses
             A3:  SFCATrec1.key := SFKovt3
             C3:  VERBrec1.conjclasses * [15,16] <> []
             A3:  SFCATrec1.key := SFKdete
           A2:  SFCATrec2.key := SFKt
         A1:  @
&
$NP
Rule for OVT 4th person plural, and 5th person plural for class 3,4,15,16. 

%VerbOvtMvPers4en5extra

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1:  true
           C2:  (SUBVERBrec1.conjclasses * [3,4] <> []) and 
                                                       (SFCATrec1.key = SFKdete)
           A2:  VERBrec1.persons  := [4,5]
           C2:  (SUBVERBrec1.conjclasses * [5,6] <> []) and 
                                                       (SFCATrec1.key = SFKovt1)
           A2:  VERBrec1.persons  := [4]
           C2:  (SUBVERBrec1.conjclasses * [7,8] <> []) and 
                                                     (SFCATrec1.key = SFKovtvd1)
           A2:  VERBrec1.persons  := [4]
           C2:  (SUBVERBrec1.conjclasses * [9,10] <> []) and 
                                                     (SFCATrec1.key = SFKovtvd2)
           A2:  VERBrec1.persons  := [4]
           C2:  (SUBVERBrec1.conjclasses * [11,12] <> []) and 
                                                       (SFCATrec1.key = SFKovt2)
           A2:  VERBrec1.persons  := [4]
           C2:  (13 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKovt3)
           A2:  VERBrec1.persons  := [4]
           C2:  (SUBVERBrec1.conjclasses * [15,16] <> []) and 
                                                      (SFCATrec1.key = SFKdete)
           A2:  VERBrec1.persons  := [4,5]
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := ovt;
             VERBrec1.number   := plural

decomp:
         C1: (VERBrec1.tijd   = ovt) and
             (VERBrec1.number = plural)
           C2: 4 in VERBrec1.persons 
             C3:  VERBrec1.conjclasses * [3,4] <> []
             A3:  SFCATrec1.key := SFKdete
             C3:  VERBrec1.conjclasses * [5,6] <> []
             A3:  SFCATrec1.key := SFKovt1
             C3:  VERBrec1.conjclasses * [7,8] <> []
             A3:  SFCATrec1.key := SFKovtvd1
             C3:  VERBrec1.conjclasses * [9,10] <> []
             A3:  SFCATrec1.key := SFKovtvd2
             C3:  VERBrec1.conjclasses * [11,12] <> []
             A3:  SFCATrec1.key := SFKovt2
             C3:  13 in VERBrec1.conjclasses 
             A3:  SFCATrec1.key := SFKovt3
             C3:  VERBrec1.conjclasses * [15,16] <> []
             A3:  SFCATrec1.key := SFKdete
           A2:  @
           C2: 5 in VERBrec1.persons 
             C3:  VERBrec1.conjclasses * [3,4] <> []
             A3:  SFCATrec1.key := SFKdete
             C3:  VERBrec1.conjclasses * [15,16] <> []
             A3:  SFCATrec1.key := SFKdete
           A2:  @
         A1:  @
&
$NP
$CH 4.1.1.3,Rules for remaining forms
Rule for past participle with "ge" for the classes  3, 5, 9

Note: In this rule, the past participle is formed by one prefix and one
suffix; the suffix handles ablaut or inflectional ending.

%VerbVd1 

m1:   SUBVERB{SUBVERBrec1}
m2:   PFCAT{PFCATrec1}
m3:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1: PFCATrec1.key = PFKge 
           C2: (3 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKdt) 
           A2: @
           C2: (5 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKen) 
           A2: @
           C2: (9 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKovtvd2) 
           A2: @
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := vd;
             VERBrec1.number   := omeganumber;
             VERBrec1.persons  := []

decomp:
         C1: VERBrec1.tijd = vd
           C2:  3 in VERBrec1.conjclasses
           A2:  SFCATrec1.key := SFKdt
           C2:  5 in VERBrec1.conjclasses
           A2:  SFCATrec1.key := SFKen
           C2:  9 in VERBrec1.conjclasses 
           A2:  SFCATrec1.key := SFKovtvd2
         A1: PFCATrec1.key := PFKge
&
$NP
Rule for past participle with "ge" for the classes  7,11,15

Note: In this rule, the past participle is formed by one prefix and two
suffixes; one suffixe handles ablaut, the other "-en"-ending.

%VerbVd2 

m1:   SUBVERB{SUBVERBrec1}
m2:   PFCAT{PFCATrec1}
m3:   SFCAT{SFCATrec1}
m4:   SFCAT{SFCATrec2}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1: (PFCATrec1.key = PFKge) and (SFCATrec2.key = SFKen)
           C2: (7 in SUBVERBrec1.conjclasses)  and (SFCATrec1.key = SFKovtvd1) 
           A2: @
           C2: (11 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKvd1) 
           A2: @
           C2: (15 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKvd2) 
           A2: @
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := vd;
             VERBrec1.number   := omeganumber;
             VERBrec1.persons  := []

decomp:
         C1: VERBrec1.tijd = vd
           C2: 7 in VERBrec1.conjclasses
           A2: SFCATrec1.key := SFKovtvd1 
           C2: 11 in VERBrec1.conjclasses 
           A2: SFCATrec1.key := SFKvd1
           C2: 15 in VERBrec1.conjclasses 
           A2: SFCATrec1.key := SFKvd2 
         A1: PFCATrec1.key   := PFKge;
             SFCATrec2.key   := SFKen
&
$NP
Rule for past participle without "ge" for the classes  4,6,10

Note: In this rule, the past participle is formed by one suffix only; the 
suffix handles ablaut or inflectional ending.

%VerbVd3 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1: true
           C2: (4 in SUBVERBrec1.conjclasses)  and (SFCATrec1.key = SFKdt) 
           A2: @
           C2: (6 in SUBVERBrec1.conjclasses)  and (SFCATrec1.key = SFKen) 
           A2: @
           C2: (10 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKovtvd2) 
           A2: @
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := vd;
             VERBrec1.number   := omeganumber;
             VERBrec1.persons  := []

decomp:
         C1: VERBrec1.tijd = vd
           C2:  4 in VERBrec1.conjclasses 
           A2:  SFCATrec1.key := SFKdt
           C2:  6 in VERBrec1.conjclasses
           A2:  SFCATrec1.key := SFKen
           C2:  10 in VERBrec1.conjclasses
           A2:  SFCATrec1.key := SFKovtvd2
         A1: @
&
$NP
Rule for past participle without "ge" for the classes  8,12,16

Note: In this rule, the past participle is formed by two suffixes; one suffix
handles ablaut, the other the "-en"-ending.

%VerbVd4 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m3:   SFCAT{SFCATrec2}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1: SFCATrec2.key = SFKen
           C2: (8 in SUBVERBrec1.conjclasses)  and (SFCATrec1.key = SFKovtvd1) 
           A2: @
           C2: (12 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKvd1) 
           A2: @
           C2: (16 in SUBVERBrec1.conjclasses) and (SFCATrec1.key = SFKvd2) 
           A2: @
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := vd;
             VERBrec1.number   := omeganumber;
             VERBrec1.persons  := []

decomp:
         C1: VERBrec1.tijd = vd
           C2: 8 in VERBrec1.conjclasses 
           A2: SFCATrec1.key := SFKovtvd1 
           C2: 12 in VERBrec1.conjclasses 
           A2: SFCATrec1.key := SFKvd1
           C2: 16 in VERBrec1.conjclasses 
           A2: SFCATrec1.key := SFKvd2 
         A1: SFCATrec2.key := SFKen
&
$NP
Rule for the infinitive

Note: verbs of class 0 do have an infinitive-form

%VerbInf 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:  (SUBVERBrec1.conjclasses * [0,3,4,5,6,7,8,9,10,11,12,13,15,16] <> 
             []) and (SFCATrec1.key = SFKen)
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := inf;
             VERBrec1.number   := omeganumber;
             VERBrec1.persons  := []

decomp:
         C:  (VERBrec1.conjclasses * [0,3,4,5,6,7,8,9,10,11,12,13,15,16] <> [])
             and (VERBrec1.tijd  = inf) 
         A:  SFCATrec1.key     := SFKen
&
$NP
Rule for present participle

Note: verbs of class 0 do have a present participle

%VerbTd 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m3:   SFCAT{SFCATrec2}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:  (SUBVERBrec1.conjclasses * [0,3,4,5,6,7,8,9,10,11,12,13,15,16] <> 
             []) and (SFCATrec1.key = SFKen) and
             (SFCATrec2.key = SFKdt)
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := td;
             VERBrec1.number   := omeganumber;
             VERBrec1.persons  := []

decomp:
         C:  (VERBrec1.conjclasses * [0,3,4,5,6,7,8,9,10,11,12,13,15,16] <> [])
             and (VERBrec1.tijd = td)
         A:  SFCATrec1.key     := SFKen;
             SFCATrec2.key     := SFKdt
&
$NP
Rule for imperative singular

%VerbGbEnk 

m1:   SUBVERB{SUBVERBrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:  SUBVERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> []
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := gb;
             VERBrec1.number   := singular;
             VERBrec1.persons  := []

decomp:
         C:  (VERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> [])
             and (VERBrec1.tijd  = gb) and
             (VERBrec1.number = singular)
         A:  @
&
Rule for imperative plural

%VerbGbMv 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C: (SUBVERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> [])
            and (SFCATrec1.key = SFKt)
         A: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
            VERBrec1.tijd     := gb;
            VERBrec1.number   := plural;
            VERBrec1.persons  := []

decomp:
         C: (VERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> []) and
            (VERBrec1.tijd  = gb) and
            (VERBrec1.number = plural)
         A: SFCATrec1.key     := SFKt
&
$NP
Rule for conjunctive

Note: all weak and strong verbs have present conjunctive forms only

%VerbConjunctiefOtt

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C: (SUBVERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> [])
            and (SFCATrec1.key = SFKe)
         A: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
            VERBrec1.tijd     := conjunctiefott;
            VERBrec1.number   := omeganumber;
            VERBrec1.persons  := []

decomp:
         C: (VERBrec1.conjclasses * [3,4,5,6,7,8,9,10,11,12,13,15,16] <> []) and
            (VERBrec1.tijd = conjunctiefott) 
         A: SFCATrec1.key   := SFKe
&
$NP
$CH 4.1.2,Irregular verbs
$CH 4.1.2.1,Rules for OTT
Rule for the "0"th and 1st person singular OTT

%VerbZorOttExtra 

m1:   SUBVERB{SUBVERBrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:  SUBVERBrec1.conjclasses * [1,2] <> []
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := ott;
             VERBrec1.number   := singular;
             VERBrec1.persons  := [1,0]

decomp:
         C:  (VERBrec1.tijd   = ott) and
             (VERBrec1.number = singular) and
             ((1 in VERBrec1.persons) or (0 in VERBrec1.persons)) and
             (VERBrec1.conjclasses * [1,2] <> [])
         A:  @
&
$NP
Rule for other OTT-forms

Note: SFKIrrottenk0 is needed for the (extra) forms "zul je" and "kun je".

%VerbZorOtt 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1:  SUBVERBrec1.conjclasses * [1,2] <> []
           C2:  SFCATrec1.key = SFKIrrottenk0
           A2:  VERBrec1.persons  := [0];
                VERBrec1.number   := singular
           C2:  SFCATrec1.key = SFKIrrottenk2
           A2:  VERBrec1.persons  := [2];
                VERBrec1.number   := singular
           C2:  SFCATrec1.key = SFKIrrottenk3
           A2:  VERBrec1.persons  := [3];
                VERBrec1.number   := singular
           C2:  SFCATrec1.key = SFKIrrott4
           A2:  VERBrec1.persons  := [4];
                VERBrec1.number   := singular
           C2:  SFCATrec1.key = SFKIrrott4
           A2:  VERBrec1.persons  := [4];
                VERBrec1.number   := plural
           C2:  SFCATrec1.key = SFKIrrott5
           A2:  VERBrec1.persons  := [5];
                VERBrec1.number   := singular
           C2:  SFCATrec1.key = SFKIrrott5
           A2:  VERBrec1.persons  := [5];
                VERBrec1.number   := plural
           C2:  SFCATrec1.key = SFKIrrottmv
           A2:  VERBrec1.persons  := [1,2,3];
                VERBrec1.number   := plural
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := ott

decomp:
         C1:  (VERBrec1.tijd  = ott) and (VERBrec1.conjclasses * [1,2] <> [])
           C2:  VERBrec1.number = singular
             C3:  0 in VERBrec1.persons 
             A3:  SFCATrec1.key := SFKIrrottenk0
             C3:  2 in VERBrec1.persons 
             A3:  SFCATrec1.key := SFKIrrottenk2
             C3:  3 in VERBrec1.persons 
             A3:  SFCATrec1.key := SFKIrrottenk3
             C3:  4 in VERBrec1.persons 
             A3:  SFCATrec1.key := SFKIrrott4
             C3:  5 in VERBrec1.persons 
             A3:  SFCATrec1.key := SFKIrrott5
           A2:  @
           C2:  VERBrec1.number = plural
             C3:  (1 in VERBrec1.persons) or (2 in VERBrec1.persons) or
                  (3 in VERBrec1.persons)
             A3:  SFCATrec1.key := SFKIrrottmv
             C3:  4 in VERBrec1.persons 
             A3:  SFCATrec1.key := SFKIrrott4
             C3:  5 in VERBrec1.persons 
             A3:  SFCATrec1.key := SFKIrrott5
           A2:  @
         A1:  @
&
$NP
$CH 4.1.2.1,Rule for OVT

%VerbZorOvt

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1:  SUBVERBrec1.conjclasses * [1,2] <> []
           C2:  SFCATrec1.key = SFKIrrovtenk
           A2:  VERBrec1.persons  := [1,2,3,4];
                VERBrec1.number   := singular
           C2:  SFCATrec1.key = SFKIrrovt5
           A2:  VERBrec1.persons  := [5];
                VERBrec1.number   := singular
           C2:  SFCATrec1.key = SFKIrrovtmv
           A2:  VERBrec1.persons  := [1,2,3];
                VERBrec1.number   := plural
           C2:  SFCATrec1.key = SFKIrrovtenk
           A2:  VERBrec1.persons  := [4];
                VERBrec1.number   := plural
           C2:  SFCATrec1.key = SFKIrrovt5
           A2:  VERBrec1.persons  := [5];
                VERBrec1.number   := plural
         A1: VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := ovt

decomp:
         C1:  (VERBrec1.conjclasses * [1,2] <> []) and
              (VERBrec1.tijd = ovt)
           C2:  VERBrec1.number = singular
             C3:  (1 in VERBrec1.persons) or (2 in VERBrec1.persons) or
                  (3 in VERBrec1.persons) or (4 in VERBrec1.persons)
             A3:  SFCATrec1.key  := SFKIrrovtenk
             C3:  5 in VERBrec1.persons 
             A3:  SFCATrec1.key  := SFKIrrovt5
           A2:  @
           C2:  VERBrec1.number = plural
             C3:  (1 in VERBrec1.persons) or (2 in VERBrec1.persons) or
                  (3 in VERBrec1.persons)
             A3:  SFCATrec1.key  := SFKIrrovtmv
             C3:  4 in VERBrec1.persons 
             A3:  SFCATrec1.key  := SFKIrrovtenk
             C3:  5 in VERBrec1.persons 
             A3:  SFCATrec1.key  := SFKIrrovt5
           A2:  @
         A1:  @
&
$NP
$CH 4.1.2.3,Rules for other forms
Rule for past participles with "ge"-prefix

%VerbZorVd1 

m1:   SUBVERB{SUBVERBrec1}
m2:   PFCAT{PFCATrec1}
m3:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:  (Verbrec1.conjclasses * [1,2] <> []) and
             (PFCATrec1.key = PFKge) and
             (SFCATrec1.key = SFKIrrvd)
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := vd;
             VERBrec1.number   := omeganumber;
             VERBrec1.persons  := []

decomp:
         C:  (VERBrec1.conjclasses * [1,2] <> []) and 
             (VERBrec1.tijd = vd) 
         A:  PFCATrec1.key     := PFKge;
             SFCATrec1.key     := SFKIrrvd
&
$NP
Rule for past participles without "ge"-prefix

%VerbZorVd2 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:  (Verbrec1.conjclasses * [1,2] <> []) and 
             (SFCATrec1.key = SFKIrrvd)
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := vd;
             VERBrec1.number   := omeganumber;
             VERBrec1.persons  := []

decomp:
         C:  (VERBrec1.conjclasses * [1,2] <> []) and
             (VERBrec1.tijd = vd) 
         A:  SFCATrec1.key     := SFKIrrvd
&
$NP
Rule for infinitive

%VerbZorInf 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:  (SUBVERBrec1.conjclasses * [1,2] <> []) and 
             (SFCATrec1.key = SFKIrrottmv)
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := inf;
             VERBrec1.number   := omeganumber;
             VERBrec1.persons  := []

decomp:
         C:  (VERBrec1.conjclasses * [1,2] <> []) and
             (VERBrec1.tijd = inf) 
         A:  SFCATrec1.key     := SFKen
&
$NP
Rule for present participle

%VerbZorTd

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m3:   SFCAT{SFCATrec2}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:   (SUBVERBrec1.conjclasses * [1,2] <> []) and 
              (SFCATrec1.key = SFKIrrottmv) and
              (SFCATrec2.key = SFKdt)
         A:   VERBrec1          := copysubverbtoverb(SUBVERBrec1);
              VERBrec1.number   := omeganumber;
              VERBrec1.persons  := []

decomp:
         C:   VERBrec1.conjclasses * [1,2] <> []
         A:   SFCATrec1.key := SFKen;
              SFCATrec2.key := SFKdt
&
$NP
Rule for imperative singular

%VerbZorGbEnk 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:  (SUBVERBrec1.conjclasses * [1,2] <> []) and 
             (SFCATrec1.key = SFKIrrgb)
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := gb;
             VERBrec1.number   := singular;
             VERBrec1.persons  := []

decomp:
         C:  (VERBrec1.conjclasses * [1,2] <> []) and
             (VERBrec1.tijd   = gb) and
             (VERBrec1.number = singular)
         A:  SFCATrec1.key    := SFKIrrgb
&
$NP
Rule for imperative plural

%VerbZorGbMv 

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m3:   SFCAT{SFCATrec2}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C:  (SUBVERBrec1.conjclasses * [1,2] <> []) and
             (SFCATrec1.key = SFKIrrgb) and
             (SFCATrec2.key = SFKt)
         A:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
             VERBrec1.tijd     := gb;
             VERBrec1.number   := singular;
             VERBrec1.persons  := []

decomp:
         C:  (VERBrec1.conjclasses * [1,2] <> []) and
             (VERBrec1.tijd   = gb) and
             (VERBrec1.number = plural)
         A:  SFCATrec1.key     := SFKIrrgb;
             SFCATrec1.key     := SFKt
&
$NP
Rule for conjunctive

Note: only the verb "zijn" has a past conjunctive form: "ware". 

%VerbZorConjunctief

m1:   SUBVERB{SUBVERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} [head/ SUBVERB{SUBVERBrec1}]

comp:
         C1:  SUBVERBrec1.conjclasses * [1,2] <> []
           C2:  SFCATrec1.key = SFKIrrconjott
           A2:  VERBrec1.tijd := conjunctiefott
           C2:  SFCATrec1.key = SFKIrrconjovt
           A2:  VERBrec1.tijd := conjunctiefovt
         A1:  VERBrec1          := copysubverbtoverb(SUBVERBrec1);
              VERBrec1.number   := omeganumber;
              VERBrec1.persons  := []

decomp:
         C1:  VERBrec1.conjclasses * [1,2] <> []
           C2:  VERBrec1.tijd = conjunctiefott
           A2:  SFCATrec1.key := SFKIrrconjott
           C2:  VERBrec1.tijd = conjunctiefovt
           A2:  SFCATrec1.key := SFKIrrconjovt
         A1:  @
&
$NP
$CH 4.1.3,Rule for the "-e" and  "-en" form of past and present participle.

Note: this is the only rule that makes a VERB out of another VERB; the only
attribute that changes is "eORenForm".
Because this rule is of the type 'CAT'-to-'CAT'-type and because it should never
be applied more than once, some measures have
been taken to prevent looping or unnecessarily trying to apply the rule again:
in the 'comp'-part, there is an explicit test on the input: 
'SFCATrec1.eORenForm = NoForm' (see: C1); in the 'decomp'-part, there is an 
explicit assignment when the rule succeeds: 'VERBrec1.eORenForm := NoForm'
(see: A1).

%VerbeORenvorm

m1:   VERB{VERBrec1}
m2:   SFCAT{SFCATrec1}
m:    VERB{VERBrec1} 

comp:
         C1:  ((VERBrec1.tijd = vd) or (VERBrec1.tijd = td)) and 
                                   (VERBrec1.eORenForm = NoForm)
           C2:  (SFCATrec1.key = SFKe)
           A2:  VERBrec1.eORenForm  := eForm
           C2:  (SFCATrec1.key = SFKen)
           A2:  VERBrec1.eORenForm  := enForm
         A1:  @

decomp:
         C1:  (VERBrec1.tijd = vd) or (VERBrec1.tijd = td)
           C2:  VERBrec1.eORenForm = eForm
           A2:  SFCATrec1.key := SFKe
           C2:  VERBrec1.eORenForm = enForm
           A2:  SFCATrec1.key := SFKen
         A1:  VERBrec1.eORenForm := NoForm
&
$NP
$CH 4.2,Lextree rules for nouns

Rule for BNOUN --> SUBNOUN 

%bnountosub

m1:   BNOUN{BNOUNrec1}
m:    SUBNOUN{SUBNOUNrec1} [head/ BNOUN{BNOUNrec1}]

comp:    
         C:   true
         A:   SUBNOUNrec1       := copybnountosubnoun(BNOUNrec1)

decomp:  
         C:   true
         A:   @
&
$NP
$CH 4.2.1,Rule for the singular of nouns

Note: in case that the noun has pluralform only ("hersenen"), this rule 
      assigns the value "plural"!

%nounenkelvoud

m1:   SUBNOUN{SUBNOUNrec1}
m:    NOUN{NOUNrec1} [head/ SUBNOUN{SUBNOUNrec1}]

comp:    
         C1:  true
           C2:  not(OnlyPlural in SUBNOUNrec1.pluralforms)
           A2:  NOUNrec1.number := singular
           C2:  OnlyPlural in SUBNOUNrec1.pluralforms
           A2:  NOUNrec1.number := plural
         A1:  NOUNrec1            := copysubnountonoun(SUBNOUNrec1);
              NOUNrec1.genitive   := false

decomp:  
         C1:  (NOUNrec1.genitive = false) 
           C2:  (NOUNrec1.number = singular) and
                (not(OnlyPlural in NOUNrec1.pluralforms))
           A2:  @
           C2:  (NOUNrec1.number = plural) and
                (OnlyPlural in NOUNrec1.pluralforms)
           A2:  @
         A1:   @
&
$NP
$CH 4.2.2,Rule for the plural form of nouns

%nounmeervoud

m1:   SUBNOUN{SUBNOUNrec1}
m2:   SFCAT{SFCATrec1}
m:    NOUN{NOUNrec1} [head/ SUBNOUN{SUBNOUNrec1}]

comp:    
         C1:  (not(OnlyPlural in SUBNOUNrec1.pluralforms)) and 
              (not(NoPlural in SUBNOUNrec1.pluralforms)) 
           C2:  (SFCATrec1.key = SFKen) and 
                                          (enPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKmvs) and 
                                           (sPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKaTOaa) and 
                                       (aTOaaPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKaTOee) and 
                                       (aTOeePlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKeTOee) and 
                                       (eTOeePlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKeiTOee) and 
                                      (eiTOeePlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKiTOee) and 
                                       (iTOeePlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKoTOoo) and 
                                       (oTOooPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKeren) and 
                                        (erenPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKien) and 
                                         (ienPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKden) and 
                                         (denPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKnen) and
                                         (nenPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKieAccent) and 
                                    (ieAccentPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKlui) and
                                         (luiPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKlieden) and 
                                      (liedenPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKLat) and 
                                         (LatPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKenIrreg) and 
                                     (enIrregPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKsIrreg) and 
                                      (sIrregPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKLatIrreg) and 
                                    (LatIrregPlural in SUBNOUNrec1.pluralforms)
           A2:  @
         A1:  NOUNrec1            := copysubnountonoun(SUBNOUNrec1);
              NOUNrec1.number     := plural;
              NOUNrec1.genitive   := false

decomp:  
         C1:   (NOUNrec1.number   = plural) and
               (NOUNrec1.genitive = false) and
               (not(OnlyPlural in NOUNrec1.pluralforms))
           C2:  enPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKen
           C2:  sPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKmvs
           C2:  aTOaaPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKaTOaa
           C2:  aTOeePlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKaTOee
           C2:  eTOeePlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKeTOee
           C2:  eiTOeePlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKeiTOee
           C2:  iTOeePlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKiTOee
           C2:  oTOooPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKoTOoo
           C2:  erenPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKeren
           C2:  ienPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKien
           C2:  denPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKden
           C2:  nenPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKnen
           C2:  ieAccentPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKieAccent
           C2:  luiPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKlui
           C2:  liedenPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKlieden
           C2:  LatPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKLat
           C2:  enIrregPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKenIrreg
           C2:  sIrregPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKsIrreg
           C2:  LatIrregPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKLatIrreg
         A1:   @
&
$NP
$CH 4.2.3,Rules for Genitive forms.
$CH 4.2.3.1,Rule for genitive of singular nouns.

Note: ANS says that (besides rigid constructions like "heer des huizes") 
      genitive forms can only be made out of proper names and a certain kind of
      nouns, namely the ones that can be used accost somebody, like: "vader",
      "moeder", "dominee", "buurman", "ouder"(?). In the grammatical Compendium
      of Van Dale, the main criterium to decide whether or not a noun can get 
      a genitive-s is family-relation.
      Also diminutives can cat genitive-s: "mijn zoontjes fiets", etc.
      
%noungenitiefenkelvoud

m1:   SUBNOUN{SUBNOUNrec1}
m2:   SFCAT{SFCATrec1}
m:    NOUN{NOUNrec1} [head/ SUBNOUN{SUBNOUNrec1}]


comp:    
         C:   (SFCATrec1.key = SFKgens) and
              (not(OnlyPlural in SUBNOUNrec1.pluralforms))
         A:   NOUNrec1            := copysubnountonoun(SUBNOUNrec1);
              NOUNrec1.number     := singular;
              NOUNrec1.genitive   := true

decomp:  
         C:  (NOUNrec1.number   = singular) and
             (NOUNrec1.genitive = true) and
             (not(OnlyPlural in NOUNrec1.pluralforms))
         A:  SFCATrec1.key := SFKgens
&
$NP
$CH 4.2.3.2,Rule for genitive of plural forms.

Note: because only a (very) limited number of nouns can get genitive-s, not
      every plural-ending will be possible; in fact, the only plural-ending
      here seems to be "-s": "grootouders' huis", "mijn zoontjes' fietsen",
      etc. Therefore, this rule accepts "sPlural" and "sIrregPlural" ("mijn
      _eegaas'_ namen verschilden") only.
      
%noungenitiefmeervoud

m1:   SUBNOUN{SUBNOUNrec1}
m2:   SFCAT{SFCATrec1}
m3:   SFCAT{SFCATrec2}
m:    NOUN{NOUNrec1} [head/ SUBNOUN{SUBNOUNrec1}]

comp:    
         C1:  SFCATrec2.key = sfkgens
           C2:  (SFCATrec1.key = SFKmvs) and 
                                           (sPlural in SUBNOUNrec1.pluralforms)
           A2:  @
           C2:  (SFCATrec1.key = SFKsIrreg) and 
                                      (sIrregPlural in SUBNOUNrec1.pluralforms)
           A2:  @
         A1:  NOUNrec1            := copysubnountonoun(SUBNOUNrec1);
              NOUNrec1.number     := plural;
              NOUNrec1.genitive   := true

decomp:  
         C1:  (NOUNrec1.number  = plural) and (NOUNrec1.genitive = true)
           C2:  sIrregPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKsIrreg
           C2:  sPlural in NOUNrec1.pluralforms
           A2:  SFCATrec1.key := SFKmvs
         A1:  SFCATrec2.key := SFKgens
&
$NP
$CH 4.3,Lextree rules for adjectives
$CH 4.3.1,Rule for adjectives without derivational affixes:

%adjbtosub

m1:   BADJ{BADJrec1}
m:    SUBADJ{SUBADJrec1} [head/ BADJ{BADJrec1}]

comp:    
         C:   true
         A:   SUBADJrec1 := copybadjtosubadj(BADJrec1)

decomp:  
         C:   true
         A:   @
&
$NP
$CH 4.3.2,Rule for the positive form of adjectives

%adjposvorm

m1:   SUBADJ{SUBADJrec1}
m:    ADJ{ADJrec1} [head/ SUBADJ{SUBADJrec1}]

comp:    
         C:   true
         A:   ADJrec1           := copysubadjtoadj(SUBADJrec1);
              ADJrec1.form      := positive;
              ADJrec1.eORenForm := NoForm

decomp:  
         C:   (ADJrec1.eORenForm = NoForm) and
              (ADJrec1.form      = positive)
         A:   @
&
$NP
$CH 4.3.3,Rule for the "-s"-form of the positive of adjectives

%adjsPositive

m1:   SUBADJ{SUBADJrec1}
m2:   SFCAT{SFCATrec1}
m:    ADJ{ADJrec1} [head/ SUBADJ{SUBADJrec1}]

comp:    
         C:   (SFCATrec1.key = SFKs)
         A:   ADJrec1           := copysubadjtoadj(SUBADJrec1);
              ADJrec1.form      := sPositive;
              ADJrec1.eORenForm := NoForm

decomp:  
         C:   (ADJrec1.form      = sPositive) and
              (ADJrec1.eORenForm = NoForm)
         A:   SFCATrec1.key := SFKs
&
$NP
$CH 4.3.4,Rule for the comparative of adjectives

%adjcompvorm

m1:   SUBADJ{SUBADJrec1}
m2:   SFCAT{SFCATrec1}
m:    ADJ{ADJrec1} [head/ SUBADJ{SUBADJrec1}]

comp:    
         C1: true
           C2: (SFCATrec1.key = SFKer) and (erComp in SUBADJrec1.comparatives)
           A2: @
           C2: (SFCATrec1.key = SFKonreger) and 
                                      (erIrregComp in SUBADJrec1.comparatives)
           A2: @
         A1:  ADJrec1           := copysubadjtoadj(SUBADJrec1);
              ADJrec1.form      := comparative;
              ADJrec1.eORenForm := NoForm

decomp:  
         C1: (ADJrec1.form  = comparative) and (ADJrec1.eORenForm = NoForm)
           C2:  (erComp in ADJrec1.comparatives)
           A2:  SFCATrec1.key := SFKer
           C2:  (erIrregComp in ADJrec1.comparatives)
           A2:  SFCATrec1.key := SFKonreger
         A1:   @
&
$NP
$CH 4.3.5,Rule for "-s"-form of comparatives

%adjsComparative

m1:   SUBADJ{SUBADJrec1}
m2:   SFCAT{SFCATrec1}
m3:   SFCAT{SFCATrec2}
m:    ADJ{ADJrec1} [head/ SUBADJ{SUBADJrec1}]

comp:    
         C1: SFCATrec2.key = SFKs
           C2: (SFCATrec1.key = SFKer) and (erComp in ADJrec1.comparatives)
           A2: @
           C2: (SFCATrec1.key = SFKonreger) and 
                                      (erIrregComp in ADJrec1.comparatives)
           A2: @
         A1: ADJrec1           := copysubadjtoadj(SUBADJrec1);
             ADJrec1.form      := sComparative;
             ADJrec1.eORenForm := NoForm

decomp:  
         C1:  (ADJrec1.form = sComparative) and (ADJrec1.eORenForm = NoForm)
           C2:  (erComp in ADJrec1.comparatives)
           A2:  SFCATrec1.key := SFKer
           C2:  (erIrregComp in ADJrec1.comparatives)
           A2:  SFCATrec1.key := SFKonreger
         A1:  SFCATrec2.key := SFKs
&
$NP
$CH 4.3.6,Rule for the superlative of adjectives

%adjsupvorm

m1:   SUBADJ{SUBADJrec1}
m2:   SFCAT{SFCATrec1}
m:    ADJ{ADJrec1} [head/ SUBADJ{SUBADJrec1}]

comp:    
         C1: true
           C2: (SFCATrec1.key = SFKst) and (stSup in ADJrec1.superlatives)
           A2: @
           C2: (SFCATrec1.key = SFKonregst) and 
                                      (stIrregSup in ADJrec1.superlatives)
           A2: @
         A:  ADJrec1           := copysubadjtoadj(SUBADJrec1);
             ADJrec1.form      := superlative;
             ADJrec1.eORenForm := NoForm

decomp:  
        C1: (ADJrec1.form = superlative) and (ADJrec1.eORenForm = NoForm)
          C2:  stSup in ADJrec1.superlatives
          A2:  SFCATrec1.key := SFKst
          C2:  stIrregSup in ADJrec1.superlatives
          A2:  SFCATrec1.key := SFKonregst
        A1:  @
&
$NP
$CH 4.3.7,Rule for the "aller"-superlative of adjectives

%adjallersupvorm

m1:   SUBADJ{SUBADJrec1}
m2:   PFCAT{PFCATrec1}
m3:   SFCAT{SFCATrec1}
m:    ADJ{ADJrec1} [head/ SUBADJ{SUBADJrec1}]


comp:    
         C1: (PFCATrec1.key   = PFKaller) 
           C2: (SFCATrec1.key = SFKst) and (allerSup in ADJrec1.superlatives)
           A2: @
           C2: (SFCATrec1.key = SFKonregst) and 
                                      (allerIrregSup in ADJrec1.superlatives)
           A2: @
         A: ADJrec1           := copysubadjtoadj(SUBADJrec1);
            ADJrec1.form      := allerSuperlative;
            ADJrec1.eORenForm := NoForm

decomp:  
         C1:  (ADJrec1.form = allerSuperlative) and (ADJrec1.eORenForm = NoForm)
           C2:  (allerSup in ADJrec1.superlatives)
           A2:  SFCATrec1.key := SFKst
           C2:  (allerIrregSup in ADJrec1.superlatives)
           A2:  SFCATrec1.key := SFKonregst
         A1:  PFCATrec1.key := PFKaller
&
$NP
$CH 4.3.8,RULE for the "-e"-form and "-en"-form of ADJ's

Note: attributively used adjectives can get "-e"; nominalised adjectives can get
      "-e" or "-en". The inherent attribute "use" tells us whether or not 
      adjectives can be used attributively or nominalised.

%adjeORenform

m1:   ADJ{ADJrec1}
m2:   SFCAT{SFCATrec1}
m:    ADJ{ADJrec1} 

comp:    C1:  ADJrec1.eORenForm = NoForm
           C2:  (ADJrec1.use = attributive) and (SFCATrec1.key = SFKe) 
             C3:  (ADJrec1.eFormation = true)
               C4:  (ADJrec1.form = positive) or (ADJrec1.form = comparative) or
               (ADJrec1.form = superlative) or (ADJrec1.form = allersuperlative)
               A4:  @
             A3:  @
           A2:  ADJrec1.eORenForm := eForm
           C2:  (ADJrec1.use = nominalised) and (SFCATrec1.key = SFKe) 
             C3:  (ADJrec1.eNominalised = true)
               C4:  (ADJrec1.form = positive) or (ADJrec1.form = comparative) or
               (ADJrec1.form = superlative) or (ADJrec1.form = allersuperlative)
               A4:  @
             A3:  @
           A2:  ADJrec1.eORenForm := eForm
           C2:  (ADJrec1.use = nominalised) and (SFCATrec1.key = SFKen) 
             C3:  (ADJrec1.eNominalised = true)
               C4:  (ADJrec1.form = positive) or (ADJrec1.form = comparative) or
               (ADJrec1.form = superlative) or (ADJrec1.form = allersuperlative)
               A4:  @
             A3:  @
           A2:  ADJrec1.eORenForm := enForm
         A1:  @

decomp:  

         C1: (ADJrec1.use = attributive) and (ADJrec1.eORenForm = eForm) 
           C2: (ADJrec1.eFormation = true) 
             C3: (ADJrec1.form = positive) or (ADJrec1.form = comparative) or
               (ADJrec1.form = superlative) or (ADJrec1.form = allersuperlative)
             A3: @
           A2: @
         A1: SFCATrec1.key := SFKe;
             ADJrec1.eORenForm := NoForm
         C1: (ADJrec1.use = nominalised) and (ADJrec1.eORenForm = eForm) 
           C2: ADJrec1.eNominalised = true
             C3: (ADJrec1.form = positive) or (ADJrec1.form = comparative) or
               (ADJrec1.form = superlative) or (ADJrec1.form = allersuperlative)
             A3: @
           A2: @
         A1: SFCATrec1.key := SFKe;
             ADJrec1.eORenForm := NoForm
         C1: (ADJrec1.use = nominalised) and (ADJrec1.eORenForm = enForm) 
           C2: (ADJrec1.eNominalised = true)
             C3: (ADJrec1.form = positive) or (ADJrec1.form = comparative) or
               (ADJrec1.form = superlative) or (ADJrec1.form = allersuperlative)
             A3: @
           A2: @
         A1: SFCATrec1.key := SFKen;
             ADJrec1.eORenForm := NoForm
&
$NP
$CH 4.4, Rules for adverbs
$CH 4.4.1,Rule for adverbs without derivational affixes

%badvtosubadv

m1:   BADV{BADVrec1}
m:    SUBADV{SUBADVrec1} [head/ BADV{BADVrec1}]

comp:    
         C: true
         A: SUBADVrec1 := copybadvtosubadv(BADVrec1)

decomp:  
         C: true
         A: @
&
$NP
$CH 4.4.2,Rule for positive form of adverbs

%advposvorm

m1:   SUBADV{SUBADVrec1}
m:    ADV{ADVrec1} [head/ SUBADV{SUBADVrec1}]

comp:     
         C:   true
         A:   ADVrec1       := copysubadvtoadv(SUBADVrec1);
              ADVrec1.form  := positive

decomp:  
         C:   ADVrec1.form  = positive
         A:   @
&
$NP
$CH 4.4.3,Rule for comparative forms of adverbs

%advcompvorm

m1:   SUBADV{SUBADVrec1}
m2:   SFCAT{SFCATrec1}
m:    ADV{ADVrec1} [head/ SUBADV{SUBADVrec1}]

comp:    
         C1: true  
           C2: (SFCATrec1.key = SFKer) and (erComp in SUBADVrec1.comparatives)
           A2: @
           C2: (SFCATrec1.key = SFKonreger) and 
                                      (erIrregComp in SUBADVrec1.comparatives) 
           A2: @  
         A1:   ADVrec1       := copysubadvtoadv(SUBADVrec1);
               ADVrec1.form  := comparative

decomp:  
         C1:  ADVrec1.form = comparative
           C2:  erComp in ADVrec1.comparatives
           A2:  SFCATrec1.key := SFKer
           C2:  erIrregComp in ADVrec1.comparatives
           A2:  SFCATrec1.key := SFKonreger
         A1:   @
&
$NP
$CH 4.4.4,Rule for superlatives of adverbs:

%advsupvorm

m1:   SUBADV{SUBADVrec1}
m2:   SFCAT{SFCATrec1}
m:    ADV{ADVrec1} [head/ SUBADV{SUBADVrec1}]

comp:    
         C1: true
           C2: (SFCATrec1.key = SFKst) and (stSup in ADVrec1.superlatives)
           A2: @
           C2: (SFCATrec1.key = SFKonregst) and 
                                        (stIrregSup in ADVrec1.superlatives)
           A2: @
         A1: ADVrec1       := copysubadvtoadv(SUBADVrec1);
             ADVrec1.form  := superlative

decomp:  
        C1: ADVrec1.form = superlative
           C2:  stSup in ADVrec1.superlatives
           A2:  SFCATrec1.key := SFKst
           C2:  stIrregSup in ADVrec1.superlatives
           A2:  SFCATrec1.key := SFKonregst
         A:  @
&
$NP
$CH 4.4.5,Rule for the "aller"-superlative of adverbs

%advallersupvorm

m1:   SUBADV{SUBADVrec1}
m2:   PFCAT{PFCATrec1}
m3:   SFCAT{SFCATrec1}
m:    ADV{ADVrec1} [head/ SUBADV{SUBADVrec1}]

comp:    
         C1: PFCATrec1.key = PFKaller
           C2: (SFCATrec1.key = SFKst) and (allerSup in ADVrec1.superlatives)
           A2: @
           C2: (SFCATrec1.key = SFKonregst) and 
                                     (allerIrregSup in ADVrec1.superlatives)
           A2: @
         A1: ADVrec1       := copysubadvtoadv(SUBADVrec1);
             ADVrec1.form  := allersuperlative

decomp:  
         C1:  ADVrec1.form = allersuperlative
           C2:  allerSup in ADVrec1.superlatives
           A2:  SFCATrec1.key := SFKst
           C2:  allerIrregSup in ADVrec1.superlatives
           A2:  SFCATrec1.key := SFKonregst
         A1:  PFCATrec1.key := PFKaller
&
$NP
$CH 4.5,Lextree rules for pronouns
$CH 4.5.1,Rule for nominative forms of PERSPRO's

Note: this rule makes the "dictionary"-forms, like "ik", "jij", etc., which are
      always nominative _and_ never reduced.

%Perspro1

m1:   BPERSPRO{BPERSPROrec1}
m:    PERSPRO{PERSPROrec1} [head/ BPERSPRO{BPERSPROrec1}]

comp:    
         C:   true
         A:   PERSPROrec1            := copybpersprotoperspro(BPERSPROrec1);
              PERSPROrec1.reduced    := false;
              PERSPROrec1.cases      := nominative

decomp:  
         C:   (PERSPROrec1.cases      = nominative) and
              (PERSPROrec1.reduced    = false)
         A:   @
&
$NP
$CH 4.5.2,Rule for nominative, dative and accusative forms of PERSPRO's

Note: this rule makes derived forms like "mij", "jou", "hem", etc.; forms can
      be nominative, or dative, or accusative. For all cases, reduced forms, 
      like "me" are made too.

%Perspro2

m1:   BPERSPRO{BPERSPROrec1}
m2:   SFCAT{SFCATrec1}
m:    PERSPRO{PERSPROrec1} [head/ BPERSPRO{BPERSPROrec1}]

comp:    
         C1:  true
           C2:   BPERSPROrec1.number = singular
             C3:   SFCATrec1.key = SFKsgnom
             A3:   PERSPROrec1.cases      := nominative;
                   PERSPROrec1.reduced    := false
             C3:   SFCATrec1.key = SFKsgnomred
             A3:   PERSPROrec1.cases      := nominative;
                   PERSPROrec1.reduced    := true
             C3:   SFCATrec1.key = SFKsgacc
             A3:   PERSPROrec1.cases      := accusative;
                   PERSPROrec1.reduced    := false
             C3:   SFCATrec1.key = SFKsgaccred
             A3:   PERSPROrec1.cases      := accusative;
                   PERSPROrec1.reduced    := true
             C3:   SFCATrec1.key = SFKsgdat
             A3:   PERSPROrec1.cases      := dative;
                   PERSPROrec1.reduced    := false
             C3:   SFCATrec1.key = SFKsgdatred
             A3:   PERSPROrec1.cases      := dative;
                   PERSPROrec1.reduced    := true
           A2:   @
           C2:   BPERSPROrec1.number = plural
             C3:   SFCATrec1.key = SFKplnom
             A3:   PERSPROrec1.cases      := nominative;
                   PERSPROrec1.reduced    := false
             C3:   SFCATrec1.key = SFKplnomred
             A3:   PERSPROrec1.cases      := nominative;
                   PERSPROrec1.reduced    := true
             C3:   SFCATrec1.key = SFKplacc
             A3:   PERSPROrec1.cases      := accusative;
                   PERSPROrec1.reduced    := false
             C3:   SFCATrec1.key = SFKplaccred
             A3:   PERSPROrec1.cases      := accusative;
                   PERSPROrec1.reduced    := true
             C3:   SFCATrec1.key = SFKpldat
             A3:   PERSPROrec1.cases      := dative;
                   PERSPROrec1.reduced    := false
             C3:   SFCATrec1.key = SFKpldatred
             A3:   PERSPROrec1.cases      := dative;
                   PERSPROrec1.reduced    := true
           A2:   @
         A1:  PERSPROrec1  := copybpersprotoperspro(BPERSPROrec1)


decomp:  
         C1:   PERSPROrec1.number = singular
           C2:   (PERSPROrec1.cases = nominative) and
                 (PERSPROrec1.reduced = false)
           A2:   SFCATrec1.key := SFKsgnom
           C2:   (PERSPROrec1.cases = nominative) and
                 (PERSPROrec1.reduced = true)
           A2:   SFCATrec1.key := SFKsgnomred
           C2:   (PERSPROrec1.cases = accusative) and
                 (PERSPROrec1.reduced = false)
           A2:   SFCATrec1.key := SFKsgacc
           C2:   (PERSPROrec1.cases = accusative) and
                 (PERSPROrec1.reduced = true)
           A2:   SFCATrec1.key := SFKsgaccred
           C2:   (PERSPROrec1.cases = dative) and
                 (PERSPROrec1.reduced = false)
           A2:   SFCATrec1.key := SFKsgdat
           C2:   (PERSPROrec1.cases = dative) and
                 (PERSPROrec1.reduced = true)
           A2:   SFCATrec1.key := SFKsgdatred
         A1:  @
         C1:   PERSPROrec1.number = plural
           C2:   (PERSPROrec1.cases = nominative) and
                 (PERSPROrec1.reduced = false)
           A2:   SFCATrec1.key := SFKplnom
           C2:   (PERSPROrec1.cases = nominative) and
                 (PERSPROrec1.reduced = true)
           A2:   SFCATrec1.key := SFKplnomred
           C2:   (PERSPROrec1.cases = accusative) and
                 (PERSPROrec1.reduced = false)
           A2:   SFCATrec1.key := SFKplacc
           C2:   (PERSPROrec1.cases = accusative) and
                 (PERSPROrec1.reduced = true)
           A2:   SFCATrec1.key := SFKplaccred
           C2:   (PERSPROrec1.cases = dative) and
                 (PERSPROrec1.reduced = false)
           A2:   SFCATrec1.key := SFKpldat
           C2:   (PERSPROrec1.cases = dative) and
                 (PERSPROrec1.reduced = true)
           A2:   SFCATrec1.key := SFKpldatred
         A1:  @
&
$NP
$CH 4.5.3,Rule for POSSADJ's

Note: this rule makes -generatively speaking- POSSADJ's (like "mijn", "jouw", 
      "uw", etc.) out of BPERSPRO's. Reduced forms (like "m'n") are made too.
      The attribute 'eForm' has value 'false', except "onze", that has 'true'.
      The attribute 'genitive' is 'true' for genitive forms like: "mijner", 
      "jouwer", etc.

%PersproToPossadj

m1:   BPERSPRO{BPERSPROrec1}
m2:   SFCAT{SFCATrec1}
m:    POSSADJ{POSSADJrec1} [head/ BPERSPRO{BPERSPROrec1}]

comp:    
         C1:   true
           C2:   BPERSPROrec1.number = singular
             C3:   SFCATrec1.key = SFKsgpossadj
             A3:   POSSADJrec1.eForm      := false;
                   POSSADJrec1.reduced    := false;
                   POSSADJrec1.genitive   := false
             C3:   SFCATrec1.key = SFKsgpossadjred
             A3:   POSSADJrec1.eForm      := false;
                   POSSADJrec1.reduced    := true;
                   POSSADJrec1.genitive   := false
             C3:   SFCATrec1.key = SFKsgpossadjgen
             A3:   POSSADJrec1.eForm      := false;
                   POSSADJrec1.reduced    := false;
                   POSSADJrec1.genitive   := true
           A2:   @
           C2:   BPERSPROrec1.number = plural
             C3:   SFCATrec1.key = SFKplpossadj
             A3:   POSSADJrec1.eForm      := false;
                   POSSADJrec1.reduced    := false;
                   POSSADJrec1.genitive   := false
             C3:   SFCATrec1.key = SFKplpossadjonze
             A3:   POSSADJrec1.eForm      := true;
                   POSSADJrec1.reduced    := false;
                   POSSADJrec1.genitive   := false
             C3:   SFCATrec1.key = SFKplpossadjgen
             A3:   POSSADJrec1.eForm      := false;
                   POSSADJrec1.reduced    := false;
                   POSSADJrec1.genitive   := true
           A2:   @
         A1:  POSSADJrec1.mood        := declaratief

decomp:  
         C1:   POSSADJrec1.mood = declaratief
           C2:   BPERSPROrec1.number = singular
             C3:   (POSSADJrec1.eForm     = false) and
                   (POSSADJrec1.reduced   = false) and
                   (POSSADJrec1.genitive  = false) 
             A3:   SFCATrec1.key := SFKsgpossadj
             C3:   (POSSADJrec1.eForm     = false) and
                   (POSSADJrec1.reduced   = true ) and
                   (POSSADJrec1.genitive  = false) 
             A3:   SFCATrec1.key := SFKsgpossadjred
             C3:   (POSSADJrec1.eForm     = false) and
                   (POSSADJrec1.reduced   = false) and
                   (POSSADJrec1.genitive  = true) 
             A3:   SFCATrec1.key := SFKsgpossadjgen
           A2:   @
           C2:   BPERSPROrec1.number = plural
             C3:   (POSSADJrec1.eForm     = false) and
                   (POSSADJrec1.reduced   = false) and
                   (POSSADJrec1.genitive  = false) 
             A3:   SFCATrec1.key := SFKplpossadj
             C3:   (POSSADJrec1.eForm     = true ) and
                   (POSSADJrec1.reduced   = false) and
                   (POSSADJrec1.genitive  = false) 
             A3:   SFCATrec1.key := SFKplpossadjonze
             C3:   (POSSADJrec1.eForm     = false) and
                   (POSSADJrec1.reduced   = false) and
                   (POSSADJrec1.genitive  = true ) 
             A3:   SFCATrec1.key := SFKplpossadjgen
           A2:   @
         A1:   @
&
$NP
$CH 4.5.4,Rule for POSSPRO's  

Note: this rule makes POSSPRO's, like: "mijne", "jouwe", etc. out of BPERSPRO's.
      There is no POSSPRO form corresponding to "jullie"!

%PersproToPosspro

m1:   BPERSPRO{BPERSPROrec1}
m2:   SFCAT{SFCATrec1}
m:    POSSPRO{POSSPROrec1} [head/ BPERSPRO{BPERSPROrec1}]

comp:    
         C1:   true
           C2:   BPERSPROrec1.number = singular
             C3:   SFCATrec1.key = SFKsgposs
             A3:   POSSPROrec1.nForm      := false
             C3:   SFCATrec1.key = SFKsgpossnvorm
             A3:   POSSPROrec1.nForm      := true
           A2:   @
           C2:   BPERSPROrec1.number = plural
             C3:   SFCATrec1.key = SFKplposs
             A3:   POSSPROrec1.nForm      := false
             C3:   SFCATrec1.key = SFKplpossnvorm
             A3:   POSSPROrec1.nForm      := true
           A2:   @
         A1:  @

decomp:  
         C1:   BPERSPROrec1.number = singular
           C2:   POSSPROrec1.nForm = false
           A2:   SFCATrec1.key := SFKsgposs
           C2:   POSSPROrec1.nForm = true
           A2:   SFCATrec1.key := SFKsgpossnvorm
         A1:   @
         C1:   BPERSPROrec1.number = plural
           C2:   POSSPROrec1.nForm = false
           A2:   SFCATrec1.key := SFKplposs
           C2:   POSSPROrec1.nForm = false
           A2:   SFCATrec1.key := SFKplpossnvorm
         A1:   @
&
$NP
$CH 4.5.5,Rule for POSSADJ's out of BWHPRO

Note: this rule makes "wiens" and "wier" out of "wie".

%BwhproToPossadj

m1:   BWHPRO{BWHPROrec1}
m2:   SFCAT{SFCATrec1}
m:    POSSADJ{POSSADJrec1} [head/ BWHPRO{BWHPROrec1}]

comp:    
         C1:  true
           C2:  BWHPROrec1.number = singular
             C3:   (SFCATrec1.key = SFKpossadjwiens) and
                   (BWHPROrec1.natgeslachten = [mannelijk])
             A3:   @
             C3:   (SFCATrec1.key = SFKpossadjwier) and
                    (BWHPROrec1.natgeslachten = [vrouwelijk])
             A3:  @
           A2:  @
           C2:  BWHPROrec1.number = plural
             C3:   (SFCATrec1.key = SFKpossadjwier) and
                   (BWHPROrec1.natgeslachten = [])
             A3:  @
           A2:  @
         A1:  POSSADJrec1.mood         := wh;
              POSSADJrec1.reduced      := false;
              POSSADJrec1.eForm        := true;
              POSSADJrec1.genitive     := false


decomp:  
         C1:  (POSSADJrec1.mood         = wh   ) and
              (POSSADJrec1.reduced      = false) and
              (POSSADJrec1.eForm        = false) and
              (POSSADJrec1.genitive     = false)
           C2:   BWHPROrec1.number = singular
             C3:   BWHPROrec1.natgeslachten = [mannelijk]
             A3:   SFCATrec1.key := SFKpossadjwiens
             C3:   BWHPROrec1.natgeslachten = [vrouwelijk]
             A3:   SFCATrec1.key := SFKpossadjwier
           A2:   @
           C2:   BWHPROrec1.number = singular
             C3:   BWHPROrec1.natgeslachten = []
             A3:   SFCATrec1.key := SFKpossadjwier
           A2:   @
         A1:   @
&
$NP
$CH 4.5.6,Rule for POSSADJ out of BDEMPRO

Note: this rule makes "diens" out of "die".

%BdemproToPossadj

m1:   BDEMPRO{BDEMPROrec1}
m2:   SFCAT{SFCATrec1}
m:    POSSADJ{POSSADJrec1} [head/ BDEMPRO{BDEMPROrec1}]

comp:    
         C:  (SFCATrec1.key = SFKpossadjdiens) and
             (BDEMPROrec1.natgeslachten = [mannelijk])
         A:  POSSADJrec1.mood         := declaratief;
             POSSADJrec1.reduced      := false;
             POSSADJrec1.eForm        := false;
             POSSADJrec1.genitive     := false
             

decomp:  
         C:  (POSSADJrec1.mood         = declaratief) and
             (POSSADJrec1.reduced      = false      ) and
             (POSSADJrec1.eForm        = true       ) and
             (POSSADJrec1.genitive     = false      ) and
             (BDEMPROrec1.natgeslachten  = [mannelijk])
         A:  SFCATrec1.key := SFKpossadjdiens
&
