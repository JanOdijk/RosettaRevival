$FL 12
$PL 274,16
$LD 5
$OP SH=U,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC %&
$AC @
$XC ~`
$BC |
   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta3

    ---------------------------------------------------------







         Title        :  On Verbpatterns

         Author       :  Agnes Mijnhout









         Doc.Nr       :  43

         Date         :  85/09/09

         Status       :  informal

         Supersedes   : 

         Distribution :  project

         Clearance    :  project

         Keywords     :  verbpatterns
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Nederlandse Philips Bedrijven B.V.

$ph Rosetta          Doc.nr: 43                      date:85/09/09
$Np 1
$C1 Introduction
$ |||||This informal note is intended as a general discussion of the
notion "verbpattern". In section 2 I will give a brief review of the
content of verbpatterns in Rosetta2 and of the way in which this content
is represented in rules. In section 3 I will outline some arguments with
respect to the sort of information that should be contained in verbpatterns
and briefly indicate some constructions that verbpatterns in Rosetta3 should
be able to handle and which had not yet been incorporated into Rosetta2. I will
also discuss a slightly different way of looking at the notion verbpattern,
splitting it up into several attributes containing syntactic idiosyncratic
information about verbs. In section 4 I indicate how the idiosyncratic 
information of verbs can be spelled out by rules. This note does not contain 
any specific proposals with regard to attributes, attribute-values or rules.$
$C1 Verbpatterns in Rosetta2
$C2 Content of verbpatterns
$ |||||In Rosetta2 one of the attributes of a verb is _vps_ (verbpatterns). Each
verb is assigned a subset of the set of verbpatterns and these verbpatterns
specify, to a certain extent, the structure of the sentences in which the verb
can occur. The verbpatterns contain several kinds of syntactic information.
E.g., the number of realized arguments is specified. The number of semantic 
arguments
is given in a separate attribute ("aantalargs"). Some verbs may, however,
realize less arguments than this maximal number in the final string. The
verbpattern indicates how many arguments are actually realized. The order in
which the arguments appear, the relations of the arguments (subj, obj, etc.)
and the category of the arguments (NP, SUBSENT, etc.) are also taken care of
by the verbpattern. The verbpattern also contains information about the
identity relation between an argument of the main clause and an argument of
a complement sentence. This relates, e.g., to the difference between sentences
such
as _I promised Bill to come_, where _I_ should be interpreted as the subject
of _to come_ and _I persuaded Bill to come_, where _Bill_ should be 
interpreted
as the subject of _to come_. (cf. Jan Landsbergen "M-Syntax for Dutch in 
Rosetta2. 
Definition of the Domain T", doc. nr. 9, pp. 11-17).$
$C2 Representations of verbpattern information in Rosetta2
$ |||||At the moment there is no definition of what a verbpattern is and there
are no principled reasons for including one kind of information while 
excluding
another. The information that is represented in verbpatterns is listed in
2.1 and we will now look at how this information is represented in the 
M-grammar. Verbpatterns are labels which are assigned to verbs in the 
dictionary, 
but it is not easy to see what information these labels convey, because the
verbpatterns are "spelled out" by different M-rules. Two kinds of clause rules
are sensitive to the attribute _vps_: RVP (verbpattern-rules) and RARGSUBST
(argument-substitution rules). The verbpattern-rules specify part of the 
information
of the verbpattern, but not all. The argument-substitution rules
spell out the additional information. In 2.2.1 and 2.2.2 I will indicate which
contribution these two kinds of rules make to the content of the verbpatterns.$
$C3 VP-rules
$ |||||The verbpattern-rules apply to S-trees which contain a verb (with the
relation _head_) and a number of variables with the relation _arg_ 
(argument).
The number of variables can be the same as the number of _aantalargs_,
but it may be less: one or more variables may have been replaced by EMPTY's
through application of the EMPTY-substitution rule. The arguments that are
not replaced by EMPTY's are the realized arguments and the verbpattern 
indicates
the number of realized arguments. For example, if the attribute 
_aantalargs_
of a verb = 2, EMPTY-substitution of one of the arguments may only
take place if the verb has, apart from a verbpattern for two realized 
arguments,
a verbpattern for one realized argument. Note that it is also possible
to substitute an EMPTY for one of the variables that should be a realized
argument according to the verbpattern. This seems a contradiction, but it is
only possible if a later rule that can "absorb" an argument deletes the
EMPTY. Passive is such a rule. In passive contructions it is possible to 
realize one argument less than in related active constructions. So, the
variable "inside" the verbpattern that is replaced by an EMPTY will eventually
not be realized and it is indeed the case that variables that are replaced
by EMPTY's are not realized arguments.$
$ |||||The verbpattern-rules explicitly mention the attribute _vps_ in the
condition (I will always discuss the generative part of the rules and leave
the analysis out of consideration here). The verbpattern-rules delete 
superfluous
EMPTY's (if they are present). They order the elements (verb and 
variables) of the
clause, assigning syntactic relations to them. The order of the elements may
be changed by other rules, such as the argument-subsitution rules.
They also substitute designated elements in places where no arguments can
appear (such as _het_ in subject position of verbs with no arguments:
_regenen_, etc.). The
verbpattern-rules do not spell out (contrary to what their name might suggest)
all the information that is contained in a verbpattern.
It is easy to see this from the fact that the output of some verbpattern-rules
is the same for several verbpatterns. At this point no difference between 
those verbpatterns is made yet. The argument-subsitution
rules take care of the remaining information that is covered by a 
verb-pattern.$
$C3 Argument-substitution rules
$ |||||The argument-substitution rules work on the output of the voice-rules
(which in their turn follow the verbpattern-rules). EMPTY's that are not 
deleted by the verbpattern-rules are deleted by one of the voice-rules. 
The argument-substitution rules can substitute the VAR's for various categories:
NP, OPENADJP, SUBSENT, OPENCOMPLCL and GESLCOMPLCL. However, they can do more
than just substituting arguments for variables. They can change the order of 
elements and change syntactic relations and check identity relations between
variables when substituting. By explicitly excluding verbpatterns from the
application of certain rules and by formulating rules exclusively applicable
to one verbpattern, the information of the verbpatterns that is not yet 
indicated by the verbpattern-rules is now spelled out by argument-substitution
rules. Only after application of both verbpattern-rules and
argument-substitution
rules is the information of the verbpatterns fully spelled out.$
$C1 Information that verbpatterns should contain
$C2 Idiosyncratic information
$ |||||From the above it is clear that verbpatterns contain syntactic 
information.
A verb, as head of the clause in which it appears, places certain
restrictions
on the structure of the clause. These restrictions are, to a certain
extent, not predictable. E.g., whether a verb can be followed by an NP, PP or
S(entence) and whether a possible embedded clause must be infinite or not are
non-predictable, idiosyncratic properties of a verb. This kind of information
should be listed in the dictionary; properties that are predictable should be
handled by rules. Verbpatterns, as labels in the dictionary, should contain 
only idiosyncratic information.$
$C2 Syntactic vs. semantic information
$ |||||Verbs have two kinds of idiosyncratic properties: semantic and syntactic.
The semantic idiosyncratic property of a verb (or of any lexical item) is its
meaning(s). The meaning of a verb is not predictable and must hence be listed
in the dictionary. These idiosyncratic semantic properties are reflected in
Rosetta by the basic meanings, which are listed in the dictionary. The 
syntactic
idiosyncratic property of a verb is the structural restrictions it imposes
on its environment. This is the kind of information that is subsumed under the
notion verbpattern in Rosetta2. This can be illustrated by the fact that in
Rosetta2 a difference is made between the attribute _aantalargs_ and the 
attribute
 _vps_. In _aantalargs_ the number of semantic arguments of a verb is given.
This is information that is necessary for translation: verbs with a different
number of _aantalargs_ may not be translated into each other. The attribute
_vps_ gives information about (among others) the number of actually realized
arguments. It indicates whether EMPTY-substitution may be applied to realize
less arguments than _aantalargs_. This is syntactic information and therefore
verbpatterns need not be translated. The application of the EMPTY-substitution
rule and argument-substitution rules is retained in the derivation tree and
this ensures that the meaning of these rules is not lost in translation. These
considerations suggest that verbpatterns should only contain (idiosyncratic)
syntactic information. All idiosyncratic information that is semantic in
character should be put in a separate attribute.$
$C3 What is an argument
$ |||||The term "argument" has been mentioned several times, as a semantic and
syntactic notion. Arguments are, e.g., the subject and object (possibly more
than one) of a verb. It is not immediately clear, however, which elements of
a clause classify as an argument and which do not. Is the PP _op tafel_ in
_Ik zet iets op tafel_ an argument of _zetten_, e.g.? In future there should
be clear criteria about what can count as an argument of a verb and tests to
decide when something can be said to be an argument of a verb. These criteria
and tests are necessary to decide the correct number of _aantalargs_ and the
correct verbpattern for each verb.$ 
$C2 "Surface" vs. "deep" structure information
$ |||||The S-trees that are the result of the application of the verbpattern-
rules and argument-substitution rules can be modified by other rules in 
different ways. The order of arguments may be changed, shift-rules may move
elements, etc. This means that the verbpatterns do not specify a "surface"
structure for a sentence. ("Surface" structure is here used somewhat loosely
in the sense of the structure of the eventual sentence. It is put in quotes
to distinguish it from the technical notion surface (or S-) structure of
linguistic theory.) The S-trees that are specified are, in a way "deep"
structures and the final structures arise only after application of other
rules. Verbpatterns should be constructed in such a way that they do not
complicate other rules unnecessarily. E.g., at this moment the order of the
verb and its arguments as specified by the verbpatterns is the same for
Dutch and English. In English, there is always the order subject-verb-object
(SVO) at the surface, both in main and in embedded clauses. In Dutch, however,
the verb is at the end in subordinate clauses (SOV) and occupies the second
position in main clauses (SVO). The order generated by the verbpatterns for
both languages is SVO. This means, that other rules must take care of the
order in subordinate clauses. Another possibility is having the verbpatterns
for Dutch generate SOV order and let other rules take care of the order in
main clauses. There is no a priori reason to choose for one or the other
option. Linguistic research has shown, however, that if SOV is the "deep"
structure order for Dutch, other rules can be greatly simplified. Assuming
SVO order for Dutch leads to complications in other rules. This shows that
there is a trading relation between rules that generate a deep structure and
other rules; so, in terms of Rosetta, between the information in verbpatterns
and other rules.$
$ |||||This means that it may be necessary to postulate verbpatterns for the
different languages that specify, e.g., different "deep" (or canonical) forms.
Other rules will also have to be taken into account when deciding what the
content of a verbpattern should be.$
$C2 Control
$ |||||"Control" is the linguistic term for the phenomenon that can be observed
in the sentences in (1):$

     (1)a. John promised [Bill]&NP& [to come]&S&

        b. John persuaded [Bill]&NP& [to come]&S&

$ In (1a) _John_ must be interpreted as the subject of _to come_ ("controls"
the subject), whereas in (1b) _Bill_ must be interpreted as the subject of
_to come_. _Promise_ is a "subject-controller" and _persuade_ is an "object-
controller". The control relation should be established at "deep" structure.
A subject-control verb cannot be passivized, whereas an object-control verb
can:$

     (2)a. *Bill was promised to come
        b.  Bill was persuaded to come

$ (2a) shows that, although _promise_ is a subject-control verb, the control
relation cannot be established with the "surface" subject. (2b) shows that the
control relation of _persuade_ is with the "deep" object, which may be moved to
subject position by the passive rule. The difference between these verbs is 
expressed in the verbpatterns in Rosetta2. Control is not purely a syntactic
property; it affects the interpretation of the sentence. Verbs that exhibit
subject control should not be translated into verbs that exhibit object control.
If verbpatterns contain only syntactic information, control properties of a
verb should be stated in a separate attribute. Control properties are 
idiosyncratic properties of a verb, so they should be indicated in the 
dictionay, but not as part of a verbpattern.$
$ |||||There is one other construction that is subsumed under control in
linguistics, and that has not yet been incorporated into Rosetta. These are
constructions that exhibit what is called arbitrary control as in (3):$

     (3)a. They think that to help Bill would be difficult
        b. They think that to help them would be difficult

$ The subject of the embedded clause is not controlled by the subject of the
main clause, but must be interpreted as being arbitrary in reference, meaning
"anybody". The idiosyncratic property "control" should not be part of the
verbpatterns, but will be a separate attribute. The rules have to be modified
in such a way that by using this attribute they generate (2b) but not (2a) and
assign the correct interpretation to the sentences in (3).$
$C2 Ergative verbs
$ |||||Ergative verbs are verbs that superficially resemble intransitive verbs,
but have the specific property that the syntactic subject should be interpreted
as the semantic object of the verb:$

     (4)a. The sun melts the ice      (transitive)
        b. The ice melted             (ergative)

$ (See also the note by Jan Odijk on ergative verbs.) Syntactically, ergative
verbs behave as intransitive verbs (Keyser and Roeper, "On the Middle and 
Ergative Constructions in English", Linguistic Inquiry 15.3), but semantically
they are different from "normal" intransitives. Ergative verbs should not be
translated into normal intransitive verbs, because the meaning of the sentence
would be different.$
$ |||||The difference in meaning between these verbs is sometimes expressed as
a difference in thematic roles assumed by the subject NP. In sentences with
normal intransitive verbs the subject NP has the thematic role Agent, whereas
the subject has the thematic role Theme with ergative verbs. It is not clear,
however, what these thematic roles mean exactly and how they are assigned. What
one might say, is that with ergative verbs the subject has the thematic role
that is normally associated with the object. In this way, ergative verbs and
normal intransitive verbs can be distinguished from each other.$
$ |||||In (GB) linguistics, thematic roles (called 0@--roles) also play a role
in the syntax. Verbs assign (as an idiosyncratic property) 0@--roles to 
elements in a clause. Only in positions to which a 0@--role has been assigned
can (and in fact must) an argument appear (at deep structure). Positions in
the clause that are not assigned a 0@--role are non-argument positions, which
can be filled by non-arguments (e.g. _it_ or parts of idiomatic expressions). 
Verbs such as _rain_ assign no 0@--role at all and can therefore not appear with
an argument (_it rains_). Intransitive verbs assign one 0@--role, and it is
assigned to the subject position. Verbs such as _seem_ also assign one 0@--role,
but it is assigned to the (sentential) object, not to the subject position.
The subject position can therefore be filled by non-argument _it_ (_it seems
that John comes_). So, 0@--roles are used here to indicate positions where
an argument can appear. The differences between Agent, Theme, etc. are of no
importance here, the question is whether a thematic role (no matter which) is
assigned or not. In this way, verbs such as _seem_, which take one argument
(but not in subject position) can be distinguished from verbs such as _sleep_
which also take one argument (in subject position).$
$C2 Middle verbs
$ |||||Middle verbs are verbs that appear in sentences such as (5):$

     (5)a. Volvos sell well
        b. Messages transmit rapidly by satellite

$ Middle verbs are like ergative verbs in that the subject assumes the thematic
role that is normally associated with the object. They are unlike ergatives in
that the adverb cannot be deleted. Syntactically, they pattern with transitive
verbs and not with intransitive verbs (although, superficially, they do not
take an object, see Keyser and Roeper). This means that the traditional 
distinction between intransitive and transitive verbs is not enough to capture
the differences between verbs. In the class of intransitive verbs a further
subdivision should be made between normal intransitive verbs and ergative 
verbs. The
transitive verbs can be further divided into normal transitive verbs and middle
verbs. It is necessary to distinguish ergative and middle verbs from other 
verbs and from each other, because they show different syntactic behaviour. For
Rosetta the distinction can also be important, because the translation of these
verbs is not always straightforward. The differences between ergatives and
intransitives on the one hand and between middles and transitives on the other
and the possibilities of distinguishing these classes in Rosetta will be
discussed in a separate note.$
$C2 One attribute vps?
$ |||||"Verbpattern" is a label that covers several idiosyncratic properties
of verbs. If these properties form a natural class, of which rules can make
use in a simple way, it is useful to put them together in one attribute. If,
on the other hand, they do not form a natural class, the number of verbpatterns
will grow unwarranted, an indication of missed generalizations. E.g., there
are two (Dutch) verbpatterns for verbs with three arguments which are exactly
the same, except for the difference between subject- and object-control. This
is an indication that the notion control should be a separate attribute and
should not be part of a verbpattern. (In 3.4 another argument was given to
consider control to be a separate attribute.)$
$ |||||The verb _schijnen_ (_seem_) is assigned different verbpatterns for the
structures in (6):$

     (6)a. Het schijnt dat Jan komt
        b. Jan schijnt te komen

$ For sentences such as (6a) _schijnen_ has a verbpattern with one realized
argument, whereas it has a verbpattern with two realized arguments in sentences
such as (6b). (6a) shows that _schijnen_ assigns no 0@--role to its subject,
because non-argument _het_ can appear in this position. In (6b) an argument
does appear in subject position 
(arguments should not appear in non-0@--positions), 
 but this is only possible if in the embedded clause an argument in missing
(the subject of _komen_). If an argument is inserted in both the subject
position of _schijnen_ and of _komen_, the sentence in ungrammatical, as
illustrated by (7):$

     (7) *Jan schijnt dat Karel komt

$ So, the facts in (6) follow from the same property of _schijnen_ (no 
0@--role in subject position) and it is
not necessary to assign different verbpatterns to _schijnen_ to explain these
constructions.$
$ |||||These examples suggest that it might be profitable to take verbpatterns
to have no status as such in Rosetta, but attribute the number of different
constructions in which verbs can appear to the number of possible combinations
of values of different attributes. One attribute could be a specification of 
the syntactic environment of the verb: can it be followed by NP, S, NP S,
NP NP, etc.? A specification of the postions that expect arguments
(0@--positions)
could be another attribute. The future note on ergatives, etc. that was 
mentioned in 3.5 will also have to contain suggestions as to which attributes
could replace the one attribute _vps_ and how the values of those attributes
can be combined to generate the range of "patterns" that is necessary. So, I 
will leave a detailed discussion of this idea until later.$
$C3 Assigning "verbpattern"-attributes to verbs in the dictionary
$ |||||Apart from the arguments given in 3.7, there are also practical reasons
for considering verbpatterns to be a convenient label for several separate
attributes instead of one complex attribute _vps_. At the moment, there are
about 20 verbpatterns in Rosetta2 and it may be expected that, in order to
cover constructions that have not been incorporated yet, this number would have
to increase. It is not immediately clear that there can be another way of 
assigning verbpatterns to verbs in the dictionary than by hand (verbpatterns
contain _non-predictable_ information). This is a very complex task, because
several properties of verbs will have to be taken into account at the same time.
Considering the size of the dictionary and the complexity of the notion
verbpattern, it is impractable to retain this attribute in its present form.$
$ |||||If the notion verbpattern is split up into several attributes, it will
be much easier to assign these attributes to verbs in the dictionary than the
attribute _vps_. Moreover, it may be the case that the Van Dale tapes contain
information that can be used to assign values to the attributes. The range
of possibilities of combining these attributes can be used by the M-rules to
account for the existing variety of patterns.$
$C1 Representation of "verbpattern" information in the M-grammar
$ |||||At the moment the information that is contained in the verbpatterns
is expressed partly by the verbpattern-rules (RVP) and partly by the
argument-substitution rules (RARGSUBST). This makes it difficult to get a
clear picture of exactly which information is contained in verbpatterns.$
$ |||||The syntactic idiosyncratic information about verbs, which is expressed
by different attributes in the dictionary, need not be translated. If there
were one class of rules (we might call them sentencepattern
rules) that spelled out the syntactic idiosyncratic properties of verbs, it
would be a class of rules that need not be translated. These rules would have 
the status of syntactic "transformations" and need not be represented in the
derivation tree or in the IL. Later rules should not refer back to
the attributes that are "spelled out" by the sentencepattern
rules, because they should only contain operations that are predictable
from this idiosyncratic information.$
$ |||||So, verbs have several attributes in the dictionary that
contain their syntactic idiosyncratic properties. The range of 
sentencepatterns that verbs can occur in is explained by the range of
possible combinations from these attributes. There is one class of rules,
which need not be translated, which spells out all these properties. In this
way the system is flexible (if the set of attributes is well-chosen, newly
added constructions will not give rise to new attributes, but to new
combinations of attributes) and easier to understand (there is one class
of rules that gives you all the idiosyncratic information).$
$C1 Conclusion
$ |||||The attribute _vps_ (verbpatterns) in Rosetta2 containes several
syntactic properties of verbs. These properties are spelled out by the
verbpattern-rules and the argument-substitution rules.$
$ |||||In this note it is proposed to look at verbpatterns in a slightly
different way. There should not be one attribute _vps_, but several
attributes, that together characterize the sentencepatterns in which
verbs can occur. These attributes should contain only syntactic, idiosyncratic
information. There should be one class of rules that spells out the information
that is contained in these attributes (sentencepattern rules). These rules
need not be translated.
Later rules should not refer to these
attributes.$
$ |||||The choice of the above-mentioned attributes and their values cannot
be made a priori. The output of the class of rules that specifies the 
idiosyncratic information interacts with other rules and the sentencepattern
rules should be formulated in such a way that they do not unnecessarily
complicate other rules. Several constructions have been mentioned that have
not been incorporated into Rosetta yet and which the sentencepattern rules
will have to account for (ergatives, middles, arbitrary control). Future
work must be directed towards defining the set of attributes that specify
the syntactic idiosyncratic properties of verbs and their possible values
and a specification of how sentencepattern rules can use this information
to spell out this information.$
