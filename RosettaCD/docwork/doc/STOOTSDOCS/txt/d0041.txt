$FL 12
$PL 274,16
$LD 5
$OP SH=U,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC `
$SC ^_
$AC @

   

            Project ROSETTA : Machine Translation


            Topic     :  Rosetta3

    ---------------------------------------------------------







         Title        :  An alternative for the NP-rules 

         Author       :  Franciska de Jong










         Doc.Nr       :  41

         Date         :  85/09/17

         Status       :  informal

         Supersedes   :  

         Distribution :  project

         Clearance    :  project

         Keywords     :  NP-rules, determiners
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Nederlandse Philips Bedrijven B.V.

$LD 4
$ph Rosetta          Doc.nr: 41                      date:85/09/17
$Np 1
$C1 Introduction
$ The purpose of this paper is to demonstrate a conceivable
simplification within the set of NP-rules.  In contrast to the NP-rules
in Rosetta2 this proposal assumes a category of determiners consisting of
articles, quantifiers, numerals and possibly possessive and demonstrative
pronouns. Section 2 gives a rough sketch of the treatment of NPs in Rosetta2.
Section 3 discusses the essentials of the alternative approach advocated here.
Finally in section 4 the suggestions of section 3 get a more formal 
elaboration. Lots of details are left out. For example, only little
attention is given to analysis and there is no extensive 
specification of
records and inherent attribute values. Also, to mention something a bit
more substantial, no rules for English and Spanish are given.
However, what is assumed in 
section 3 seems compatible with the peculiarities of noun 
phrase structure in English and Spanish, and for some apparent translation 
problems the proposal seems to
offer an adequate solution. $
$C1 Analysis of the NP-rules for Dutch in Rosetta2
Among the NP-rules of Rosetta2 three subclasses can be distinguished. 
Generatively spoken:

1) Rules with a BNOUN as input and a NP as output. Examples: the rules 
   grouped in RNP1.
2) Rules with both as input and as output an expression of the category NP.
   Some of these rules require additional input such as a QADJ or a NUMP.
   Examples: RNP2, RNP3, RNP4, RNP11-17.
3) Rules with a basic expression other than a BNOUN -in most cases: a pronoun- 
   as input and a NP as output. Examples: RNP5-10.

$ The first two categories together account for the generation of NPs 
consisting
of more than one basic expression, i.e. NPs with adjectival modifiers and/or
determiners preceding the noun. 
Rules of the third category generate
only non-branching NPs, with a basic S-tree as the only daughter. The latter
category will not be discussed here in detail. It is assumed that the 
alternative
proposal to be developed here be compatible with the treatment 
needed for pronouns and proper nouns. For present purposes it suffices to
consider the following
apects of the first two categories of rules:$
$nl
$HL 3,-
The rules of category 2 depend on the output of RNP1. They add modifiers 
or they substitute the articles introduced by RNP1 by other determiners.  
$nl
$HL 3,-
RNP1 introduces articles syncategorematically. The choice of the actual 
article, i.e. `de`, `het`, `een` or no article is decided by the value of 
parameter 
P. Each of the five possible values, i.e. defall, defone, indefone, indefsome
and countsing, triggers a specific subrule. The five corresponding
`if-then`-statements in RNP1  constitute the heart of the first step in the 
generative action, 
i.e. specifying the value of the auxiliary variables K and G. (K is a variable
ranging over the keys of articles, G is a variable ranging over the
number values of nouns.) The values of K and G determine the second step 
of the generative action, i.e. specifying the value of the key attribute 
for sig1 .
$nl
$HL 3,-
The interaction of parameter P that contains information about the kind
of quantification and attribute quant in the NP-record (nomrecord) is not
very transparent. The latter can have four possible values: defquant, 
indefquant, 
whquant and omegaquant. The first two seem to indicate different kinds
of quantification, too. In the rest of the M-rules the distinction between 
defquant and indefquant plays a role in the analysis and generation 
of sentences with 
existential `er`. (Cf. RARGSUBST3, Doc.nr: 0016, p.35.) But the fivefold
distinction connected with P does not have any effect on the behaviour of 
NPs as sentential constituents, nor does it seem to bear on a clearcut
semantic distinction. The distinction between definiteness and 
indefiniteness is involved, but these opposite notions each correspond 
to more than one P-value because the twofold semantic distinction 
is mingled with the distinction between singularity and plurality.
The former corresponds to P-values defone and 
defall, the latter to indefone and indefsome and countsing. The value of P
determines the article selection in RNP1 and, due to the
generative conditions for other NP-rules, it also directs the 
substitution by and addition of other prenominal expressions.$
$um

$ The present approach to determiners seems to be motivated by three things:$
1) The strategy to fill the lexicon with elements that have lexical meaning 
   only. As the interpretation of articles is not independent of context, a
   syncategorematic treatment can anticipate the problems that might occur
   if e.g. `de` is automatically translated into `the`. Complications for 
   'automatic' translation are handed in by  the predicative use of NPs and
   generic sentences such as `The cat is widespread`, among others things.
   Note that these complications also show up in case of NPs with QADJ's 
   instead of articles as determiner. Elements of the category BQADJ however,
   are not introduced syncategorematically.
2) The wish to relate the interpretation of NPs to one of the two kinds
   of quantification distinguished in predicate logic: universal and existen-
   tial quantification. These two kinds roughly correspond to 
   definiteness and indefiniteness, respectively. 
3) The fact that there is not always a one-to-one correspondence between the
   selection of (attribute values of) determiners in Dutch and English.
   Several complications can be observed:
$nl
$hl 6,    -
Some count nouns have a plural form only in one language, whereas their
counterparts in other languages have a plural and a singular form.
E.g. `glasses`, `trousers` and `scissors` in English. As a consequance NPs
with a head such as `bril` cannot get a translation consisting of 
a combination of the translation of
its parts. Cf. `een bril`/*`a glasses`. It also imposes some requirements on 
the treatment of number in general. Cf. `mijn bril`/*`my glass`.
(Spanish: `mucha gente` (sing)/`veel mensen`(plur))
$hl 6,    -
Some determiners have counterparts with a more restrictive set of attributes,
and consequently the reverse is true as well: some determiners have 
counterparts with less restrictions. E.g. the Dutch `sommige` 
cannot precede a mass noun, whereas English `some` can. 
$hl 6,    -
English (and also Spanish) exhibits the peculiarity that in interrogative 
sentences or in sentences with negation the use of a marked determiner, e.g.
`any`, is favoured over the use of unmarked `some`. Cf. `Did you see any/?some 
books?` or `I didn't see any/?some books`.
$um

$ It seems that these matters can also be dealt with by means of a set of rules
that incorporates an new category that generalizes over all prenominal 
non-adjectival elements, viz. the category of determiners, and
some rules for the combination of determiners and nouns. In the next section 
a rough sketch of such an alternative will be given. Note that any 
alternative set of NP-rules should also entail some improvement with 
respect to the following :$
$nl
$nl
$hl 3,- 
So-called partitive NPs, such as `een van de problemen` or `twee
van de twintig deelnemers` are not generated by the NP-rules of Rosetta2.
Probably the system will generate partitive strings as a result of local 
translation, but a more principled solution for the treatment of partitives
is to be preferred.
(Maybe this is erroneous. The PP-rules
of Rosetta2 can probably deal with them.)
$nl
$hl 3,-
Taken in isolation the generative part of the rules allows for the generation 
of several unwellformed strings. In some cases this is due to the fact that 
the possibility of recursion, inherent to the kind of rules of category 2, is
not always explicitly excluded. Consider e.g. RNP11, RNP12, RNP13, RNP14 and 
especially RNP16. With these rules it is possible to generate *`een vier N`,
*`de vier zeven N`, *`sommige drie N`, *`beide vier N`, *`de ster die valt 
die straalt die zelden gezien wordt` etc. 
Other cases are *`vier kaas`, *`lange acht narcissen`.
In translational practice these results will
never be obtained due to the fact that there is no corresponding input. However
it would be more elegant and transparent to rule out such results 
input-independently.
$um
$nl
$C1 Suggestions for an alternative treatment of determiners and NPs
$ Instead of introducing `de`, `het` and `een` syncategorematically we 
could as well treat them as basic expressions belonging to the same category
as the elements uptil now collected in the category BQADJ. To avoid confusion
I will refer to the elements of this newly introduced class as determiners,
or in more technical contexts, as BDET's. The term 
'determiner' will also 
be used as the name of a grammatical relation.$
$C2 Hierarchy in noun phrases
$ One way of generating NPs is to combine determiners with nouns. However, not
all NPs with a noun preceded by a determiner fit in the scheme `Det N`.
All sort of modifiers can occur between a determiner and a noun. In Rosetta2
these modifying elements are inserted after the generation of a NP-node.
In accordance with the insights developed in X-bar theory it is generally 
accepted that NPs should be assigned 
a hierarchical structure. There seem to be no objections to incorporate this
approach in Rosetta3 as well. That is, we might distinguish between the
level at which a noun is combined with a modifier, and the level at which
a derived modified nominal expression is combined with a determiner.$

$ Elaboration of the suggestion to treat NPs as expressions with hierarchical
structure requires the introduction of two new kinds of rules: generatively 
spoken, rules that
introduce derived nominals and rules that combine determiners
with derived nominals to form NPs. I will call the latter 
NP-rules. The former will be referred to as CN-rules. (This name is
reflecting the convention in formal semantics 
to call the <e,t>-type part of a NP,
whether it is complex or not, a common noun. Note that the head of CN is 
supposed
to be a NOUN, while the head of an NP is a CN.) The possible sister nodes
of these heads express the grammatical relation 'mod(ifier)' and 
'det(erminer)', respectively. Schematically:$

$rl 10
   (1)            NP
            
           det          head
                              
          DET            CN

                  mod     mod      head
               
                  ...    ...       NOUN 
$C2 The treatment of partitives and numerals
$ Partitive NPs fit in the scheme `Det1 van Det2 CN`. One way to deal with them
is to take the string `Det1 of Det2` as a complex determiner as in (2). 
Under this 
assumption we need rules to generate derived determiners, to be 
called DETP-rules. For the sake of
transparancy I will assume that basic determiners are transformed into derived
determiners too. Presumably an adaptation of the rules for possessive and 
demonstrative  pronouns to these alternative NP-rules will also require the
availability of a DETP level. As a consequence of the
introduction of derived determiners the NP rules should 
not combine CNs with 
BDET's, but CNs with DETP's. $

$rl 10
   (2)              NP

            det              head

           DETP                CN

     mod     mod     head

     DET    of      DET

$ Numerals, such as `twee`, `tien`, `honderd`, `vele` etc., can occur both
as modifier of CN and as determiner of NP (or, in case of a partitive, as part
of DETP). A point of discussion will be whether this double status makes 
numerals
ambiguous between BNUMP and BDET. Stated otherwise, the question is whether 
we still need RNUMP1 of Rosetta2. In the provisory rules given in section 3
I treat numerals unambiguously as BDETs.$
$C2 Aspects concerning kinds of quantification and number 
$ In order to retain the information about the kind of quantification
the record of a determiner should contain a quantification attribute. 
As in Rosetta2, this will be referred to as 'quant'. As the 
information about quantification is relevant at
NP-level (and probably also at CN-level as well) it must be 
assumed that under the proper conditions the
value of this determiner attribute is copied in the record of the NP.$

$ In Rosetta2 two basic kinds of quantification are distinguished. According
to the insights developed in recent quantificational theories determiners
can be subdivided in more than two subsets. For present purposes a 
threefold distinction among the entire set of determiners 
will presumably suffice to deal with the more apparent effects of
distinctions with respect to quantificational aspects. For example those
that are reflected in the conditions on RARGSUBST3. It will be assumed 
that 'def' (short
for definite) is the value of attribute quant for determiners such as `de`,
`beide` and `alle`. For determiners such as `vele`, `enige` and the numerals
quant has the value 'indef' (short for 'indefinite'). The third possible value,
provisionally 'adef', is reserved for determiners such as `de meeste` and 
`sommige`. (This 'adef' is supposed to cover the cases in between the two 
extremes of the scale running from definiteness to indefiniteness.)$

$ Given the above suggestions the original role of parameter P, which was
tightly linked to the selection of articles, will in part
become superfluous. The kind of quantification is specified in the record
of the basic determiners and in the record of the NP. Maybe an account of 
the complications with generics etc., will require the incorporation of 
a parameter that distinguishes between kinds of quantification. Possibly
the same parameter can account for the `any`/`some` contrast. But apart 
from these cases the relevant quantificational aspects can be dealt with by
making reference to the value of the quant attribute for determiners. However,
originally P also played a role  in relation to the treatment of number, 
a complication ignored thusfar. For the incorporation of a treatment of number 
that also can deal with the translational complications mentioned above
an external parameter is not superfluous. Such a number parameter, lets call
it NUMBER must have at least have two possible values, plur and sing. It
should be incorporated in the following manner:$ 

$hr 3,-
NUMBER is specified in the rules for DETP.
The generation of DETPs is submitted to the condition that the value of NUMBER
is in accordance with the value of the attribute possgetal that is
to be assumed within the record of determiners. (Note that several determiners
in Dutch and English can have a plural as well as a singular use. For example,
`de` and `mijn`.)
$hr 3,-
The value of NUMBER determines the value that is assigned to the NUMBER
attribute of the newly generated DETP node.
$hr 3,-
NUMBER is also specified in the rules that combine DETP with a CN. These
rules decide what the actual number value of a noun is. (These values are
spelled out by G-MORPH. In most cases it
will be derived from the number value of DETP under the condition that this 
value is in the set of values for the attribute possgetal that is to 
be assumed within the record of nouns.)
$um
$C2 The treatment of translational complications
$ With these assumptions the next question is how this enables us to deal with
the `glasses`-problem. First consider `my glasses` which is ambiguous 
between `mijn bril` and `mijn brillen`. As there are two values for number 
we can let `my glasses` run trough the analysis rules twice. In order to avoid 
a double application of rules in case of unambiguous NPs such as `my books`
the analysis rules must be submitted to the condition that for NUMBER = sing,
mv is the only value in the value set of the attribute possgetal for the noun.$

$ To deal with `een bril`/`glasses` something extra is needed.
In contrast to Rosetta2 a treatment of determiners along the lines 
sketched here has to deal with the complication that for `een bril` 
the analysis of Dutch results in
a derivation tree with two basic S-trees. In order to maintain the
isomorphy the English `glasses` should be assigned an underlying structure
with two basic S-trees, too. Suppose that the analysis of `een bril` and
`mijn bril` is unambiguous. That is, suppose that only one value for NUMBER
will lead to a complete analysis. The basic S-trees to be transferred are
`een`/`mijn` and `bril`. Consequently the English `a`/`my` and `glasses` 
will be the input
for the generation of `glasses`/`my glasses`. Under NUMBER = sing the 
DETP-rules will assign `a` and `my`
the value sing. The crucial step is the combination of DETP and CN. For NUMBER
= sing this rule must be conditioned such that it requires that mv is the only
value for the attribute possgetal for the noun in CN. In case
the determiner is `a` it should be deleted and the number attribute of the
resulting NP must be assigned the value plur. In any other case we need a 
rule that ignores the number of DETP (= sing) and that assigns the NP the 
value plur.$
$C1 Some M-rules for Dutch according to the suggestions in section 3
$um
NB. THE RULES ARE NOT COMPLETE
 
`RDETP1`                (* for determiner phrases containing one BDET *)

m1: BDET{ DETrec1 } 

m:  DETP{ DETrec1 } [head/DET{ DETrec1 }

External parameter: NUMBER: [sing, plur]

GEN COND    (NUMBER = sing and sing in DETrec1.possgetal) or
            (NUMBER = plur and plur in DETrec1.possgetal) 


    ACTION  If NUMBER = sing, 
            then DETrec1.getal := sing
            else DETrec1.getal := plur

`RDETP2`                (* for determiner phrases occurring in partitives *)


m1: BDET{ DETrec1 } 
m2: BPREP{ PREPrec1 }
m3: BDET{ DETrec2 }

m:  DETP{ DETPrec1 } [mod/DET{ DETrec1, 
                      mod/PREP{ PREPrec1}, 
                      head/DET{ DETrec2 }
                     ]

External parameter: NUMBER: [sing, plur]

GEN COND    PREPrec1.key = vanprepkey 
            DETrec2.quant = def
            (NUMBER = sing and enk in DETrec1.possgetal) or
            (NUMBER = plur and mv in DETrec1.possgetal) 
                
$rl 7

    ACTION  DETPrec1.quant := DETrec2.quant
            If NUMBER = sing
            then DETPrec1.getal := sing
            else DETPrec1.getal := plur


$ (* The value of DETPrec1.getal is relevant for the subject-verb agreement.
 Though this value can vary, the noun to which this complex partitive DETP 
is attached is always plural: `een van de boeken/*boek ligt thuis`, `welk van
de twee boeken/*boek ligt thuis?` To make sure that only wellformed 
partitives are 
generated the condition on the number attributes in rule RNP2 must refer
to the attribute in DETrec2 instead of the DETP atrtibute.*)$
 

`RCN1`            
m1: BNOUN{ NOUNrec1 }

m:  CN {CNrec1} [ head/NOUN {NOUNrec1} ]

External parameter: NUMBER: [sing, plur]

GEN COND    (NUMBER = sing and enk in NOUNrec1.possgetal) or
            (NUMBER = plur and mv in NOUNrec1.possgetal) 

    ACTION  CNrec1 is een copie van NOUNrec1
            CNrec1.quant := omega
            If NUMBER = sing
            then CNrec1.getal := sing
            else CNrec1.getal := plur
 

`RCN2`                (* for numerals folowing the determiner *)

m1: BNOUN { NOUNrec1 } 
m2: DETP{DETPrec1} [   ]   (* or NUMP{ NUMPrec1 } [        ]  *)

m:  CN {CNrec1} [ mod/DETP{ DETPrec1 }, 
                  head/NOUN { NOUNrec1 }]
 
External parameter: NUMBER: [sing, plur]

GEN COND    DETPrec1.quant = indef 
            
    ACTION  CNrec1 is copie van NOUNrec1
            If NUMBER = sing
            then CNrec1.getal := sing
            else CNrec1.getal := plur
             
            CNrec1.quant := def
                       (* The third statement in the generative action is 
                          meant to prevent the generation of *`een drie N` 
                          or *`sommige drie N`: cf. the generative condition in
                          RNP2. To generate `drie N` as NP RNP2 is needed. *)


`RCN3`                 (* This rule allows for recursive application *)

m1: CN { CNrec1 } [mu1, mu2, head/T1]
m2: OPENADJP{ ADJPrec1 } [        ]

m:  CN {CNrec1} [ mu1, mod/ ADJ{ ADJPrec1 } [  ], mu2, head/T1]
 

GEN COND    true

    ACTION    -


`RNP1`                 (* for bare plurals and bare mass terms *)      


m1: CN{ CNrec1 } [mu1, head/T1]

m:  NP{ NPrec1 } [head/CN{ CNrec1 } [mu1, head/T1 ]]

External parameter: NUMBER: [sing, plur]

GEN COND  (NUMBER = sing & enk in CNrec1.possgetal) or 
          (NUMBER = plur & mv in CNrec1.possgetal)
           not CNrec1.quant = def


   ACTION  NPrec1 is een copie van CNrec1
           If NUMBER = sing
           then NPrec1.getal := sing
           else NPrec1.getal := plur
           NPrec1.quant := indef


`RNP2` 

m1: CN{ CNrec1 } [mu1, head/T1]
m2: DETP{ DETPrec1 } [mu2, head/DET{ DETrec1 }]

m:  NP{ NPrec1 } [det/DETP{ DETPrec1 } [mu2, head/DET { DETrec1 }],
                  mu1,
                  head/T1]

External parameter: NUMBER: [sing, plur]

GEN COND   DETrec1.getal = CNrec1.getal
           If CNrec1 = def
           then DETPrec1.quant = def      (* Cf. RCN2 *)
                   
    ACTION  NPrec1 is copie van CNrec1
            NPrec1.getal := DETPrec1.getal
                  .quant :=         .quant


$ (* In order to deal with the `glasses`-problem and with pairs such as
`de politie`(sing)/`the police`(plur), we should replace the leftmost daughter
of m in the corresponding generative rule 
for English 
by sigm1 and the generative action should contain something like the folowing:$
$rl 7
          If NUMBER = sing and CNrec1.possgetal = {mv} 
          then if DETrec1.key = akey
               then sigm1 := eps
               else (sigm1 := det/DETP{ DETPrec1 } [mu2, head/DET { DETrec1 }])
                    and (NPrec1.getal := plur)
          else ....
$ In the corresponding rule for Spanish a less complex addition to RNP2
will suffice in order to deal with 
pairs like `veel mensen`(plur)/`mucha gente`(sing):$
          If NUMBER = plur and CNrec1.possgetal = {enk})
          then NPrec1.getal := sing
          else .....                                                  *)
            
