{*DUTCH}
 PROCEDURE commrules95_init;EXTERNAL;
{*
SUBGRAMMAR
ADVDERIVATION
FUNCTION ADVDERIVATION:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RBADVTOSUB
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RRADVTOSUB
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSUBADJTOSUBADV
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH1:=GRAPH
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
BEGIN
ADVDERIVATION:=GRAPH
END;
*
BADV
BADVSUFF
RADV
*
SUBADV
*
}
{rule:}
{:RBADVTOSUB}
 FUNCTION COMRBADVTOSUB(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RBADVTOSUB
*
*
1
BADV
SUBADV
}
{:RBADVTOSUB}
{rule:}
{:RRADVTOSUB}
 FUNCTION COMRRADVTOSUB(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RRADVTOSUB
*
*
1
RADV
SUBADV
}
{:RRADVTOSUB}
{rule:}
{:RSUBADJTOSUBADV}
 FUNCTION COMRSUBADJTOSUBADV(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSUBADJTOSUBADV
*
*
2
BADVSUFF
SUBADJ
SUBADV
}
{:RSUBADJTOSUBADV}
{*
SUBGRAMMAR
ADVPFORMATION
FUNCTION ADVPFORMATION:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSTARTADVP0
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSTARTADVP1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH1:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVPADVPATTERN0
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVPADVPATTERN1A
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVPADVPATTERN1B
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      FUNCTION CONCGRAPH4:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVPADVPATTERN1C
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH4:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
AppendCtrlExpr(CONCGRAPH4,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH2:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH3:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPSUPERDEIXIS
ELEMGRAPH3:=result;
END;
                                                      FUNCTION ELEMGRAPH4:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPDEGREEMOD1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPDEGREEMOD2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPDEGREEMOD3
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH4:=result;
END;
                                                      FUNCTION ELEMGRAPH5:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPCOMPARISONCOMPLMOD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH5:=result;
END;
                                                      FUNCTION ELEMGRAPH6:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVPNOMCASEASSIGNMENT
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH6:=result;
END;
                                                      FUNCTION ELEMGRAPH7:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPOMCOMPLMOD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH7:=result;
END;
                                                      FUNCTION ELEMGRAPH8:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPVOOROBJMOD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH8:=result;
END;
                                                      FUNCTION ELEMGRAPH9:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPSUBSTITUTION1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPSUBSTITUTION2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPSUBSTITUTION3
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      FUNCTION CONCGRAPH4:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPSUBSTITUTION4
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH4:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
AppendCtrlExpr(CONCGRAPH4,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH9:=result;
END;
                                                      FUNCTION ELEMGRAPH10:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPAMOUNTMOD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH10:=result;
END;
                                                      FUNCTION ELEMGRAPH11:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVMEERTOER
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVMEERNOTTOER
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVNOERNOMEER
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH11:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH12:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVMEESTTOST2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVMEESTNOTTOST
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVNOSTNOMEEST
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH12:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH13:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: FPREADVALSINTRO
ELEMGRAPH13:=result;
END;
                                                      FUNCTION ELEMGRAPH14:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVALSINTRO
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH14:=result;
END;
                                                      FUNCTION ELEMGRAPH15:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVQPHOPPING1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVQPHOPPING2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH15:=result;
END;
                                                      FUNCTION ELEMGRAPH16:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: FPOSTADVQPHOPPING
ELEMGRAPH16:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
AppendCtrlExpr(ELEMGRAPH2,result);
AppendCtrlExpr(ELEMGRAPH3,result);
AppendCtrlExpr(ELEMGRAPH4,result);
AppendCtrlExpr(ELEMGRAPH5,result);
AppendCtrlExpr(ELEMGRAPH6,result);
AppendCtrlExpr(ELEMGRAPH7,result);
AppendCtrlExpr(ELEMGRAPH8,result);
AppendCtrlExpr(ELEMGRAPH9,result);
AppendCtrlExpr(ELEMGRAPH10,result);
AppendCtrlExpr(ELEMGRAPH11,result);
AppendCtrlExpr(ELEMGRAPH12,result);
AppendCtrlExpr(ELEMGRAPH13,result);
AppendCtrlExpr(ELEMGRAPH14,result);
AppendCtrlExpr(ELEMGRAPH15,result);
AppendCtrlExpr(ELEMGRAPH16,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
BEGIN
ADVPFORMATION:=GRAPH
END;
*
SUBADV
*
ADVP
*
}
{rule:}
{:RSTARTADVP0}
 FUNCTION COMRSTARTADVP0(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSTARTADVP0
*
*
1
SUBADV
ADVP
}
{:RSTARTADVP0}
{rule:}
{:RSTARTADVP1}
 FUNCTION COMRSTARTADVP1(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSTARTADVP1
*
*
2
SUBADV

ADVP
}
{:RSTARTADVP1}
{rule:}
{:TADVPADVPATTERN0}
 FUNCTION COMTADVPADVPATTERN0(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVPADVPATTERN0
*
*
1
ADVP
ADVP
}
{:TADVPADVPATTERN0}
{rule:}
{:TADVPADVPATTERN1A}
 FUNCTION COMTADVPADVPATTERN1A(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVPADVPATTERN1A
*
*
1
ADVP
ADVP
}
{:TADVPADVPATTERN1A}
{rule:}
{:TADVPADVPATTERN1B}
 FUNCTION COMTADVPADVPATTERN1B(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVPADVPATTERN1B
*
*
1
ADVP
ADVP
}
{:TADVPADVPATTERN1B}
{rule:}
{:TADVPADVPATTERN1C}
 FUNCTION COMTADVPADVPATTERN1C(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVPADVPATTERN1C
*
*
1
ADVP
ADVP
}
{:TADVPADVPATTERN1C}
{rule:}
{:RADVPDEGREEMOD1}
 FUNCTION COMRADVPDEGREEMOD1(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPDEGREEMOD1
*
*
2
ADVP

ADVP
}
{:RADVPDEGREEMOD1}
{rule:}
{:RADVPDEGREEMOD2}
 FUNCTION COMRADVPDEGREEMOD2(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPDEGREEMOD2
*
*
2
ADVP
QP
ADVP
}
{:RADVPDEGREEMOD2}
{rule:}
{:RADVPDEGREEMOD3}
 FUNCTION COMRADVPDEGREEMOD3(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPDEGREEMOD3
*
*
2
ADVP
ADVP
ADVP
}
{:RADVPDEGREEMOD3}
{rule:}
{:RADVPVOOROBJMOD}
 FUNCTION COMRADVPVOOROBJMOD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPVOOROBJMOD
*
*
2
ADVP

ADVP
}
{:RADVPVOOROBJMOD}
{rule:}
{:RADVPSUBSTITUTION1}
 FUNCTION COMRADVPSUBSTITUTION1(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPSUBSTITUTION1
*
LEVEL
INTEGER
*
2
ADVP
NP
ADVP
}
{:RADVPSUBSTITUTION1}
{rule:}
{:RADVPSUBSTITUTION2}
 FUNCTION COMRADVPSUBSTITUTION2(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPSUBSTITUTION2
*
LEVEL
INTEGER
*
2
ADVP
ADVP
ADVP
}
{:RADVPSUBSTITUTION2}
{rule:}
{:RADVPSUBSTITUTION3}
 FUNCTION COMRADVPSUBSTITUTION3(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPSUBSTITUTION3
*
LEVEL
INTEGER
*
2
ADVP
NP
ADVP
}
{:RADVPSUBSTITUTION3}
{rule:}
{:RADVPSUBSTITUTION4}
 FUNCTION COMRADVPSUBSTITUTION4(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPSUBSTITUTION4
*
LEVEL
INTEGER
*
2
ADVP
NP
ADVP
}
{:RADVPSUBSTITUTION4}
{rule:}
{:RADVPSUPERDEIXIS}
 FUNCTION COMRADVPSUPERDEIXIS(SUPER:LSDOMAINT_DEIXISTYPE;
Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPSUPERDEIXIS
*
SUPER
DEIXISTYPE
*
1
ADVP
ADVP
}
{:RADVPSUPERDEIXIS}
{rule:}
{:RADVPCOMPARISONCOMPLMOD}
 FUNCTION COMRADVPCOMPARISONCOMPLMOD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPCOMPARISONCOMPLMOD
*
*
2
ADVP

ADVP
}
{:RADVPCOMPARISONCOMPLMOD}
{rule:}
{:TADVPNOMCASEASSIGNMENT}
 FUNCTION COMTADVPNOMCASEASSIGNMENT(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVPNOMCASEASSIGNMENT
*
*
1
ADVP
ADVP
}
{:TADVPNOMCASEASSIGNMENT}
{*
SUBGRAMMAR
ADVPPROPFORMATION
FUNCTION ADVPPROPFORMATION:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSTARTADVPPROP100
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSTARTADVPPROP010
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RSTARTADVPPROP120
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH1:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVPATTERN0
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVPATTERN1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH2:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVREFVARINSERTION
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPSADVVAR
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPSPREPPVAR
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      FUNCTION CONCGRAPH4:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPCONJSVAR
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH4:=result;
END;
                                                      FUNCTION CONCGRAPH5:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPCONJSVAR2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH5:=result;
END;
                                                      FUNCTION CONCGRAPH6:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPCONJSVAR3
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH6:=result;
END;
                                                      FUNCTION CONCGRAPH7:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPLOCADVVAR
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH7:=result;
END;
                                                      FUNCTION CONCGRAPH8:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPLOCPREPPVAR
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH8:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
AppendCtrlExpr(CONCGRAPH4,result);
AppendCtrlExpr(CONCGRAPH5,result);
AppendCtrlExpr(CONCGRAPH6,result);
AppendCtrlExpr(CONCGRAPH7,result);
AppendCtrlExpr(CONCGRAPH8,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH3:=result;
END;
                                                      FUNCTION ELEMGRAPH4:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPROPVOICE
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH4:=GRAPH
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
AppendCtrlExpr(ELEMGRAPH2,result);
AppendCtrlExpr(ELEMGRAPH3,result);
AppendCtrlExpr(ELEMGRAPH4,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
BEGIN
ADVPPROPFORMATION:=GRAPH
END;
*
SUBADV
*
ADVPPROP
*
}
{rule:}
{:RSTARTADVPPROP100}
 FUNCTION COMRSTARTADVPPROP100(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSTARTADVPPROP100
*
*
2
SUBADV

ADVPPROP
}
{:RSTARTADVPPROP100}
{rule:}
{:RSTARTADVPPROP010}
 FUNCTION COMRSTARTADVPPROP010(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSTARTADVPPROP010
*
*
2
SUBADV

ADVPPROP
}
{:RSTARTADVPPROP010}
{rule:}
{:RSTARTADVPPROP120}
 FUNCTION COMRSTARTADVPPROP120(Is1:LISTREE_pStree;Is2:LISTREE_pStree;Is3:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RSTARTADVPPROP120
*
*
3
SUBADV


ADVPPROP
}
{:RSTARTADVPPROP120}
{rule:}
{:TADVPATTERN0}
 FUNCTION COMTADVPATTERN0(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVPATTERN0
*
*
1
ADVPPROP
ADVPPROP
}
{:TADVPATTERN0}
{rule:}
{:TADVPATTERN1}
 FUNCTION COMTADVPATTERN1(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVPATTERN1
*
*
1
ADVPPROP
ADVPPROP
}
{:TADVPATTERN1}
{rule:}
{:RADVREFVARINSERTION}
 FUNCTION COMRADVREFVARINSERTION(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVREFVARINSERTION
*
*
2
ADVPPROP

ADVPPROP
}
{:RADVREFVARINSERTION}
{rule:}
{:RADVPPROPVOICE}
 FUNCTION COMRADVPPROPVOICE(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPPROPVOICE
*
*
1
ADVPPROP
ADVPPROP
}
{:RADVPPROPVOICE}
{*
SUBGRAMMAR
ADVPPROPTOADVPFORMULA
FUNCTION ADVPPROPTOADVPFORMULA:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVTOFORMULA
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH1:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVASPECTIMPERFECTIVE
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH2:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPSUPERDEIXIS
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH3:=GRAPH
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
AppendCtrlExpr(ELEMGRAPH2,result);
AppendCtrlExpr(ELEMGRAPH3,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
BEGIN
ADVPPROPTOADVPFORMULA:=GRAPH
END;
*
ADVPPROP
*
ADVPFORMULA
*
}
{rule:}
{:RADVTOFORMULA}
 FUNCTION COMRADVTOFORMULA(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVTOFORMULA
*
*
1
ADVPPROP
ADVPFORMULA
}
{:RADVTOFORMULA}
{rule:}
{:RADVASPECTIMPERFECTIVE}
 FUNCTION COMRADVASPECTIMPERFECTIVE(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVASPECTIMPERFECTIVE
*
*
1
ADVPFORMULA
ADVPFORMULA
}
{:RADVASPECTIMPERFECTIVE}
{rule:}
{:RADVPPSUPERDEIXIS}
 FUNCTION COMRADVPPSUPERDEIXIS(SUPER:LSDOMAINT_DEIXISTYPE;
Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPPSUPERDEIXIS
*
SUPER
DEIXISTYPE
*
1
ADVPFORMULA
ADVPFORMULA
}
{:RADVPPSUPERDEIXIS}
{*
SUBGRAMMAR
ADVPFORMULATOADVPPROP
FUNCTION ADVPFORMULATOADVPPROP:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: FADVPPPREPROSUBJECT
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH1:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVPPPROSUBJECT
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH2:=result;
END;
                                                      FUNCTION ELEMGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPSUBST1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH3:=result;
END;
                                                      FUNCTION ELEMGRAPH4:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TADVASPECTNEUTRALISATION
ELEMGRAPH4:=result;
END;
                                                      FUNCTION ELEMGRAPH5:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPMOOD1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPMOOD2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH5:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH6:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RADVPPNOPUNC
ELEMGRAPH6:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
AppendCtrlExpr(ELEMGRAPH2,result);
AppendCtrlExpr(ELEMGRAPH3,result);
AppendCtrlExpr(ELEMGRAPH4,result);
AppendCtrlExpr(ELEMGRAPH5,result);
AppendCtrlExpr(ELEMGRAPH6,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
BEGIN
ADVPFORMULATOADVPPROP:=GRAPH
END;
*
ADVPFORMULA
*
OPENADVPPROP
CLOSEDADVPPROP
*
}
{rule:}
{:FADVPPPREPROSUBJECT}
 FUNCTION COMFADVPPPREPROSUBJECT(Is:LISTREE_pStree):LISTREE_pstree;
EXTERNAL;
{*
FILTER
FADVPPPREPROSUBJECT
1
ADVPFORMULA
}
{:FADVPPPREPROSUBJECT}
{rule:}
{:RADVPPSUBST1}
 FUNCTION COMRADVPPSUBST1(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPPSUBST1
*
LEVEL
INTEGER
*
2
ADVPFORMULA
NP
ADVPFORMULA
}
{:RADVPPSUBST1}
{rule:}
{:TADVASPECTNEUTRALISATION}
 FUNCTION COMTADVASPECTNEUTRALISATION(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVASPECTNEUTRALISATION
*
*
1
ADVPFORMULA
ADVPFORMULA
}
{:TADVASPECTNEUTRALISATION}
{rule:}
{:TADVPPPROSUBJECT}
 FUNCTION COMTADVPPPROSUBJECT(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVPPPROSUBJECT
*
*
1
ADVPFORMULA
ADVPFORMULA
}
{:TADVPPPROSUBJECT}
{rule:}
{:RADVPPMOOD1}
 FUNCTION COMRADVPPMOOD1(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPPMOOD1
*
*
1
ADVPFORMULA
OPENADVPPROP
}
{:RADVPPMOOD1}
{rule:}
{:RADVPPMOOD2}
 FUNCTION COMRADVPPMOOD2(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPPMOOD2
*
*
1
ADVPFORMULA
CLOSEDADVPPROP
}
{:RADVPPMOOD2}
{rule:}
{:RADVPPNOPUNC}
 FUNCTION COMRADVPPNOPUNC(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPPNOPUNC
*
*
1


}
{:RADVPPNOPUNC}
{rule:}
{:RUTTADJP}
 FUNCTION COMRUTTADJP(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RUTTADJP
*
*
1
ADJP
UTT
}
{:RUTTADJP}
{rule:}
{:TADVMEERTOER}
 FUNCTION COMTADVMEERTOER(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVMEERTOER
*
*
1
ADVP
ADVP
}
{:TADVMEERTOER}
{rule:}
{:TADVMEERNOTTOER}
 FUNCTION COMTADVMEERNOTTOER(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVMEERNOTTOER
*
*
1
ADVP
ADVP
}
{:TADVMEERNOTTOER}
{rule:}
{:TADVNOERNOMEER}
 FUNCTION COMTADVNOERNOMEER(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVNOERNOMEER
*
*
1
ADVP
ADVP
}
{:TADVNOERNOMEER}
{rule:}
{:TADVMEESTTOST2}
 FUNCTION COMTADVMEESTTOST2(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVMEESTTOST2
*
*
1
ADVP
ADVP
}
{:TADVMEESTTOST2}
{rule:}
{:TADVMEESTNOTTOST}
 FUNCTION COMTADVMEESTNOTTOST(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVMEESTNOTTOST
*
*
1
ADVP
ADVP
}
{:TADVMEESTNOTTOST}
{rule:}
{:TADVNOSTNOMEEST}
 FUNCTION COMTADVNOSTNOMEEST(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVNOSTNOMEEST
*
*
1
ADVP
ADVP
}
{:TADVNOSTNOMEEST}
{rule:}
{:TADVALSINTRO}
 FUNCTION COMTADVALSINTRO(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TADVALSINTRO
*
*
1
ADVP
ADVP
}
{:TADVALSINTRO}
{rule:}
{:FPREADVALSINTRO}
 FUNCTION COMFPREADVALSINTRO(Is:LISTREE_pStree):LISTREE_pstree;
EXTERNAL;
{*
FILTER
FPREADVALSINTRO
1
ADVP
}
{:FPREADVALSINTRO}

