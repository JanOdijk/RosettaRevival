\documentstyle{Rosetta}
\begin{document}
   \RosTopic{General}
   \RosTitle{Final report to Nehem}
   \RosAuthor{Jan Landsbergen (editor)}
   \RosDocNr{0298}
   \RosDate{\today}
   \RosStatus{approved}
   \RosSupersedes{-}
   \RosDistribution{Project, NEHEM}
   \RosClearance{Philips, NEHEM}
   \RosKeywords{}
   \MakeRosTitle
%

\setlength{\parindent}{0 in}


\begin{titlepage}
\begin{center}
\vspace*{1.5 cm}
{\huge Rosetta project}
\\[1.5 cm]
{\LARGE Final Report to Nehem}
\\[3.5 cm]
{\large Jan Landsbergen (editor)}\\
{\large Lisette Appelo, Franciska de Jong, Ren\'{e} Leermakers}\\
{\large  Elly van Munster, Jan Odijk, Joep Rous}\\
{\large Margreet Sanders, Andr\'{e} Schenk, Harm Smit}
\\[1 cm]
{\large Philips Research Laboratories}\\
{\large P.O.\ Box 80 000}\\
{\large 5600 JA Eindhoven}\\
{\large The Netherlands}
\\[2 cm]
January 1989
\\[1.5 cm]
CONFIDENTIAL
\end{center}
\end{titlepage}




\section*{\centering{Summary}}
This report presents the results of the Rosetta project achieved in the period 
from February 1985 until November 1988, i.e. the part of the project to which 
the ACSI 85 subsidy by Nehem applies.\\

These results can be summarized as follows:

\begin{enumerate}

\item The Rosetta formalism. This is a formalism for the description of 
natural languages and 
the relation between languages, including formal notations for these 
descriptions.

\item The Rosetta environment. This includes 
the design and implementation of algorithms for 
analysis, translation and generation of natural language expressions, based on 
the Rosetta formalism, compilers for the beforementioned 
notations and other software tools. 

\item The Rosetta3 phrase translator. This is 
an experimental translation system, which 
is able to translate short phrases containing 
a large variety of natural language constructs, for the 
language pair Dutch - English and for Dutch - Spanish (a test version).  
In addition a Dutch generation component has been produced and the major parts 
of the English and Spanish analysis components, so that phrase translators for 
other language pairs can be completed soon.

\item The Rosetta3 word translator. This system translates inflected words, 
for the language pairs Dutch 
- English and English - Dutch.

\end{enumerate}

The results and in particular the capacities of the phrase translator and the 
word translator are presented in some detail and evaluated in the perspective 
of the entire project, which will continue until the end of 1991. We have tried 
to keep the report as self-contained and non-technical as possible.

\newpage

\section{Introduction}

This final report to Nehem discusses the results of the Rosetta project 
achieved in the period from February 1, 1985 until November 1, 1988, i.e. the 
part of the project to which the Nehem subsidy (ACSI 85) applies. 
For the Rosetta project as a 
whole (1985 - 1991) this should be considered an intermediate report.


The goal of the project, carried out by Philips Research Laboratory, Eindhoven,
in collaboration with the University of Utrecht, 
is the development of a multilingual translation 
system, for Dutch, English and Spanish, 
based on the isomorphic grammar method. There is also a 
 strategic goal: to acquire knowledge and experience in Natural Language
Processing in general, which will also be useful for other applications,
e.g. for natural language interfaces and advanced text-editing.

\bigskip

There are three kinds of  activities in the project:

(i) Developing adequate formalisms for the description of languages and the 
relation between languages. This includes the development of notations
for syntactic rules, morphological rules, lexical entries, etc. 

(ii) Designing and implementing algorithms based on these formalisms (e.g.
parsers), compilers which translate from linguistic notation into
programming language and various software tools.

(iii) Describing languages and the relation between languages by means
of rules and lexical data, expressed in the developed notations. 

\bigskip

The project consists of an introductory year followed by two phases, the 
Rosetta3 phase and the Rosetta4 phase (before the project started we already 
had developed two small experimental systems, Rosetta1 and Rosetta2). 

In the Rosetta3 phase, formalisms, implemented
algorithms and software tools have been developed, 
which together constitute an environment for the 
development of translation systems. This environment has been used to develop 
an experimental translation system, Rosetta3.
Rosetta3 is a {\em phrase translator}, 
which gives {\em possible translations} 
of isolated sentences and phrases, i.e. the
translations that are possible on the basis of linguistic knowledge only
(in general more than one, because of lexical and syntactic ambiguities).

The ACSI subsidy by Nehem covered the introductory year and the major part of 
the Rosetta3 phase of the project, during which the Dutch - English 
phrase translator and the Dutch - Spanish `test version' were developed.
(For Dutch - Spanish we did not plan to 
develop a full-fledged phrase translator, but on the other hand we wanted
the know-how for Spanish to be at the same level as for Dutch and English,
when the Rosetta4 phase would start;
therefore a test version for Spanish is 
developed).

In addition a complete 
Dutch generation component has been produced  and the major parts 
of the Spanish and English analysis components, so that phrase translators for 
other language pairs can be completed soon. 

Completing the English analysis 
component and thus a phrase translator for English - Dutch and a test version 
for English - Spanish is planned for the final half-year 
of the Rosetta3 project, 
not covered by the Nehem subsidy.
During the project it was decided to single out one of the tasks of the phrase 
translator, the translation of inflected words, in a separate system called 
word translator. This was developed for Dutch - English and English - Dutch. \\

In the Rosetta4 phase of the project ('89 - '91) the work will be focused
on a particular kind of texts for an application to be chosen in consultation 
with  Philips product divisions.
The linguistic knowledge of the system will be extended as far as necessary 
for the application domain; the system will also be provided with means to
solve ambiguities, partially by adding knowledge of the domain to the system 
(for the selected domain), but mainly by interaction with the user, the 
author of the 
text. 
In the latter case the user is interrogated - in his own language - about 
ambiguities in his text. After this the text is automatically translated into 
the target language. 

\bigskip



Up till now six half-yearly reports to Nehem have been produced. These reports 
were brief 
and consisted mainly of an overview of the {\em activities} in the 
relevant half-year. This final report is different: it consists mainly of an 
overview of the {\em results}. We have tried to make this report as 
self-contained and non-technical as possible. As a consequence the largest 
parts
of the report are an informal introduction to the Rosetta translation 
method and a description of 
the linguistic capacities of the developed systems. Neither the 
grammars nor the algorithms or the software tools are discussed in any detail.
\\

The results will be presented in the following sections.

\begin{itemize}

\item Section 2: The translation method of Rosetta. Here we describe the basic 
principles on which our approach is based, the concept of an M-grammar, based 
on these principles, and the global design of the system. 

\item Section 3: The Rosetta environment. A brief overview is given of the 
implementation of the system, the compilers for the linguistic data, the 
Rosetta management system and a number of additional tools.

\item Section 4: Rosetta3 phrase translator. Here the morphological and 
syntactic 
capacities of the phrase translator are described in detail.
This is the most extensive part of the report.

\item Section 5: Rosetta3 word translator. This is a spin-off 
of the phrase translator work: a system that translates inflected words, 
for the language pairs Dutch - English and English - Dutch.

\item Section 6: Discussion of results. 
The original plans and the adjustment of the plans 
during the definition phase of the project are recapitulated and the results 
are discussed.

\item Section 7: Personnel. Data about personnel and the time records in
the period February - November 1988 are given.

\item Section 8: Publications. A list of publications about the Rosetta 
project.


\end{itemize}

\newpage

\section{The translation method of Rosetta}




\subsection{The Rosetta Framework}




In this section we will give an outline of the approach to machine translation 
pursued in the Rosetta project. As we already indicated in the introduction, we 
concentrated on the linguistic aspects of translation, in the first phase of the 
project. The linguistic framework of Rosetta
can be characterized
by a number of principles. These are `working principles',
intended to be helpful for systematic research on translation and
for the actual construction of translation systems. They should not
be interpreted as falsifiable claims about language or about human translation.
We will first enumerate the principles and
then discuss each of them in more detail.

\begin{enumerate}

\item Principle of Explicit Grammars. Both the source language 
and the target language are defined by explicit grammars.

\item Compositionality Principle. The grammars are organized in such a way that
the meaning of an expression is a function
of the meaning of its parts. 

\item One Grammar Principle. The same grammar is used for analysis and for
generation of sentences of a particular language.

\item Isomorphy Principle. Two sentences are considered translations of each
other if their meaning is derived in the same way from the same basic meanings.

\item Principle of Interlinguality. Analysis and generation components of
various languages map into and from the same intermediate language.

\end{enumerate}

\subsubsection{The Principle of Explicit Grammars}

 This first principle 
states that the Rosetta systems are based on explicit grammars
of both source language and target language. 

 It is widely accepted now that translation systems must make use
of a grammar of the source language. By means of such a grammar
the syntactic structure of the input sentences is made explicit. This is a 
minimal requirement for adequate translation. The alternative, word-by-word 
translation, usually yields bad results, even for related languages. For 
example, a sentence like {\em Does he love flowers?} might be translated 
word-by-word into {\em Doet hij beminnen bloemen?}, but also into {\em Doet hij 
liefde bloeit?}.

It is not yet common practice that translation systems make use of a completely 
explicit grammar of the target language.
In most cases the target language is - partially - defined indirectly, by
means of contrastive transfer rules that specify the differences
with the source language, in terms of surface structures, 
e.g. in METAL (Bennett and
Slocum, 1985), or in terms of deep structures, e.g. in 
GETA (Vauquois and Boitet, 1985) and TAUM-AVIATION 
(Isabelle and Bourbeau, 1985). 
We think it important to have
an independent criterion for correctness of the target text,
not only for reasons of theoretical elegance, but
also because of the intended interactive use of the
system. The interaction will be entirely in terms of the source
language. In applications where no additional post-editing of the target text
is possible,
the quality of the generated target text is very important. Note that this
does not only concern the syntactic
quality of the output, but primarily the semantic quality, i.e.
the extent to which the output text means the same as the input text.


\subsubsection{The Compositionality Principle}
 The  Compositionality Principle, adopted in the field of Montague Grammar 
(cf. Thomason, 1974 and Dowty et al, 1981), can be expressed  
as follows (cf. Partee, 1984):
   The meaning of an expression is a function of the meaning of its parts and of
   of the way they are syntactically combined.

 Obviously, following this principle will lead to
an organization of the syntax that is strongly 
influenced by semantic considerations. As preservation of meaning is an
important criterion for correct translation,
this is a useful guiding principle in machine translation.

We will illustrate the Compositionality Principle and the other principles by 
means of an extremely simple - and rather informally presented - example 
of a Montague 
grammar. In this way we hope to convey the basic ideas of the Rosetta approach 
without introducing too many technical details. In section 2.2 we will 
describe in what respects the grammar formalism that is actually used in 
Rosetta is different. \\

The {\bf syntactic component} of a Montague grammar specifies (i) a set of 
basic expressions and (ii) a set of 
syntactic rules. The basic expressions are the smallest meaningful 
units, the syntactic rules define how larger phrases and ultimately sentences 
can be constructed, starting with the basic expressions. The rules are applied 
in a compositional (`bottom-up') way.\\

A simple example grammar, G1:\\

The {\bf basic expressions} are: the noun {\em car} and the intransitive verb {\em 
pass}, more formally: the expressions N({\em car}) and V({\em pass}).\\

The {\bf rules} are:\\

\(R_{1}\): this rule is applicable to an expression of the 
form N($ \alpha $) and makes 
an indefinite noun phrase of the form NP({\em a} $ \alpha $). ($ \alpha $ is an arbitrary 
string)\\

\(R_{2}\): this rule has two arguments, the first one must be a noun phrase, of the 
form NP($ \alpha $), the second argument must be an intransitive verb of the form 
V($ \beta $). The result of applying the rule is a sentence in the past tense, 
of the form S($ \alpha $ $ {\beta}{\em ed} $ ).\\

If \(R_{1}\) is applied to the basic expression N({\em car}), the result is NP({\em 
a car}).\\

If \(R_{2}\) is applied to NP({\em a car}) and V({\em pass}), the result is
the sentence S({\em a car passed}).\\

The process of deriving a sentence from basic expressions by recursive 
application of rules can be made explicit in a {\bf syntactic derivation tree}. 
In fig. 1 the syntactic derivation tree of the sentence S({\em a car passed}) 
is given.\\


\begin{figure}[t]
  \begin{verbatim}



 S(a car passed)- - - - - - - - - -  R2
                                     /\
                                    /  \
                                   /    \
 NP(a car) - -- - - - - - - - -   R1   V(pass)
                                  |
                                  |
                                  |
                               N(car)

\end{verbatim}
\caption{\em Syntactic Derivation Tree of {\em a car passed}}
\end{figure}

 On the basis of the given definitions 
a function GENERATOR can be defined which operates on
an arbitrary syntactic derivation tree (a tree 
labelled with names of rules and 
basic expressions) and yields a set of sentences by applying the rules 
in the syntactic derivation tree.
If the derivation tree is not well-formed, 
i.e. if not all rules are applicable, this set is 
empty.\\



The {\bf semantic component} of a Montague grammar assigns a semantic interpretation 
to the language as follows. 

First, a semantic domain is defined, consisting of 
individual entities, truth values, special indices and functions defined in 
terms of these objects.

Basic expressions 
and syntactic rules are interpreted in terms of the semantic 
domain; each basic expression is associated with an object in the domain (e.g. 
an individual, a function from individuals to truth values, etc.) and with each 
rule an operation on objects in the domain (e.g. function application) is 
associated. The semantic value of an arbitrary expression is then defined with 
the help of the syntactic derivation tree. In parallel with the application of 
the syntactic rules the semantic operations associated with these rules are 
applied to the semantic values of their arguments, starting with the values of 
the basic expressions. The final result is the semantic value of the complete 
expression. So the process of derivation of the semantic value runs parallel 
with the syntactic derivation process and can be represented in a tree with the 
same geometry as its syntactic derivation tree, but which is labelled by names 
of semantic values and semantic operations. This representation is called a 
{\bf semantic derivation tree}. If we assume that the rules of our example 
grammar correspond to meaning rules, named $ M_{1} $ and $ M_{2} $, and the basic 
expressions correspond to meanings {\em car'} and {\em pass'}, the relation 
between syntactic and semantic derivation tree is as in fig. 2. \\



\begin{figure}[t]
  \begin{verbatim}



      R2                               M2
      /\                               /\
     /  \                             /  \
    /    \                           /    \
   R1   V(pass )                    M1    pass'
   |                                |
   |                                |
   |                                |
  N(car)                           car'

\end{verbatim}
\caption{\em Syntactic Derivation Tree of {\em `a car passed'} and corresponding 
semantic derivation tree}
\end{figure}


We will allow basic expressions to have more than one meaning (basic 
expressions will usually represent words, not word meanings);
 because of this 
there is in general a set
of semantic derivation trees corresponding to a syntactic derivation tree.
On the other hand, 
a basic meaning may correspond to various basic expressions and 
a meaning rule may correspond to various syntactic rules; so there is
in general a set of syntactic derivation trees corresponding to each
semantic derivation tree. But in the example we assume that there is a 
one-to-one relation.\\

As we will see later, in the Rosetta system the semantics of the rules is never 
made explicit. But for the purpose of illustrating the idea of compositional 
semantics, we will specify the semantics of grammar G1 by means of a logical 
language, which itself should be interpreted in the usual way.
\\



{\em car' } is a property of individuals (equivalently: a set of individuals),
 i.e. the property `being a car'. In a logical language {\em car'} is a 
one-place predicate.\\

{\em pass' }  is also a property of individuals, i.e. the property `passing'.
In a logical language {\em pass'} is a one-place predicate.\\

$ M_{1} $ operates on a property  and yields the set of properties that some
individuals with that property  have; so $ M_{1} $ is a function from 
properties to truthvalues. Expressed in logic: the result of 
applying $ M_{1} $ to {\em car'} is:\\

             $    \lambda  P  \exists  x: car'(x) \Rightarrow  P(x) $\\

$ M_{2} $ operates on a function from properties to truth values F
 and a property P and applies F to P.
In our example, we apply the above-mentioned function to {\em pass'},
the result (after $ \lambda $ -reduction) is the logical expression: \\


             $      \exists  x: car'(x) \Rightarrow  pass'(x) $,\\

the representation in logic of the meaning of {\em a car passed} (ignoring
the semantics of the past tense).\\


 
\subsubsection{The One Grammar Principle}
 The One Grammar Principle (or: Reversibility Principle) 
states that one and the same grammar is used 
for defining both the
generation component and the analysis component of a language. In other
terms, we require the compositional grammar defined above to be `reversible'.
 Because of this principle the grammars have to obey certain conditions. 
The first
condition is that for 
each compositional syntactic rule there must be a reverse  analytical
rule. \\

For example grammar G1 (in section  2.1.2) the reverse rules would be:\\

\(R_{1}\)': the rule is applicable to an expression of the form 
NP({\em a} $ \alpha $) and yields an expression of the form N($ \alpha $).\\

\(R_{2}\)': the rule is applicable to an expression of the form
S($ \alpha $ $ {\beta}{\em ed} $ ) and yields two expressions, the first one
 of the 
form NP($ \alpha $), the second one of the form 
V($ \beta $).\\

If we apply \(R_{2}\)' to the sentence S({\em a car passed}), the result
is the pair NP({\em a car}), V({\em pass}) .

If we apply \(R_{1}\)' to NP({\em a car}), the result is N({\em car}). 

An 
analysis is successful if it is able to reduce the sentence to basic 
expressions, as in this example. 
The analysis process can be made explicit in a derivation 
tree, which is the same as the one of Fig. 1.\\

 In the previous section we have seen that for a grammar based on
the Compositionality Principle an effective function GENERATOR
can be defined,
which maps syntactic derivation trees into sets of sentences. If the One
Grammar Principle is obeyed, the reverse function PARSER
can be defined which
yields for a sentence the set of syntactic derivation trees.

Note that for more elaborate grammars than in our example PARSER may yield 
more than one syntactic derivation tree. Then the input sentence is 
syntactically ambiguous.\\

PARSER is an effective function, thanks to a second condition on grammars, the 
{\bf measure condition}, which - informally stated - prescribes that the results of 
compositional rules are `bigger' than their inputs. Thanks to this the 
recursive application 
of analytical rules leads to ever 
smaller expressions and must come to an 
end after a finite number of steps.\\


 In addition to theoretical motives (the idea that there is one notion of
language, neutral with respect to generation and analysis),
there are economic motives for adopting the One Grammar Principle.
If we plan to make translation systems
that translate both from and into a particular language, it is 
efficient if these systems can be based on one grammar.\\


 Before discussing the Isomorphy Principle it is good to 
notice that translation
systems can be defined on the basis of 
the three principles discussed up till now, as follows:

- Write compositional  grammars for two or more languages,

 - Each grammar defines an analysis component and a generation component
in the way described before, which relate sentences and syntactic 
derivation trees.

 - For each language pair: define a transfer component which transforms
derivation trees of the source language (SL) into derivation trees of
the target language (TL).

 - The composition of the analysis component for SL, the
 transfer component from SL to TL, and the generation
component for TL yields a translation system from SL into TL, as
outlined in figure 3.\\


\setlength{\unitlength}{1 em}
\begin{figure}
\begin{picture}(40,25)

\put(12,0){\framebox(10,5)}
\put(2,10){\framebox(10,5)}
\put(22,10){\framebox(10,5)}

\put(5,12){\shortstack{ PARSER}}
\put(23.5,12){\shortstack{ GENERATOR}}
\put(14.5,2){\shortstack{ TRANSFER}}

\put(5,21){\shortstack{source \\ language}}
\put(25,21){\shortstack{target \\ language}}
\put(7,17){\makebox(0,0)[b]{sentence}}
\put(27,17){\makebox(0,0)[b]{sentences}}
\put(7,7){\makebox(0,0)[b]{Syntactic derivation trees}}
\put(27,7){\makebox(0,0)[b]{Syntactic derivation trees}}


\put(7,2){\vector(1,0){4.5}}
\put(22,2){\line(1,0){5}}
\put(7,2){\line(0,1){4.5}}
\put(7,7.5){\line(0,1){2.5}}
\put(27,2){\line(0,1){4.5}}
\put(27,7.5){\vector(0,1){2.5}}

\put(7,16.5){\vector(0,-1){1.5}}
\put(27,15){\line(0,1){1.5}}
\put(7,19.5){\line(0,-1){1.5}}
\put(27,18){\vector(0,1){1.5}}


\end{picture}
\caption{\em Global design of transfer system}
\end{figure}


          
 This is a possible approach, but it has two disadvantages: (1)
in general rather complex structural transfer will be necessary;
it may be difficult to organize this in a transparent way, (2) it
is hard to ensure that after transfer the resulting derivation
tree (or at least {\em one} of the resulting derivation trees) 
is well-formed. The rules need not be applicable. 
So, if a sentence is generated, it will be a correct sentence of TL, but
the generation 
component may act as a filter and then no translation will be generated.
The Isomorphy Principle is a way to tackle this problem.  

\subsubsection{The Isomorphy Principle}
  This principle, which may also be called the Compositionality Principle
of Translation, states: two sentences are considered translations of
each other if their meanings are derived in the same way from
the same basic meanings. 

Apart from technical and practical considerations, the principle is attractive 
because it captures the intuition that a translation is something stronger than 
a paraphrase. \\

Having introduced the notions
of syntactic and semantic derivation tree this principle can be expressed
in a more technical way:

Two sentences are considered translations of
each other if they have the same semantic derivation trees, i.e.
corresponding syntactic derivation trees. A sentence and its translation
 are derived from corresponding basic expressions
by applying corresponding rules (where `corresponding' should be
interpreted as `with the same meaning').

 Following this principle 
comes down to attuning the grammars to each other in such a way that
for each basic expression in one grammar there is at least one 
corresponding basic expression in 
the other grammar with the same meaning and similarly for each 
rule in one grammar there is at least one 
corresponding rule in the other grammar. So, in the two grammars
there are corresponding sets of rules, related to the same meaning rule, and
corresponding sets of basic expressions, related to the same basic meaning.
Two grammars are called isomorphic if these corresponding sets of
rules obey certain applicability conditions.\\

 In a transfer system based on such {\bf isomorphic grammars} (cf. fig. 3 in 
section 2.1.3), the transfer
component becomes simple: rules and basic expressions 
of the source language are translated locally into sets of
corresponding rules and basic expressions. The translation is successful
if at least one of the resulting derivation trees is well-formed.
Guaranteeing that this is always the case, is not trivial, but
easier than in a system with structural transfer, as described
before.
 It may be interesting to make a comparison with the EUROTRA project
(Johnson et al, 1985, King and Perschke, 1987) 
at this point. Simple transfer has always been one of the objectives
of that project, but it is hard to realize this in an organization where 
the various language groups must be able to 
develop their grammars independently. In the Rosetta approach 
the requirement of simple transfer can be fulfilled because 
we are prepared to pay the necessary price: attuning the grammars of
the various languages to each
other.\\

 The Isomorphy Principle is the most characteristic principle of
the Rosetta approach.
One of its attractive aspects is the way in which
it combines with the Reversibility Principle:
the translation relation  can now be 
described in a completely compositional (`generative') way, while still
yielding an effective translation procedure, consisting of an analysis and a 
generation component. \\

We conclude this section by specifying an example grammar G2 for a fragment of 
Dutch, which is isomorphic to grammar G1.\\


Grammar G2:\\

The {\bf basic expressions} are the noun N({\em auto}) and the verb V({\em passeer}).

We assign them the meanings {\em car'} and {\em pass'} respectively.\\

The {\bf rules} are:\\

\(NR_{1}\): this rule is applicable to an expression of the form N($ \alpha $)
 and makes 
an indefinite noun phrase of the form NP({\em een} $ \alpha $). ($ \alpha $ is an arbitrary 
string) 

The corresponding meaning rule is $ M_{1} $.\\

\(NR_{2}\): this rule has two arguments, the first one must be a noun phrase, of the 
form NP({\em een} $ \alpha $), the second argument must be an intransitive verb of the form 
V($ \beta $). 

The result of applying the rule is a sentence 
of the form S({\em er} $ {\beta}{\em de} $ {\em een} $ \alpha $).

The corresponding meaning rule is $ M_{2} $.\\


This grammar can derive the sentence {\em er passeerde een auto}. The syntactic 
derivation tree is given in fig. 4. The semantic derivation tree is exactly 
the same as the one of fig. 2.


\begin{figure}[t]
  \begin{verbatim}



 S(er passeerde een auto)- - - - -   NR2
                                     /\
                                    /  \
                                   /    \
 NP(een auto)  - - - - - - - -   NR1   V(passeer)
                                  |
                                  |
                                  |
                               N(auto)

\end{verbatim}
\caption{\em Syntactic Derivation Tree of {\em `er passeerde een auto'}}
\end{figure}



\subsubsection{The Principle of Interlinguality}

 The Interlinguality Principle states that an intermediate
language IL is defined, into which analysis components of various (not 
necessarily all!) 
languages translate and from which the generation components of these
languages are able to translate. 
 
This principle is independent of the other principles. For example, a 
system with a natural language as intermediate language would obey it.
Such a system has obvious disadvantages: the intermediate language may cause 
new ambiguities and information may be lost. 

If we combine this principle with
the Principle of Isomorphy, it is obvious that the semantic
derivation trees constitute the intermediate language. The
main consequence is that the attuning
of the grammars is now done not just for two, but possibly
for a larger number of grammars.
Formally, the only difference with the system described in
2.1.2 is that the transfer component is split up into a component
A-TRANSFER and a component G-TRANSFER. In A-TRANSFER (analytical transfer)
a syntactic derivation tree is converted into a set of semantic derivation 
trees, by means of local translation rules 
following directly from the semantic component of the grammar.
G-TRANSFER (generative transfer) performs the reverse function.

This results in a system design as outlined in figure 5.\\

\setlength{\unitlength}{1 em}
\begin{figure}
\begin{picture}(40,35)
\put(15,0){\shortstack{Semantic \\ derivation \\ trees}}

\put(2,10){\framebox(10,5)}
\put(2,20){\framebox(10,5)}
\put(22,10){\framebox(10,5)}
\put(22,20){\framebox(10,5)}

\put(3.5,12){\shortstack{ A-TRANSFER}}
\put(23.5,12){\shortstack{ G-TRANSFER}}
\put(5,22){\shortstack{ PARSER}}
\put(23.5,22){\shortstack{ GENERATOR}}

\put(5,32){\shortstack{source \\ language}}
\put(25,32){\shortstack{target \\ language}}
\put(7,27){\makebox(0,0)[b]{sentence}}
\put(27,27){\makebox(0,0)[b]{sentences}}
\put(7,17){\makebox(0,0)[b]{Syntactic derivation trees}}
\put(27,17){\makebox(0,0)[b]{Syntactic derivation trees}}


\put(7,1){\vector(1,0){7.5}}
\put(19.5,1){\line(1,0){7.5}}
\put(7,1){\line(0,1){9}}
\put(27,1){\vector(0,1){9}}

\put(7,20){\line(0,-1){2}}
\put(7,16.5){\vector(0,-1){1.5}}
\put(27,18){\vector(0,1){2}}
\put(27,16.5){\line(0,-1){1.5}}

\put(7,30){\line(0,-1){2}}
\put(7,26.5){\vector(0,-1){1.5}}
\put(27,28){\vector(0,1){2}}
\put(27,25){\line(0,1){1.5}}


\end{picture}
\caption{\em Global design of interlingual system}
\end{figure}




An advantage of the interlingual
approach is that the collective tuning of grammars for a set of languages
results in a translation
system for each language pair from this set.
 Of course, a price has to be paid for this: tuning grammars to each
other becomes more difficult when the set of grammars becomes larger.
The main problem is that grammars of languages A and B and consequently
the translation from A into B,
may become more complex than necessary for A and B, 
because peculiarities of language C have
to be taken into account. One of the goals of the Rosetta project is
to find out how high this price is, for the languages Dutch, English
and Spanish. It should be stressed that the isomorphy and not the
interlinguality is the primary characteristic of our approach.

\subsubsection{Deviations from the principles}

 The before-mentioned principles guide us in designing translation
systems in a systematic way, but they are not interpreted as
dogmas. In fact, there are several reasons to deviate sometimes from the
principles in building practical systems. We will mention some of them:

 - It is inevitable that the Isomorphy Principle is violated for many
basic expressions. Corresponding words of two languages often have slightly
different meanings. Translation is not possible without some tolerance in
this respect. If the best possible translation of a word into the target 
language does not have exactly the same meaning, the best reverse translation
may be a different word. So then the Reversibility Principle is violated too.

 - The Principle of One Grammar will also be violated in a practical system,
because rules, or basic expressions, 
of which the only effect is the enlargement of 
the set of paraphrases in the target language, can better be eliminated from the
generation component.

 - Robustness measures are needed to deal with ill-formed input, unknown
words etc. They tend to be in conflict with several of the principles.

- In the previous subsection we already discussed some of the potential problems 
with the Interlinguality Principle, which may cause deviations. Especially the 
lexicon may cause problems.  \\




\subsection{M-grammars and global design}

In section 2.1 we discussed the basic properties of Rosetta for a very 
elementary kind of grammar. In reality grammar formalisms and 
grammars for natural language have 
to be more sophisticated. 

In the first place a separate morphological component 
is needed, in order to distinguish the detailed 
rules for word formation from the syntactic 
rules. Then these syntactic rules only have to specify the form of words in a 
formalized way, e.g. {\em number = plural} and do not have to bother about the 
exact form of the plural, which may depend on the form of the noun.

In the second place it is desirable that syntactic rules, operating on phrases 
and constructing new phrases, know the internal structure of these phrases and 
are able to change this internal structure, if necessary. Next to 
linguistic arguments, there are computational arguments to define the rules in 
a different way than we did in section 2.1 and in particular to 
describe the rules in a formal notation that can be interpreted 
automatically.

These considerations have led to the definition of 
 a linguistically powerful and 
computationally viable type of Montague grammars, called M-grammars.\\

Before we define M-grammars, we introduce the kind of expressions that the rules 
of M-grammars operate on: S-trees (surface trees).\\

An {\bf S-tree} is an ordered tree. The arcs of the tree are labelled by
syntactic relations, e.g. {\em subj} (subject), {\em obj}, {\em head}, etc.
The nodes of an S-tree are labelled by syntactic 
categories, e.g. SENTENCE, VP, VERB, NOUN, etc.,
 and by attribute-value pairs. For each syntactic category the set of 
corresponding attributes is defined. For each attribute the set of possible 
values is defined. E.g., one of the attributes for the category SENTENCE is
{\em mood}, of which one of the possible values is {\em declarative}.

An S-tree of a complete sentence is called a surface tree. 
A simplified
 example (without attribute-values),  is given in fig. 6. 
The leaves of a complete surface tree
correspond to words, in the original order. The word stems corresponding to 
these nodes are indicated by 
one of their attributes (the attribute {\em key}).

\setlength{\unitlength}{1em}
\begin{figure}[htbp]
\begin{picture}(40,20)

\put(13,20){CL\{deixis:past; aspect:imperfective;}
\put(15,19){mood:declarative; voice:active;...\}}

\put(13,19.5){\line(-1,-1){8.5}}
\put(13,19.5){\line(1,-1){8.5}}

\put(4,15){subject}
\put(19.5,15){head}

\put(2,10){NP\{person:3;}
\put(22,10){VP\{.....\}}
\put(4,9){number:sg;..\}}

\put(3,9.5){\line(0,-1){5.5}}
\put(23,9.5){\line(-1,-1){5.5}}
\put(23,9.5){\line(1,-1){5.5}}


\put(0,6){head}
\put(17.5,6){aux}
\put(27,6){head}

\put(1,3){PRONOUN\{key:he;}
\put(14,3){VERB\{key:be;}
\put(28,3){VERB\{key:work;}
\put(4.5,2){person:3;}
\put(17.5,2){person:3;}
\put(31.5,2){person:0;}
\put(4.5,1){number:sg\}}
\put(17.5,1){number:sg;}
\put(31.5,1){number:omega;}
\put(17.5,0){tense:Past\}}
\put(31.5,0){tense:Ingform\}}
\end{picture}
\caption{\em Simplified S-tree for the sentence {\em He was working}}
\label{S-tree}
\end{figure}

\bigskip

An {\bf M-grammar} consists of three components:
\begin{enumerate}
\item the syntactic component,
\item the semantic component,
\item the morphological component.
\end{enumerate}

\begin{enumerate}

\item[ad 1] The {\bf syntactic component} specifies:

\begin{itemize}
\item a set of basic expressions; these are S-trees that we want to consider as 
semantically primitive. Usually they correspond to word stems and consist of 
one node, but they may also be larger S-trees, e.g. if they correspond to 
idiomatic expressions. 

\item a set of syntactic rules, called {\bf M-rules}. An n-ary rule specifies an n-ary function, of 
which the arguments are S-trees and of which the result - if the rule is 
applicable - is an S-tree. The rules have `transformational power', i.e. 
they may perform powerful 
operations on S-trees. We will not discuss the - fairly complicated - 
notation of the M-rules in this report. The M-rules are reversible: for each 
generative rule there is an analytical rule, which describes the reverse
function. The rule notation supports this: the major part of the rule has to be 
written only once for both analysis and generation.

\end{itemize}

Starting from basic S-trees, surface trees of 
sentences are derived by recursive application of M-rules.
Note that this is completely 
analogous to the definitions in section 2.1, 
except that the expressions are now 
S-trees. Just like in 2.1 syntactic derivation trees represent the process of 
applying syntactic rules. 

\item[ad 2]  The {\bf semantic component} is defined in a way completely 
analogous to section 2.1. There is the same correspondence between syntactic 
derivation tree and semantic derivation tree.

\item[ad 3] The {\bf morphological component} accounts for the relation between
lexical S-trees (i.e. S-trees corresponding to words) and their representation 
as a symbol string. It makes use of (i) segmentation rules which 
define how words 
(as strings) can be composed of stems and affixes, (ii) a dictionary that 
relates the stems to lexical S-trees, which carry morphological information 
about the stem, (iii) W-rules which compose a lexical S-tree for the complete 
word from the basic lexical S-tree and the affixes. Some other phenomena, e.g. 
contraction of words, are dealt with too.

The Reversibility Principle holds also for the morphological rules: they can be 
used for analysis and generation.
\end{enumerate}

The three components of an M-grammar define three analysis functions and three 
generation functions in a straightforward way:

\begin{itemize}

\item The morphological component defines an analytical function 
{\bf A-MORPH}, which converts a word (a string) into a set of lexical S-trees,
 and a generative function {\bf G-MORPH}, which converts a lexical S-tree into 
a set of strings.

\item The syntactic syntactic component defines an analytical function
 {\bf M-PARSER}, which converts an S-tree (the surface tree of the sentence) 
into a set of syntactic derivation trees (by applying analytical M-rules), 
and a function 
{\bf M-GENERATOR}, which converts a syntactic derivation tree into a set of 
surface trees (by applying the generative M-rules in the derivation tree). 
These functions are analogous to the functions PARSER and GENERATOR of section
2.1.3, but the difference is that they operate on (resp. produce) S-trees
instead of strings.

\item The semantic component defines an analytical function {\bf A-TRANSFER}, 
which converts a syntactic derivation tree into a set of semantic derivation 
trees, and a generative function {\bf G-TRANSFER}, which converts a semantic 
derivation tree into a set of syntactic derivation trees. 
These functions are completely analogous to the ones in section 2.1.5.

\end{itemize}

Note that M-PARSER requires a surface tree of the complete sentence as input, while 
A-MORPH produces a representation of 
the sentence as a sequence of lexical S-trees. For making 
the connection between the two, we need an additional component, called 
S-parser (surface parser).

\begin{itemize}

\item {\bf S-PARSER} converts a sequence of lexical S-trees (a sentence) into a 
set of surface trees of the whole sentence. These surface trees are S-trees of 
which the leaves are the lexical S-trees in the original order. The 
rules of S-PARSER, called surface rules, are much simpler than M-rules.
 The set of surface trees that S-PARSER produces should contain the 
correct surface tree(s) of the input sentence, but it may also contain 
incorrect surface trees. They will be filtered out by the subsequent M-PARSER.

The existence of a set of surface rules that define a `superset' of the surface 
trees defined by the M-rules, is the third condition on M-grammars (in addition 
to the reversibility condition and the measure condition).

The generative counterpart of S-PARSER is the function {\bf LEAVES}. This is a 
trivial function, which maps a surface tree onto the sequence of its leaves,
the lexical S-trees.

\end{itemize}

Summarizing, an M-grammar defines 
four analysis components:
A-MORPH, S-PARSER, M-PARSER and A-TRANSFER, and four generation components:
G-TRANSFER, M-GENERATOR, LEAVES and G-MORPH.

The combination of the analysis components of a source language and the 
generation components of a target language 
results in the design of the Rosetta translation system as represented in 
fig. \ref{globdesign}.



\setlength{\unitlength}{1 em}
\begin{figure}
\begin{picture}(40,45)
\put(15,0){\shortstack{Semantic \\ derivation \\ trees}}

\put(2,5){\framebox(10,5)}
\put(2,15){\framebox(10,5)}
\put(2,25){\framebox(10,5)}
\put(22,5){\framebox(10,5)}
\put(22,15){\framebox(10,5)}
\put(22,25){\framebox(10,5)}
\put(2,35){\framebox(10,5)}
\put(22,35){\framebox(10,5)}

\put(3.5,7){\shortstack{ A-TRANSFER}}
\put(23,7){\shortstack{ G-TRANSFER}}
\put(4.5,17){\shortstack{ M-PARSER}}
\put(22.5,17){\shortstack{ M-GENERATOR}}
\put(4,37){\shortstack{ A-MORPH}}
\put(24,37){\shortstack{ G-MORPH}}
\put(4,27){\shortstack{ S-PARSER}}
\put(25,27){\shortstack{ LEAVES}}

\put(5,46){\shortstack{source \\ language}}
\put(25,46){\shortstack{target \\ language}}
\put(7,43){\makebox(0,0)[b]{sentence}}
\put(27,43){\makebox(0,0)[b]{sentence}}
\put(7,32){\makebox(0,0)[b]{lexical S-trees}}
\put(27,32){\makebox(0,0)[b]{lexical S-trees}}
\put(7,12){\makebox(0,0)[b]{Syntactic derivation trees}}
\put(27,12){\makebox(0,0)[b]{Syntactic derivation trees}}
\put(7,22){\makebox(0,0)[b]{Syntactic surface trees}}
\put(27,22){\makebox(0,0)[b]{Syntactic surface trees}}


\put(7,1){\vector(1,0){7.5}}
\put(19.5,1){\line(1,0){7.5}}
\put(7,1){\line(0,1){4}}
\put(27,1){\vector(0,1){4}}

\put(7,15){\line(0,-1){2}}
\put(7,11.5){\vector(0,-1){1.5}}
\put(27,13){\vector(0,1){2}}
\put(27,11.5){\line(0,-1){1.5}}

\put(7,25){\line(0,-1){2}}
\put(7,21.5){\vector(0,-1){1.5}}
\put(27,23){\vector(0,1){2}}
\put(27,21.5){\line(0,-1){1.5}}

\put(7,35){\line(0,-1){2}}
\put(7,31.5){\vector(0,-1){1.5}}
\put(27,33){\vector(0,1){2}}
\put(27,31.5){\line(0,-1){1.5}}

\put(7,42.5){\vector(0,-1){2.5}}
\put(27,40){\vector(0,1){2.5}}

\end{picture}
\caption{\em Global design of the Rosetta system}
\label{globdesign}
\end{figure}



\subsection{Controlled M-grammars}

At the highest level, as described in the previous section, the Rosetta system 
is similar to its predecessor Rosetta2, but at the level of the components 
many changes have been made in the course of the project. Describing these
changes in detail would make this report too technical. 
Here we only enumerate the most 
important changes. However, despite this brief presentation
 it should be noted that the definition of the 
revised 
formalisms and their implementation have been a very 
substantial part of the activities in the first phase of the project.
In fact, it led to a completely new implementation of the  Rosetta system.

\begin{itemize}

\item For all kinds of linguistic information in Rosetta, we devised 
special-purpose specification languages. This holds for the definition of 
possible S-trees, for morphological rules, for surface syntax rules, for 
M-rules, for dictionary entries, etc. 

\item The morphological component has been improved and extended, in
particular for being able to deal with morphological derivation and not only 
with inflection, as in Rosetta2.

\item The dictionaries in the system have been organized in a more systematic 
way. Cf. section 2.4.

\item The most fundamental changes have been made in the syntactic component
of M-grammars. These changes resulted in a revised grammar formalism, 
controlled M-grammar, which will be discussed in some more detail here.

\end{itemize}


{\bf Problems with the M-grammar formalism}\\

The M-grammar formalism outlined above is
simple and mathematically elegant, but
it has a number of deficiencies, which may cause
problems,
especially in a situation where large grammars have to be written by
a group of people. Three kinds of problems can be distinguished.

\begin{enumerate}
\item [1.] {\bf Lack of structure in M-grammars} \\
Grammars for natural languages are very large and inherently complex. 
In an M-grammar the syntactic component specifies a set 
of rules without any internal structure. Although the mathematical elegance of 
free production systems is appealing, they are less suited for large grammars.
 As the number of rules grows, it 
becomes more and more desirable 
that the syntax be subdivided into parts with well-defined
tasks and well-defined interfaces with other parts. 

This holds in particular if the grammars are developed by a group of
people. It is necessary to have an explicit division of tasks and to
coordinate the work of the individuals in a
flexible way so that the system will be easy to modify, maintain and extend.

In computer science it is common practice to divide a large task into subtasks
with well-defined interfaces. This is known as the {\bf modular approach}. This
approach has gained recognition in the field of natural language processing
too (cf. Isabelle and Macklovitch, 1986 and Vauquois and Boitet, 1985). 
The question is how such a modular approach can be applied in a compositional
grammar, in an insightful
and linguistically motivated way.

\item [2.] {\bf Lack of control on rule applications} \\
In many cases the grammar writer has a certain ordering of
the rules in mind, e.g. he may want to express that the rules for inserting
determiners during NP-formation should be applied after the rules for inserting
adjectives. In the M-grammar formalism explicit ordering is 
impossible, but the rules can be ordered implicitly by characterizing
the S-trees in a specific way, e.g. by splitting up a syntactic category
into several categories, and
by giving the rules applicability conditions which guarantee that the
aspired ordering is achieved. 
However, this leads to a proliferation of
rather unnatural categories. 

In addition to linear ordering one may want to add other means of
controlling the application of rules, e.g. one may want to make 
a distinction between
obligatory, optional
and recursive rules.
In M-grammars all rules are optional and potentially recursive. 

A problem that is related to the lack of control on rule applications, is the 
difficulty to obey the measure condition (cf. 2.1.3). It is hard to define one 
measure such that all generative M-rules make larger expressions according to 
this measure.

\item [3.] {\bf Lack of structure in the translation relation} \\
As we have explained in section 2.1.4, the translation relation between languages
is defined by attuning the
grammars to each other. For larger grammars and especially for difficult
translation problems like category mismatch (i.e., a word of the source language is 
translated into a word of the target language with a different category), 
a more systematic way of attuning grammars is needed, but this is not supported 
by the M-grammar formalism.\\

Another problem is caused by the fact that in the isomorphic grammar framework
each syntactic rule of one grammar 
must correspond to at least one rule of another grammar. 
For rules that contribute
to the meaning this is exactly what we want,
but there is a problem with rules that are only
relevant to the form of the sentence and that carry no translation-relevant
information, especially if they are language-specific.
It would be better if 
the correspondence between rules as required by the Isomorphy Principle
would have to hold for meaningful rules only. The translation relation 
would then be defined in terms of a reduced derivation tree, which is labelled
with meaningful rules. The generation component (M-GENERATOR)
will operate on such a reduced tree and will have to decide what syntactic 
transformations are applicable at what point of the derivation. 
This requires again some way of controlling the applicability of the 
transformation rules.
\end{enumerate}

Controlled subgrammars solve these problems as follows:


\begin{enumerate}
\item Grammars are divided into {\bf subgrammars}, each with a well-defined 
linguistic task. For each subgrammar it is defined explicitly 
what is visible to other subgrammars ({\bf export}) and what is used 
from other subgrammars ({\bf import}).

\item We distinguish purely syntactic rules called
{\bf transformations}, that do not  and {\bf meaningful rules} that do carry 
translation relevant information.

\item The set of M-rules of
the grammars are divided into groups called {\bf rule classes}, each of which
handles some linguistic phenomenon. These rule classes are subdivided into 
transformation classes and meaningful rule classes.
A meaningful rule class handles a 
linguistic phenomenon of which the semantics should be preserved
during translation. 

\item The application of M-rules can be controlled by means of {\bf control 
expressions}, regular expressions on rule classes. If a rule has more than one 
argument, this control relates to one specific argument, called the 
{\bf head}. Thanks to this way of controlling rule applications,
we no longer need one measure for all rules, but only `local measures' for 
recursive rule classes.

\end{enumerate}

This leads to the following definition of the syntactic component of 
a controlled M-grammar, as it is actually used in Rosetta3.\\

A {\bf controlled M-grammar} has a syntactic component which specifies 
\begin{enumerate}
\item[1.] a set  of basic S-trees,
\item[2.] a set of subgrammars, 
\end{enumerate}


A {\bf subgrammar} G$_{i}$ consists of:
\begin{itemize}

 \item a set EXPORTCATS$_{i}$ of syntactic categories (the categories of S-trees that
can be exported).

\item a set IMPORTCATS$_{i}$ of syntactic categories (the categories of other
S-trees that may be imported). A subset of this is HEADCATS$_{i}$,
(the categories of S-trees
that are allowed as head arguments).


\item a set of M-rules, subdivided into a set of meaningful rules and
a set  of transformation rules. The `head' is always the first 
argument of a rule.

\item a control expression ce$_{i}$, 
which indicates what sequences of rule applications are
possible, from imported head to exported result.  (The ordering of the rules 
concerns the head arguments)
\end{itemize}
\bigskip

The {\bf control expression} 
indicates what the rule subclasses are, how they are 
ordered, what rules they consist of, and whether they are recursive, optional
or obligatory. 
A control expression ce has the following form:

ce = A$_{0}$ . A$_{1}$ . $\ldots$ . A$_{n}$, 

where each A$_{i}$ is a rule 
subclass, either a meaningful rule class or a transformation class.

A rule class A$_{i}$ may be

- obligatory: written as ( R$_{1}$ $|$ $\ldots$ $|$ R$_{k}$ ), 
where
the R$_{i}$ are either meaningful rules or transformations.

- recursive: written as \{ R$_{1}$ $|$ $\ldots$ $|$ R$_{k}$ \},

- optional: written as [ R$_{1}$ $|$ $\ldots$ $|$ R$_{k}$ ].
\bigskip

An example:
\begin{quote}
(R$_{1}$) . [ R$_{2}$ $|$ R$_{3}$ ] . \{ R$_{4}$ $|$ R$_{5}$ \} . $($ R$_{6}$ 
$|$ R$_{7}$ $)$
\end{quote}
This control expression defines all sequences beginning with R$_{1}$, then
 R$_{2}$ or R$_{3}$ or neither, then an arbitrarily long sequence (possibly
empty) of  R$_{4}$ or  R$_{5}$, then either  R$_{6}$ or  R$_{7}$.
\bigskip

Obviously, the definition of the functions {\bf M-PARSER} and {\bf M-GENERATOR}
has to be adjusted too. Cf. Appelo et al, 1987, for the detailed definition.
 
\subsection{Dictionaries}

From a conceptual point of view the Rosetta system makes use of the following 
dictionaries.

\begin{itemize}

\item MORPH-DICT: this relates a word stem (its symbol string) to a morphological key.
This key is the unique name of its morphological properties.

\item MORPH-LEX specifies for each morphological key the corresponding morphological
properties in the form of attribute-value pairs.

\item S-DICT relates morphological keys to syntactic keys. A syntactic key is the 
unique name for the set of syntactic properties of the word. 

\item S-LEX specifies for each syntactic key the corresponding syntactic properties 
in the form of attribute-value pairs.

\item IL-DICT relates syntactic keys to semantic keys of the intermediate language. A 
semantic key represents a meaning. 

\item IL-LEX specifies for each semantic key the corresponding semantic properties. 

\end{itemize}

There are three special dictionaries:
\begin{itemize}

\item ID-DICT: a dictionary for `flexible' idiomatic expressions.
\item FIXED-ID-DICT: a dictionary 
for 'fixed' idiomatic expressions.

\item SEMI-ID-DICT: a dictionary for semi-idioms.

\end{itemize}

MORPH-DICT, S-DICT and IL-DICT specify relations between different levels of 
the system. MORPH-LEX, S-LEX and IL-LEX specify information that is needed at 
each level. For analysis and generation the same dictionaries are used, but 
it is possible to indicate in a dictionary entry that it should be used only 
during analysis or only during generation. E.g. if a noun has two plural forms, 
one of which is frequent, and the other form is possible but unusual, both 
forms are accepted by the analysis component, but the generation component will 
only use the first form.\\

In the current implementation the dictionaries S-LEX and MORPH-LEX are merged, 
mainly because of historical reasons. The distinction between morphological 
keys and syntactic keys in S-DICT 
is only made in some special cases, for example:
Dutch verbs with the same stem but with different particles, e.g. {\em 
opgaan, ondergaan, afgaan} all have the same morphological key, for {\em gaan}, 
but different syntactic keys. In this way superfluous ambiguities during 
morphological analysis can be avoided.\\

IL-LEX is not used at the moment, it will be used in the next version of 
Rosetta which should contain knowledge about a specific domain.\\


Some more information about these dictionaries:\\

MORPH-DICT. The relation between the stem and the morphological key may be 
conditional. E.g., the morphological key of the English indefinite article 
corresponds to {\em an} under the condition that the next word begins with a 
vowel sound, otherwise it corresponds to  {\em a}.
Because these `context conditions' concern the pronunciation of words, 
MORPH-DICT 
contains phonetic information about the stems. This phonetic information 
is also useful for the morphological rules, in particular for Dutch.\\

S-LEX. The main syntactic attribute is the syntactic category. For a given 
category the other attributes are fixed. E.g., the most important syntactic 
attributes of the category VERB in the Dutch S-LEX are:

\begin{itemize}

\item Thetavp (vp stands for verb pattern). This attribute indicates the number 
of arguments of the verb and the standard position of these arguments. It has 
the values vp000 (for verbs without arguments like  {\em to rain}), vp100 (
ordinary intransitive verbs), vp010 (mainly ergative verbs with one argument), 
vp120 (ordinary transitive verbs), vp012 (two-place ergatives), vp123 (
ditransitive verbs).

\item Synvps. This attribute has a set of values. Each value indicates a 
possible syntactic realisation of the arguments, e.g. as NP or as PP. It also 
indicates whether an argument is optional.

\item Prepkey1, prepkey2. These attributes have the syntactic key of a 
preposition as their value. If synvps indicates that an argument requires a 
preposition, it is specified here what the key of the preposition is.

\item Controller. This indicates what the controller is for verbs with a 
complement clause. E.g., for {\em to promise} it is the subject.

\item Clustering. Indicates whether the verb may cause `clustering' of verb and 
complement-infinitive.

\item Reflexivity. Indicates whether the verb is reflexive.

\item Voices. Indicates whether the active and/or the passive voice are 
possible.

\end{itemize}

IL-DICT contains for each pair (syntactic key, meaning key) a short meaning 
description (from Van Dale Dutch-English); 
this is used for interactive disambiguation. IL-DICT is used in the components 
A-TRANSFER and G-TRANSFER.\\

ID-DICT. This  dictionary specifies idioms,
expressions consisting of more than one word of which the meaning cannot be 
derived compositionally from the parts, e.g. {\em de kroon spannen}
 or {\em to pull one's leg}.
Inside the Rosetta system, idiomatic expressions
  are represented as syntactic trees.\\
ID-DICT is filled by specifying for each idiom:

- the idiom class

- the syntactic keys of the content words in the idiom,

- the syntactic key of the idiom as a whole.

The idiom class defines the internal syntactic structure of the idiom, 
including the positions of the free arguments. The idiom class and the keys of 
the content words together give the system all information needed for 
constructing the syntactic tree. ID-DICT is used in M-GENERATOR and M-PARSER.\\

FIXED-ID-DICT contains `fixed' idiomatic expressions. They  
consist of two or more  words, but the difference with the idioms in ID-DICT is 
that their syntactic structure is not relevant.
They occur always in the same order and are 
never interrupted by other words, e.g. {\em in staat}, {\em with respect to}. 
They can be treated as though 
they are simple words. 
FIXED-ID-DICT is used in the morphological component.\\

SEMI-ID-DICT. 
Semi-idioms are expressions like {\em make a decision}, which do have a
compositional semantics, but which have a main verb with a rather vague
meaning, of which the actual meaning (and therefore the translation) depends on
the direct object. For example, {\em een besluit nemen} becomes {\em make a
decision} and {\em een bad nemen} becomes {\em have a bath}.
This dictionary indicates what pairs of verb and object 
noun are semi-idioms.




\subsection{The components of the Rosetta system}

In the previous sections we showed how the design of the system (fig. 7) 
follows from the definition of isomorphic M-grammars.
The resulting system consists of four analysis components:
A-MORPH, S-PARSER, M-PARSER and A-TRANSFER, and four generation components:
G-TRANSFER, M-GENERATOR, LEAVES and G-MORPH.
In this section we discuss these components once more, but now in the order 
of processing. 


\begin{itemize}

\item  {\bf A-MORPH}. This module converts the words of the input phrase 
into lexical S-trees, by means of a dictionary for stems and morphological
rules for inflection and derivation.
If we ignore complicating details, A-MORPH consists of three parts:

\begin{enumerate}

\item Segmentation phase. In this phase the word is divided into a stem and 
affixes, in all possible ways, by application of segmentation rules.
Whether a string is a stem is decided by a look-up in MORPH-DICT. For example,
{\em bloemen} is segmented into {\em bloem} and {\em en}.

Often the segmentation phase produces more than one possible segmentation.
Some of the produced segmentations may be incorrect.

\item Dictionary phase. By looking up the key of a stem in 
MORPH-LEX / S-LEX lexical information about the stem is provided.

\item W-parser phase. By application of `W-rules' (word rules) the segmentation 
consisting of a stem (now with the data as provided by the lexicon) 
 and affixes is parsed to a lexical S-tree. The W-rules can filter out 
incorrect segmentations by making use of the lexical information about the 
stem.
In a lexical S-tree the derivational
structure of the word is made explicit and the inflection data are represented
in the form of features. E.g., the top node of the lexical S-tree of 
{\em bloemen} is a NOUN with {\em number = plural}.

\end{enumerate}

So A-MORPH produces a set of lexical S-trees for each word and as a 
consequence a set of sequences of S-trees for each sentence.

Actually, the morphological component is more complicated, because it also has 
to deal with phenomena 
such as attachment of
clitics (e.g {\em d\'{a}melo} in Spanish), contraction (e.g. {\em we'll} 
in English),
particle contraction (e.g. {\em opbellen} in Dutch) and context dependencies
(e.g. the use of {\em a} or {\em an} in English depends on the pronunciation of the
next word). 



\item {\bf  S-PARSER}. By this module the sentence, i.e. the 
sequence of lexical 
structures, is parsed, by means of surface rules.
The result is a surface tree (S-tree), a constituent structure 
of which the leaves are the
lexical S-trees of the input sequence, in the original order.

The formalism used for the surface parser is a variant of the
Recursive Transition Network (RTN) formalism. 
The surface rules rewrite categories as regular
expressions of categories (terminals and
non-terminals). For example:

$cn  \Rightarrow  [adjp] noun \{ prepp \}$.


In addition, we have an attribute evaluation facility to 
specify, for all paths through the regular expression, how to calculate the
attributes of the category that is being defined. 

As a parsing algorithm the Earley parser is used, which is 
the most general parsing algorithm for context-free grammars.
In its conventional form, the Earley method can not directly be applied
to a grammar written as an RTN. For this reason, the RTN method is often
taken to imply a certain parsing strategy, which is different from the Earley
method. For ambiguous grammars, this strategy is not very efficient. However,
we found that the Earley method is flexible enough to be very well suited for 
parsing RTN grammars, including our surface grammar with its evaluation of
attributes.\\



The result of S-PARSER is a {\em set} of S-trees, possible surface trees of the input 
sentence. Whether they are {\em correct}
 surface trees will only be decided in the 
next component.
 
\item
{\bf M-PARSER}. This module analyses the surface tree by applying
analytical M-rules and transformations, 
which have the task to unravel the underlying syntactic 
structure of the sentence corresponding to its semantic structure.
Each successful parse produces a syntactic derivation tree,
of which the leaves are basic expressions and the other nodes are labelled
by the names of the M-rules that have been applied. 

M-PARSER may produce more than one syntactic derivation tree for an input 
S-tree, if it discovers an ambiguity that was not visible at the surface 
level. On the other hand it may filter out incorrect input S-trees. 
The result of M-PARSER is a set of syntactic derivation trees.




\item {\bf A-TRANSFER}. This module converts the syntactic derivation tree 
into a set of semantic derivation trees of the interlingua. The isomorphic grammar
approach of Rosetta requires that the grammars of different languages are attuned 
in such a way that they assign
similar syntactic derivation trees and identical semantic derivation trees
to sentences that are each other's translation. Thanks to this, the module
A-TRANSFER (and also G-TRANSFER) is relatively simple: 
the M-rules in the syntactic  derivation tree are replaced by semantic rules
and the basic expressions are replaced by basic meanings, by means of local
transfer rules.

\end{itemize}

\begin{itemize}

\item {\bf G-TRANSFER}. By this module a semantic derivation tree is 
converted 
into a set of syntactic derivation trees. 
A meaning rule in the semantic derivation 
tree is replaced by one or more syntactic M-rules of the target language 
and the basic meanings are replaced by
basic expressions of the target language.


\item {\bf M-GENERATOR}. The input of M-GENERATOR is a set of syntactic 
derivation trees. For each derivation tree, M-GENERATOR tries to apply the 
rules in the tree and also syntactic transformations, in the way indicated by 
the control expressions of the subgrammars. A successful application of M-
GENERATOR to a syntactic derivation tree yields one or more surface trees.


\item {\bf LEAVES}. This component converts a surface tree into a sequence of 
lexical S-trees
which are the leaves of the surface tree, i.e. the subtrees with specific word 
categories at the top.



\item {\bf G-MORPH}. The lexical S-trees are converted into words (strings) by
applying morphological rules. The result is a sentence of the target language.

G-MORPH is the mirror image of A-MORPH. Because in G-MORPH the dictionary
information is available right from the start (in the lexical S-tree to
which G-MORPH is applied), G-MORPH can operate in practice in 
a more deterministic way than A-MORPH. (There may be ambiguities, but false
paths are rare.) \\

The three phases of G-MORPH are:
\begin{enumerate}

 \item  W-generator phase. The lexical S-tree is converted into rows
of basic S-trees and affixes by means of generative
W-rules. E.g. the lexical S-tree for {\em flowers} is split up into the basic S
-tree for {\em flower} and the suffix {\em s}.

 \item The string corresponding to the basic S-tree (e.g. {\em flower}) 
is looked up in the
dictionary. As the key of the basic S-tree is already in the S-tree itself,
only the transition from key to string requires an explicit look-up, 
in MORPH-DICT. 

\item The generative segmentation rules (which are the reverse of
       the corresponding analytical rules) join the stem and the affixes
to one word (e.g. {\em flowers}).

\end{enumerate}

\end{itemize}

\newpage

\section{Rosetta environment}

\subsection{Introduction}

\newcommand{\ROSE}{{\sf RosE}}
\newcommand{\RBS}{{\sf RBS}}

In section 2 the underlying ideas and design of Rosetta have been introduced.
We have seen that the tasks of the Rosetta modules follow from the definition 
of  M-grammars. These tasks are defined in a mathematical  formalism and 
consist of two parts: a set of linguistic rules and/or dictionary entries, to 
which we refer with the term {\bf lingware}, and a specification of the way in 
which these rules and lexicons are applied by some algorithm. These two parts 
are always clearly separated, the algorithms are independent of any particular 
language. The implementation of the algorithms from the 
specifications is in some cases (A-TRANSFER, G-TRANSFER)
fairly straightforward, in other cases (S-PARSER, A-MORPH, G-MORPH) it requires 
a large effort, especially to arrive at sufficiently efficient implementations.
We will not discuss these implementations in the report.
The reason for this is that 
we want this report to be self-contained 
and rather non-technical, as we explained in the introduction. 
As a consequence, very little  attention can be 
paid to the detailed formal definition of the Rosetta components and - 
to the work that was involved in their implementation. This should not obscure 
the fact that this was one of our major activities.

Other important activities were the creation of software for translating the 
lingware from the original linguistic notation into Pascal and of a number of 
software tools. 
 
Together this software constitutes the Rosetta environment \ROSE\ , one of the 
project's major results. 
\ROSE\ can be considered a development product in itself, which 
enables the user to
construct natural language translators for a large variety of language pairs.


Summarizing, \ROSE\ includes:

\begin{itemize}

\item The implementation of the algorithms for the modules of 
the Rosetta system (as in fig. 7): the four analysis modules 
A-MORPH, S-PARSER, M-PARSER and A-TRANSFER, and the four generation modules
G-TRANSFER, M-GENERATOR, LEAVES and G-MORPH. This also includes software for 
process management and process communication, file I/O, window handling, string 
manipulation and memory management.

\item The lingware compilers: programs that translate linguistic rules from 
their original notation into the programming language Pascal or data files.


\item The software management system \RBS\ .

\item Various software tools, e.g. debugging facilities, 
special editors that help to write correct lingware, and some tools for 
generating \LaTeX\ documents from the lingware.

\end{itemize}

In the next two subsections we will discuss the lingware compilers and \RBS\ in 
some more detail. 


\subsection{Lingware compilers}

At a low level, the Rosetta system is an assembly of modules written in Pascal
and data files. Also linguistic information is encoded in modules and data 
files. We have consistently tried to hide this implementation level from the
linguists. For each kind of linguistic information, we devised a 
special-purpose specification language. The information expressed in these
languages is called lingware, and is translated automatically into modules and 
data files. Below, each of the various types of lingware is briefly described.
\begin{itemize}
\item The set of possible of S-trees is defined. This includes a specification
        of sets of syntactic categories and relations, and for each category a 
        set of attributes, and for each attribute its possible values.
\item Morphological rules determine the possible ways to derive words from 
        stems and affixes. Two types of rules exist, W-rules and segmentation 
        rules (cf. section 2.5). 
        Segmentation rules operate on strings and combine word segments.
        A typical rule is
 
        *aas + SFKen :: *azen

        Interpreted in a generative way, the rule says that a string
        that ends with {\em aas}, such as the 
        word {\em baas}, together with the suffix-key of {\em en} can be 
        converted into a string ending with {\em azen}, e.g. {\em bazen}.
        In analysis the same segmentation rule is used, but 
        interpreted in the other direction.

        Segmentation rules are compiled into data files, which can be 
        used during analysis and during generation.
        
        A W-rule combines a list of  lexical S-trees into one lexical S-tree.
        The main part of a W-rule is a description of the S-trees 
        between which it defines a relation. W-rules are compiled 
        into Pascal functions that compare actual S-trees (the result of 
        dictionary look-up or of application of other W-rules) with the
        descriptions of the input S-trees, and upon a successful match, 
        generate output S-trees 
        according to their description in the W-rule. 
        In fact, from each W-rule two 
        Pascal functions are generated, one for word analysis and one for word
        generation. 
\item The surface grammar contains extended context-free rules. For 
        instance, one can define a common noun as 
        \begin{description}
        \item[] $cn  \Rightarrow  [adjp] noun \{ prepp \}$.
        \end{description}
        At the right-hand-side appears a regular expression of syntactic
        categories. Each path through the regular expression defines a
        possible sequence of categories constituting the category at the
        left-hand-side. Also, for
        each path a sequence of functions must be applied, resulting into
        values for the attributes of the left-hand-side category. A 
        surface rule contains a specification of these functions along with 
        each extended context-free rule. These specifications are compiled into
        Pascal functions, as are the rules themselves. The functions that 
        encode the rules, generate data-structures that are appropriate for 
        parsing purposes.
\item The M-grammar is organized as a set of subgrammars. A subgrammar is
        specified as a regular expression of M-rules. Each path through the
        regular expression represents a legitimate sequence of M-rule
        applications.
        Formally, M-rules are much like W-rules, as they define functions from
           S-trees to S-trees. These functions may be arbitrarily complex, but
        must be reversible. The reversibility to some extent follows from the
        way the rules are specified, through S-tree descriptions.
        M-rules are generally divided into sub-rules, which have there own
        (sub) S-tree descriptions. In an M-rule, the linguist may use various
        pre-defined functions. In addition, user-defined functions, written in 
        Pascal, may be called. M-rules may also call other M-rules, a feature 
        that is essential for the present treatment of idioms.
\item There is a definition of the set of interlingua rule names. These rules
        may be parametrized, in which case names and types of the parameters
        accompany the rule name.
\item Transfer rules are extremely simple rules, that relate M-rules to
        interlingua rules. A typical example is
        \begin{description}
        \item[] $  RQPsuperdeixis  \{super=pastdeixis\}  \Rightarrow 
Lpastsuperdeixis $,
        \end{description}
        and relates the interlingua rule Lpastsuperdeixis to the M-rule
        RQPsuperdeixis, its parameter {\em super} being equal to 
        {\em pastdeixis} (M-rules 
may have parameters, a notational feature which allows to combine a set of 
related rules in one rule).
\item The specification of the dictionaries involves the definition of the
        sets of syntactic keys and meaning keys, and for each syntactic 
        key the lexicon
        entry which contains all attribute-value pairs of a certain word.
        All this information is compiled into data files. 
\end{itemize}


During the project, the syntax of each lingware language was subject to
considerable change. In order to support the extensibility of the lingware 
languages, we developed a compiler generator that accepts any context-free
grammar as a definition of syntax. The semantics is specified by
attribuation of this grammar, in a manner very similar to the one used in
the Rosetta surface parser. 
The majority of the lingware compilers have been constructed with this
compiler generator. For maintenance, the ensuing uniformity of all these 
compilers is very convenient. Also, the input for our compiler generator
is very readable compared to the input required by many existing compiler
generators. The reason is, that most compiler generators require the syntax 
definition to satisfy certain restrictions, e.g. that it be LL(1), where we
do not.


\subsection{\RBS}
In this section the configuration management system \RBS\ is described. 
\RBS\ can be considered as a spin-off of the Rosetta project, which 
can also be used for other projects. The relation with 
Rosetta is mainly reflected by its name, which is an acronym of ``Rosetta 
Beheer(s) Systeem'' (the Dutch equivalent of ``Rosetta Management/Control 
System''). 

Configuration 
management systems are used to manage and control the development and 
maintenance of complex software. They intend to solve a number of problems which
arise during this development and maintenance process, especially if this is 
done by a number of people.
 
The most important aspect of \RBS\ is that it manages and controls a {\em 
consistent} software archive, which is consistent at {\em any} time.  This means
that the software under development will be `correct' at any time. Furthermore, 
this consistency is achieved in an environment that allows more than one person
to work/develop at the same time. As 
was no such system available under VMS, we decided to develop one ourselves.
 
 
Some serious and fundamental problems have to be solved when 
software is developed and/or maintained by {\em more than one} person. The more 
people involved in a software project, the more difficulties arise when 
managing the developed software by hand, i.e. without automated procedures. This
especially applies to the case where scientists of different disciplines are 
involved in developing the application. So, to develop and maintain the software
in a multi-disciplinary environment, support is definitely needed.   
 
The \RBS\ system provides solutions for the following software management
problems:
\begin{description}
   \item[Data sharing:] If software is shared by many developers, the changes
        in the software made by one developer will be seen by everybody. This
        is, most likely, unwanted because there is no guarantee that the
        modifications are correct.
   \item[Simultaneous update:] Modifying the same piece of software in parallel
        will have only one change as a result. Therefore only one change will 
        be present in the final software, although more changes were made.
   \item[Rebuilding problem:] Modification of software will make generated 
       software 
        out of date (e.g. if linguistic rules are changed, the Pascal code 
generated by the lingware compilers changes and the object file changes too).
 The problem here is to keep track of which files are out
        of date and in what order they have to be made correct again.
   \item[History recording:] Sometimes software errors are not discovered at 
        the time of introduction in the system but days, weeks or even months
        later.
        In these cases it is important that also older versions of the software
        are available in order to be able to restore a correct version.
\end{description}

We will describe here some of the solutions that \RBS\ offers for these 
problems.
\RBS\ distinguishes two kinds of software: {\em approved} and {\em unapproved}.
Approved software is visible for everybody in the system. Unapproved software
is only accessible for those who have created it. Because of this distinction, 
users of \RBS\ have their own {\em local workspaces} for storage of local 
unapproved versions of the software. For storage of approved software an {\em 
archive} is used. This space is accessible for everyone, while a local workspace 
is meant for one user.

The only way to make software available for other \RBS\ users is to 
put it into the archive. Because one of the most important aims of \RBS\ is 
to keep the archive {\em consistent} at all times, changes in the archive are
only allowed if the changed software is correct or, in other words, if the
archive including the new software is still consistent. If a developer wants to 
add new software to the archive, \RBS\ performs the following
actions.
\begin{enumerate}
   \item It checks whether all software is syntactically correct, that is, whether no 
errors occur during compilation of the software and whether the software 
interfaces fit. 
   \item The \RBS\ manager has the possibility to
install a {\em test procedure} in order to check the
`semantics' of the newly generated system. If there is such a test procedure, 
RBS executes it.
   \item RBS makes all files that have to be 
generated from the files in the archive and
from the files of the user in the right order. The result is a complete and 
consistent new system.

\end{enumerate}

\RBS\ imposes an infrastructure on the archive and the local workspaces of the
users. A software product may exist in several {\em releases}, which are the 
subsequent versions of the software system with major functional and/or 
implementation differences. Each release is subdivided into {\em components}.
Usually a component contains related software. Software within one component 
may use software from other components. The basic units into which software can 
be divided are modules. So, components consist of a number of modules 
containing related software.

\RBS\ has been designed with the idea in mind that users who are not
computer specialists, should be able to use it. This is achieved in the first 
place by
paying much attention to the user-friendlyness of the \RBS\ interface. Secondly,
\RBS\ is constructed in such a way that it can be tailored to the needs of
the users. 

The necessity of a configuration management system in our project may be 
illustrated most convincingly by the following figures: there are currently 
5700 files (160 MByte), of which 1300 are source files (19 MByte), i.e. 
original Pascal code or lingware. Dictionaries are not included in these 
figures.

\newpage

\section{Rosetta3 phrase translator}

In this section we describe the capacities of the phrase translator.
First the user interface is described, in subsection 4.1. In subsection 4.2
it is indicated what constructs the morphological components can deal with.
In subsection 4.3 an extensive description is given of the syntactic constructs
that the phrase translator can deal with. In subsection 4.4 some specific 
translation problems are discussed. Subsection 4.5 provides information about 
the dictionaries of the phrase translator.

\subsection{User interface}

As Rosetta3 is not a product in itself, but an intermediate result, the users
of the system are mainly the developers themselves and the user interface has 
been tuned to their needs. The system can be executed in two ways: 
\begin{enumerate}
   \item as a {\em background} (batch) process
   \item as a {\em foreground} process.
\end{enumerate}
The command by which each of these processes is started needs two parameters, 
i.e. the specification of the {\em source language} and {\em target
language}. \\

If Rosetta is executed as a {\em background} process the system reads the
input sentences from a file and writes the translated sentences into
another file. In this case there is no interaction with the user of
the system. The system will generate all possible translations for
each input sentence. This batch version of Rosetta is especially useful
for testing the system for a large battery of test sentences.\\

If the system is executed as a {\em foreground} process the user
can control the flow through the system. After the system has been started
the user can choose between the {\em Interactive } and {\em Non-Interactive }
mode of the system by pushing the $<$INT$>$ or $<$NO-INT$>$ button. 
Next, the system will put
the {\em Input Window} on the terminal screen. The user is now allowed
to enter the sentence that has to be translated. Simple editing
facilities are available to correct typing errors. The translation process
can be activated by pushing the $<$DO$>$ button.\\

We discuss the interactive mode first:

If the morphological analyzer cannot cope with one or more words in the
{\em Input Window} the system gives an error message on the last line of the
screen. Furthermore, it will highlight the erroneous words.
By hitting the $<$RETURN$>$ key the user indicates that he has
read the message. Next the user is given the opportunity to edit the
original sentence in the Input Window and to start the translation process
again.

In case the input sentence contains words which have ambiguous meanings
the system will also question the user. The ambiguous word is highlighted
in the Input Window. Also another window, the {\em Interaction Window} will 
appear
on the screen. In this window the descriptions of the various meaning
ambiguities are listed. The user can make a choice from this list by moving
the cursor up and down and by hitting the $<$DO$>$ button whenever he sees
an appropriate meaning description. The translation process can be continued
by hitting the $<$RETURN$>$ button.

The actual translations appear in the {\em Output Window}.
After each translated sentence the system asks the user whether it should 
present alternative translations. The user can push the $<$NEXT-SENSE$>$
button if he wants a translation with a meaning that differs from the previous 
one. He can also choose to push the $<$NEXT$>$ key if he wants another
translation with the same meaning. Furthermore, by hitting the 
$<$STOP$>$ or $<$NEW$>$ key he can stop the system or start a new translation
session respectively. At this point the user is also allowed to switch
from Interactive Mode to Non-Interactive Mode.\\

In the non-interactive mode there is no possibility to choose in case of
ambiguities; the 
system gives all translations, but the $<$NEXT-SENSE$>$ and the $<$NEXT$>$
button can be used in the same way as described before.
In this mode there is no possibility to correct mistakes in the input sentence.





\subsection{Morphological constructs}

Morphological rules have been written for Dutch, English and Spanish, both for 
analysis and generation. 
As was pointed out in section 2.2. the task of the analytical morphological 
component is to convert an input word into a lexical S-tree, which makes the 
derivational structure of the word explicit and repesents the information 
contained in the inflectional structure of the word in the form of attribute-
value pairs (e.g. both the suffix {\em en} in {\em bloemen} and the suffix {\em 
s} in {\em appels} yield the value {\em plural} for the attribute {\em number}).

In this section we will give an outline of the coverage of the Dutch 
morphological component. The coverage for English and Spanish is similar; for 
these languages we will only discuss the constructs that do not correspond to 
Dutch constructs.

It should be noted that the words used in the examples given here do not all 
occur in the current dictionary of the Rosetta3 phrase translator. The Dutch 
morphological rules are more powerful than is needed for the current 
dictionary, they can handle all words in the Van Dale Dictionary of 
Contemporary Dutch. In some cases the morphological component is able to handle 
constructs which are not yet handled by the current syntax, e.g. the subjunctive 
mood of verbs.\\



The morphological rules for Dutch control the full inflection and some of
the derivational phenomena of Dutch words; note that 
the morphological dictionaries contain only the stems of words.

We will discuss each word category separately.
For all categories, phenomena like change of {\em -f} and {\em -s} in words 
like {\em zeef-zeven}, {\em gans-ganzen} and the difference between 
{\em perzik-perziken} (with a sjwa) and {\em tik-tikken} can be dealt with.

\subsubsection{Verbs}

The dictionary contains stems like: {\em leef, snijd, ben, heb,} etc. 
Stems are always equal to the form of the first person singular.

The morphology can deal with all kinds of verbs, like:
\begin{itemize}
 \item weak verbs, like {\em doden, kosten, reizen, verven, beloven,} etc.
 \item strong verbs, like {\em lopen-liep-gelopen, dwingen-dwong-gedwongen,
       denken-dacht-gedacht, sterven-stierf-gestorven, 
       spannen-spande-gespannen.}
       Some verbs have extra forms in some tenses: 
       {\em dorst} vs. {\em durfde},
       {\em snij} vs. {\em snijd}.
 \item irregular verbs, like {\em zijn, hebben, zullen, willen, gaan, komen,
       eten,} etc., and also {\em meten, vergeten,} etc., which have 
       alternating length of the stem vowel in the past tense.
 \item verbs with limited inflection, like {\em buikspreken}; these verbs can 
       only occur as infinitive or present participle.
\end{itemize}

Forms with particles ({\em opbellen, opgebeld}) and participles 
without {\em ge-} ({\em beloofd, onderzocht}) can be analysed.

All possible combinations of person, number, tense and modus 
can be dealt with, like for instance: {\em ik ben, jij bent, ben jij, wees!, 
weest!, men neme, jij zal, jij zult, wij wilden, hij is, u bent, 
ik ben geweest, ik heb geijsbeerd, ik heb ge\"{\i}nformeerd, 
opbellend(e), pratend(e),} etc.

Nominalized forms of present and past participles are possible:
{\em de opbellende(n), de opgebelde(n)}. 

\subsubsection{Nouns}

Stems in the dictionary are equal to the singular form ({\em koe, kind, dak, 
museum, tafel}) except for words that can only occur as plural, like 
{\em hersenen, onkosten}. 

The normal plural endings in Dutch are the suffixes {\em -s} and {\em -(e)n}; 
the majority of Dutch nouns takes one of these two suffixes (and some nouns take
both, like: {\em appel}). But the morphology can also handle other endings: 
{\em kind-kinderen, koe-koeien, dak-daken, waarheid-waarheden, 
elektron-elektronen,
smid-smeden, stad-steden, zeeman-zeelui, zeeman-zeelieden, schema-schemata,
spectrum-spectra, basis-bases, cyclus-cycli, matrix-matrices, vox-voces, 
blad-blaren,
eega-eegaas, caf\'{e}-caf\'{e}s, fotokopie-fotokopie\"{e}n, 
kolonie-koloni\"{e}n, 
jaargetij-jaargetijden,} and many others.

Some nouns lack a plural form (like: {\em heelal, verdriet}), and others 
are plural themselves already (like: {\em hersenen, notulen, onkosten}).

Genitive forms can be handled too: {\em mijn zoontjes fiets, tantes boek}.
Plural genitive forms are rare but not impossible ({\em mijn ouders' huis,
mijn zoontjes' verjaardagen}) and can be handled too.

Diminutives (considered as a derivational process) can be handled too:
{\em naampje, koninkje, mannetje, rugje, ruggetje, radiootje, cafeetje, lootje, 
     dineetje, re\c{c}uutje, faraootje}.

Of course, diminutives can be in plural and/or genitive form.

\subsubsection{Propernouns}

Propernouns can have a genitive form: {\em Franciska's boek, Harms fiets}.
Also, diminutives are possible, like: {\em Franciskaatje, Harmpje} and, in
genitive: {\em Harmpjes fiets}.

Propernouns can be used as noun (which is considered as a derivational process)
with the inflectional forms of nouns, like plural: 
{\em de beide Duitslanden, de Kennedy's}. 

\subsubsection{Adjectives}

Adjectives are in the dictionary in their positive-form: {\em mooi, grof,
dierbaar, treurig, blij, gedwee, modieus, goed, officieel,} etc.
Besides, the Dutch morphology can handle the following inflected forms:
\begin{itemize}
 \item comparative: {\em mooier, grover, dierbaarder, treuriger, blijer,
gedwee\"{e}r, modieuzer, beter, offici\"{e}ler,} etc.
 \item superlative: {\em mooist, grofst, dierbaarst, best,} etc.
 \item superlative with {\em aller-}: {\em allermooist, allerbest,} etc. 
 \item positive with {\em -s}: {\em (iets) moois, (iets) goeds,} etc.
 \item comparative with {\em -s}: {\em (iets) mooiers, (iets) beters,} etc.
\end{itemize}

Positive, comparative and superlative can get an inflectional {\em -e}:
{\em de goede man, de slimmere kinderen, de mooiste schilderijen}.

Positive, comparative and superlative also have nominalised forms:
{\em de mooie(n), de mooiere(n), de mooiste(n)}.

Adjectives may function as adverb; in Rosetta this is considered to be a
derivational process, and the Dutch morphology can deal with it. In English,
adjectives that act as adverbs get a suffix ({\em -ly}).

\subsubsection{Adverbs}

Adverbs are in the dictionary in their positive-form: {\em vaak, dikwijls, 
zelden, graag,} etc. The Dutch morphology can handle the following inflected 
forms:
\begin{itemize}
 \item comparative: {\em vaker, zeldener, liever,} etc.
 \item superlative: {\em vaakst, zeldenst, liefst,} etc.
 \item superlative with {\em aller-}: {\em allervaakst,} etc. 
\end{itemize}

Superlative can get an inflectional {\em -e}:
{\em (het) vaakste, (het) liefste}.

\subsubsection{Other categories}

Until now, we have seen the way the Dutch morphology deals with the main
categories: verb, noun, adjectives and adverbs. Of course, all other categories
are handled in morphology too; most of these, however, are treated trivially,
because they can occur only as dictionary-form.
This is the case for a.o. prepositions, conjunctions. In the next sections 
the categories that are interesting with respect to the morphology are 
described.\\

{\bf Personal pronouns}\\

The following personal pronouns can be handled:
\begin{itemize}
 \item dictionary forms: {\em ik, jij, u, gij, hij, zij, het, wij, jullie, u, 
                          zij}.
 \item generically used, dictionary forms: {\em je, ze}.
 \item extra nominatives, derived from dictionary forms: {\em 'k, ikke, je,
        ge, ie, ze, 't, we, jelui, ze}.
 \item datives and/or accusatives, derived from dictionary forms: 
        {\em mij, me, jou, je, u, hem, 'm, haar, 'r, d'r, ze, het, 't,
             ons, jullie, u, hen, hun, ze,} and the generic forms {\em je, ze}.
\end{itemize}

Some of the forms can only be analysed and \underline{not} generated, as, 
for instance, {\em ikke, jelui} and {\em 'r}. Not included are obsolete forms 
and forms that do not belong to standard Dutch, like {\em hunnie, hullie, 
zullie,} etc.\\

{\bf Possessive adjectives}\\


Possessive adjectives  are derived from personal pronouns, WH-pronouns (e.g. 
{\em who}) and demonstrative pronouns. 
The following possessive adjectives can be analysed and generated:
{\em mijn, m'n, jouw, je, uw, zijn, z'n, haar, 'r, d'r,
     ons, onze, jullie, uw, hun} and the generic forms: {\em je, hun};
and the genitive forms: {\em mijner, jouwer, uwer, zijner, harer, onzer, uwer,
    hunner}; and the forms 
{\em wiens} and {\em wier}, both derived from {\em wie}; and
 {\em diens}, derived from {\em die}.

The personal pronoun {\em jullie} doesn't have a corresponding genitive form of
the possessive adjective. This will not lead to problems, because the 
genitives of possessive adjectives are only allowed in the analysis component,
in generation paraphrases like 
{\em van mij(n), van jou(w), van ons, van onze,} etc. will 
be used, and, with respect to these paraphrases, {\em jullie} is regular: 
{\em van jullie}.\\


{\bf Possessive pronouns}\\

Possessive pronouns are 
derived from personal pronouns; the following forms exist:
{\em mijne(n), jouwe(e), uwe(n), zijne(n), hare(n), onze(n), uwe(n), 
hunne(n)}.\\

{\bf Determiners}\\

Determiners s (like: {\em elk, enig, alle}) can get inflectional {\em -e} or 
{\em -en}, as in: {\em elke, enige(n), alle(n)}.\\

{\bf Indefinite pronouns}\\

Indefinite pronouns may have a genitive {\em -s}, as for instance in 
{\em iemand\underline{s}}.

\subsubsection{Contraction}

The morphology is able to handle contractions, i.e. 
words consist of several basic parts, like, in Dutch: {\em ertoe, 
ergensvandaan, waarheen,} and, only in analysis: {\em der} (from: {\em van}
+ {\em de}). 
The English morphology can deal with strings like: {\em isn't, don't, I've,
he's}. In Spanish, weak personal pronouns (`clitics') are attached to
infinitives, gerunds and imperatives. The Spanish morphology can handle 
forms like: {\em compranlo} (from: {\em compran} + {\em lo}), {\em d\'{a}melo}
(from: {\em da} + {\em me} + {\em lo}), {\em del} (from: {\em de} + {\em el}),
{\em al} (from: {\em a} + {\em el}) and {\em conmigo} (from: {\em con} +
{\em m\'{\i}}).

\subsubsection{Fixed idioms}

The morphology is able to deal with
fixed idioms, like {\em by and large}, {\em kant en klaar}. There
is a special morphological dictionary (FIXED-ID-DICT) for relating the parts 
of the idiom to the 
representation of the whole word. English compounds, like 
{\em stock certificate} that are translations of single Dutch words are also in 
this dictionary.

\newpage

\subsection{Syntactic constructs}

\def\soon{operative before 01 02 89}


\def\not{not operative before 01 02 89}
\def\Lisette{to be written by Lisette}
\def\untested{not tested yet}
\def\noremark{\vspace*{-2ex}}
\def\add{to be added}
\def\noS{No example Sentence}
\def\new#1{#1}
\newif\ifexone
\def\constructions{\begin{trivlist}}
\def\endconstructions{\end{trivlist}}
\def\trproblem{(translation problem)}
\def\askM{}


\def\construction{ \exonetrue \item[] \mbox{} \begin{trivlist}}
\def\endconstruction{ \end{trivlist}}
\def\name{\item[]}
\def\example{\item[] \ifexone \exonefalse 
\begin{tabular}{p{.33\textwidth}p{.33\textwidth}p{.33\textwidth}} 
\it \else \\ \it \fi}
\def\remark{\end{tabular} \exonetrue \item[] \rm}
\def\English{\exonefalse & \it}
\def\Spanish{\exonefalse & \it}

\def\noDutch#1{$<$#1$>$}
\def\noEnglish#1{$<$#1$>$}
\def\noSpanish#1{$<$#1$>$}




\def\soon{operative before 01 02 89}
\def\not{not operative before 01 02 89}
\def\Lisette{to be written by Lisette}
\def\untested{not tested yet}
\def\noremark{\vspace*{-2ex}}
\def\add{to be added}
\def\noS{No example Sentence}
\def\new#1{#1}
\newif\ifexone
\def\constructions{\begin{trivlist}}
\def\endconstructions{\end{trivlist}}
\def\trproblem{(translation problem)}
\def\askM{}


\def\construction{ \exonetrue \item[] \mbox{} \begin{trivlist}}
\def\endconstruction{ \end{trivlist}}
\def\name{\item[]}
\def\example{\item[] \ifexone \exonefalse 
\begin{tabular}{p{.33\textwidth}p{.33\textwidth}p{.33\textwidth}} 
\it \else \\ \it \fi}
\def\remark{\end{tabular} \exonetrue \item[] \rm}
\def\English{\exonefalse & \it}
\def\Spanish{\exonefalse & \it}

\def\noDutch#1{$<$#1$>$}
\def\noEnglish#1{$<$#1$>$}
\def\noSpanish#1{$<$#1$>$}
\def\yesSpanish#1{#1}



\subsubsection{Introduction}


In this subsection we try to give a fairly complete account of the 
syntactic constructions that the phrase translator Dutch - English 
and the test version Dutch - Spanish can deal with. 
For each construction one or more examples are supplied. 
They are generally `minimal' examples, i.e. intervening factors
are excluded as much as possible. The choice of lexical items in these examples
was restricted because of the limited size of the test dictionary. 
For this reason some
of the examples given may look rather unnatural.

Though the examples given are `minimal' in the sense described above, it is 
claimed that combinations of different construction types can be dealt with 
adequately as well, although efficiency problems often make this impossible in 
practice (cf. 6.2).
\\
The guideline for the grammar writers was the Rosetta document 
{\em  Specification of Syntactic Constructs} (Rosetta doc. R0081), in which 
an enumeration of constructs was given and a selection of those constructs that 
we wanted to deal with in Rosetta3. 

For virtually all these constructs grammar rules have been written for the 
three languages. This does not automatically imply that sentences containing 
those constructs are 
adequately analyzed and translated. In the first place the grammar rules 
themselves have 
to be tested (for Dutch both the M-rules and the surface rules) and secondly, 
even if the grammar rules operate correctly, 
there may be a problem with one of the other modules, for instance in the 
monolingual or bilingual dictionaries. 
As Dutch is currently our only source language, only constructs that can be 
handled by the Dutch analysis component can be tested for the other languages.
Therefore, the set of successfully tested English and Spanish  constructs 
is necessarily smaller than the Dutch set.

We have chosen for the following presentation.
In subsections 4.3.2 - 4.3.6 we first list the 
Dutch constructs which can be dealt with by the Dutch analysis component (
actually they have been tested for Dutch analysis {\em and} Dutch generation).
In parallel we give the translations of the constructs in English and Spanish.
If these translations are between $<$ and $>$ brackets, this means 
that although in principle 
the English and Spanish rules have been written for these constructs, 
they have not yet been successfully tested.  If instead of a translation 
the remark {\em translation problem} occurs, this means that no corresponding 
rules have been written yet for that construct, because of some problem.

The list shows that the variety of Dutch constructs the system can handle 
is very impressive. We presume that this is the largest formal grammar ever 
written for Dutch. It also shows that 
the coverage  of the English grammar is very close to that 
of the Dutch grammar. 
According to the project plan, Spanish had a special status in this phase of 
the project. A  Spanish grammar would be written, not 
with the goal to develop a Dutch - Spanish phrase translator too, but in 
order to have a Spanish grammar with the same power at the beginning of the 
Rosetta4 phase of the project. The Dutch - Spanish `test version' of the phrase 
translator has been made with this goal in mind and is currently used for 
testing the Spanish grammar. This testing started later than for the other 
grammars and because of that the list of Spanish translations still 
contains many brackets. We expect that 
most of these brackets can be deleted soon.

In subsection 4.3.7 a list of constructions that cannot be dealt with yet 
(though we planned to) is provided.

Finally, in subsections 4.3.8 and 4.3.9 we give a list of English and Spanish 
constructs that the grammars can deal with, but that do not have a clear 
correlate in Dutch.\\

The order in which the constructs 
are presented reflects the structure of the actual grammar
(at least for sentential constructions). In particular, the order reflects the
partitioning into rule and transformation classes.

\newpage

\subsubsection{Sentential Constructions}

{\bf 4.3.2.1. Simple sentences}\\

{\bf Simple sentences: Derivation}

\begin{constructions}

\begin{construction}
\name Verbs with a particle
\example Hij belt de man op
\English He rings the man
\Spanish llama al hombre
\remark \noremark
\end{construction}


\end{constructions}

{\bf Simple sentences: Argument structure}

\begin{constructions}

\begin{construction}
\name 0-place verbs
\example Het regent
\English It rains / It is raining
\Spanish llueve
\remark \noremark
\end{construction}


\begin{construction}
\name 1-place ergative verbs
\example Hij sterft
\English He dies / He kicks the bucket
\Spanish muere
\remark \noremark
\end{construction}


\begin{construction}
\name 1-place ergative case-assigning verbs
\example Het regende idee\"{en} 
\English It was raining ideas
\Spanish \noSpanish{\trproblem}
\remark \noremark

\end{construction}


\begin{construction}
\name 1-place ergative reflexive verbs
\example Dit doet zich voor
\English This occurs
\Spanish Esto sucede
\remark \noremark
\end{construction}



\begin{construction}
\name 1-place intransitive verbs
\example Hij zwemt
\English He swims / He is swimming
\Spanish Nada
\remark \noremark
\end{construction}


\begin{construction}
\name 2-place unergative verbs
\example Hij ziet de man
\English He sees the man
\Spanish Ve al hombre
\remark \noremark
\end{construction}



\begin{construction}
\name 2-place ergative verbs
\example Hij bevalt de man 
\English He pleases the man
\Spanish Le gusta al hombre
\remark There are hardly any 2 place ergative verbs  in English
\end{construction}


\begin{construction}
\name 3-place verbs
\example Hij geeft de man een os
\English he gives the man an ox
\Spanish Le da un buey al hombre
\remark \noremark
\end{construction}



\end{constructions}

{\bf Simple sentences: Verbpatterns}

\begin{constructions}

\def\testedexample{\example}
\def\testexample{\example}
\def\synpat#1{}       % name of synpattern
\def\infpat#1{#1}     % informal description of pattern
\def\noinfpat{}
\def\aan{{\em aan}}
\def\voor{{\em  voor}}
\def\do{direct object}
\def\io{indirect object}
\def\omcomplS{complement sentence that allows {\em  om}}
\def\tecomplS{complement sentence with {\em  te} that does not allow {\em  om}}
\def\qsent{interrogative complement }
\def\thatS{finite declarative complement}
\def\capp{adjectival small clause}
\def\ACI{accusativus cum infinitivo verbs}
\def\NPraising{infinitival complement of a copular verb}
\def\cnpp{nominal small clause}
\def\cvpp{verbal small clause}
\def\dircppp{directional prepositional or adverbial small clause}
\def\othercppp{predicative prepositional or adverbial small clause}
\def\diroppp{directional prepositional or adverbial phrase}
\def\locoppp{locative prepositional or adverbial phrase}
\def\loccppp{locative prepositional or adverbial small clause}
\def\oapp{adjectival phrase}
\def\onpp{predicative nominal phrase}
\def\pnp{prepositional object}
\def\het{{\em  het}}
\def\meas{measure phrase}
\def\asifS{complement introduced by {\em  alsof}}
\def\noVPargs{no complements}
\def\infS{infinitival complement without {\em  te}}
\def\prosent{pronominal instead of a sentential complement}
\def\synzijn{special pattern for the copular verb {\em  zijn}}

\begin{construction}
\name Verbpatterns, \synpat{ synAANactive}\infpat{Complement sentence in 
AanActive Voice}
\testedexample Hij laat aan Jan de muziek horen
\English He lets Jan hear the music
\Spanish \noSpanish{le deja/hace o\'{\i}r la m\'{u}sica a Jan}
\remark \noremark
\end{construction}




\begin{construction}
\name Verbpatterns, \synpat{ synAANNP\_DONP}\infpat{{\io} with {\aan} and {\do}}
\testedexample het heeft zich aan hem geopenbaard 
\English it has revealed itself to him
\Spanish Ello se le ha revelado a \'{e}l       
%\example ik gaf aan Peter een boek                      
\testedexample Hij openbaart zich aan hem
\English He reveales himself to him
\Spanish \yesSpanish{Se le revela a \'{e}l}       
%\testedexample Hij geeft aan hem hem
\testedexample Hij betaalt aan de man een penny
\English He pays the man a penny / he pays a penny to the man
\Spanish Le paga un penique al hombre
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synAANNP\_OPENOMTESENT}\infpat{{\io} with {\aan} and 
{\omcomplS}}
%\example Hij vroeg aan hem om weg te gaan               
\testedexample Hij vraagt aan hem te zwemmen
\English He asks him to swim
\Spanish Le pide nadar
\testedexample Ik heb aan hem gevraagd te zwemmen
\English I have asked him to swim
\Spanish \noSpanish{Le ped\'{\i}/ he pedido nadar}
\remark \noremark
\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ synAANNP\_OPENTESENT  }\infpat{{\io} with {\aan} and
%{\tecomplS}}
%\example \noDutch{Hij heeft aan hem verteld ziek te zijn}
%\English \noEnglish{He told him that he was ill}
%\Spanish \noSpanish{Le cont\'{o}/ contaba que estaba enfermo}
%\remark \noremark
%\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synAANNP\_QSENT }\infpat{{\io} with {\aan} and {\qsent}}
\testedexample Ik vraag aan hem of hij zwemt
\English I ask him whether he is swimming
\Spanish Le pregunto si nada
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synAANNP\_THATSENT}\infpat{{\io} with {\aan} and {\thatS}}
\testedexample ik vertel aan hem dat hij zwemt
\English I tell him that he is swimming /swims (his swimming)
\Spanish \yesSpanish{le cuento que nada}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synASIFCLOSEDADJPPROP}\infpat{{\asifS}}
\testedexample Hij doet alsof hij zwemt
\English He is acting as if he is swimming 
\Spanish \noSpanish{Hace como si nade, hace como que nada}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synCLOSEDADJPPROP}\infpat{{\capp}}
\testedexample zij bleek oud
\English she turned out (to be) old / it appeared that she was old
\Spanish Result\'{o} vieja
%\example er bleek iemand ziek                
%\example Ik vind hem gek                 
%\example Ik acht hem ongeschikt          
\testedexample Hij wordt mooi     
\English He becomes beautiful, he gets (to be) beautiful, 
\Spanish \noSpanish{Se hace hermoso}
\testedexample Hij vindt de os mooi
\English He thinks the ox beautiful
\Spanish \noSpanish{Considera hermoso al buey}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synCLOSEDINFSENT}\infpat{{\ACI and NP-raising 
verbs without {\em te}} }
\testedexample hij kan zwemmen
\English he can swim / He may be swimming
\Spanish Puede nadar
%\example er kan iemand komen
%\example er moet iemand komen                              
%\example ?Het wil maar niet regenen
%\example ?Het mag dan misschien regenen
\testedexample Het kan regenen
\English It can / may be raining / rain
\Spanish \yesSpanish{Puede llover}
\testedexample Hij ziet hem zwemmen
\English He sees him swim / He sees that he is swimming / He sees him being 
swimming
\Spanish Ve que nada
\testedexample Hij laat de man zwemmen
\English He makes the man swim
\Spanish \noSpanish{Le hace/deja nadar al hombre}
\testedexample Ik liet iemand de kerk bouwen
\English I had someone build the church
\Spanish \noSpanish{le hice/dej\'{e} construir la iglesia a alguien}       
%\example Ik liet hem komen
%\example Ik voelde het regenen
%\example Dat deed hem rillen
%\example Ik vond hem mooi zingen
\testedexample Ik hoorde hem zwemmen
\English I heard him swim
\Spanish O\'{\i} que nada \noSpanish{Le/lo o\'{\i}/o\'{\i}a nadar}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synCLOSEDNPPROP}\infpat{{\cnpp}}
\testedexample Zij wordt een actrice
\English She becomes an actress
\Spanish \noSpanish{Se hace una actriz}
\testedexample Zij vonden dat een belediging
\English They thought that an insult
\Spanish \noSpanish{Lo consideraron/consider\'{\i}an un insulto}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synCLOSEDTESENT}\infpat{{\NPraising}}
\testedexample Hij schijnt te zwemmen
\English He seems to be swimming /to swim
\Spanish \yesSpanish{Parece nadar}
%\example De man bleek ziek te zijn
\testedexample Hij blijkt te zwemmen
\English It appears that he is swimmig / he turns out to be swimming /
he appears to be swimming
\Spanish \yesSpanish{Resulta que nada}
\remark \noremark
\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ synCLOSEDVERBPPROP}\infpat{{\cvpp}}
%\example \noDutch{Hij kreeg de fotokopie afgeleverd                   }
%\English \noEnglish{He had the photocopy delivered}
%\Spanish \noSpanish{\trproblem}
%\remark relevant mood rule has not been written yet
%\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synDIRCLOSEDPREPPPROP}\infpat{{\dircppp}}
\testedexample de sopraan kreeg hem in de kerk
\English The soprano got him in/ into the church
\Spanish \noSpanish{\trproblem}
\testedexample de sopraan kreeg hem de kerk in
\English The soprano got him into the church
\Spanish \noSpanish{\trproblem}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ \new{synDONP\_DIREMPTY}}\infpat{{\do} with implicit
directional argument}
\testedexample Hij bracht de taart
\English He brought the cake
\Spanish \noSpanish{Traje/Tra\'{\i}a la torta}
\remark \noremark
\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ synDIROPENPREPPPROP  }\infpat{{\diroppp}}
%\example \noDutch{hij is naar de stad  }
%\English \noEnglish{He went to town}
%\Spanish \noSpanish{Fue a la ciudad}
%\example \noDutch{De weg loopt naar Duitsland}
%\English \noEnglish{The road leads to Germany}
%\Spanish \noSpanish{\trproblem}
%\remark \untested
%\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synDONP\_DIROPENPREPPPROP }\infpat{{\do} and {\diroppp}}
\testedexample Hij is de vulkaan ingegaan
\English He has gone into the vulcano
\Spanish \noSpanish{ha ido en el vulcano}
\testedexample Hij gaat de vulkaan in
\English He is going into the vulcano
\Spanish \noSpanish{va en el vulcano}
\testedexample Hij loopt naar de metropolis
\English He is walking / walks to the metropolis
\Spanish \noSpanish{camina a la metr\'{o}polis}
%\example De auto is de garage in gereden
%\example Er is een auto de garage ingereden
%\example Er is een vliegtuig naar Amsterdam gevlogen
%\example Er is een vat de tuin in gerold                      
\testedexample De spionnen brachten haar naar de aarde
\English The spies were bringing / brought her to the earth
\Spanish \noSpanish{Los esp\'{\i}as la tra\'{\i}an/trajeron a la tierra}
%\example Hij heeft de auto de garage in gereden      
%\example Hij heeft een vliegtuig naar Amsterdam gevlogen
%\example Hij heeft het vat de tuin ingerold   
%\example Hij heeft de auto de garage in geduwd
%\example Hij heeft het kind naar Amsterdam gebracht
%\example Hij heeft de hendel naar hem toegehaald
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synDONP\_LOCOPENPREPPPROP}\infpat{{\do} and {\locoppp}}
\testedexample de os is op het huis terechtgekomen
\English The ox has ended up on the house
\Spanish \noSpanish{\trproblem}
\testedexample Zij legden de zakdoek daar
\English They were putting / put the handkerchief over there
\Spanish \noSpanish{Pusieron / pon\'{\i}an el pa\~{n}uelo all\'{\i}}
\testedexample De sopraan legde de zakdoek daar
\English The soprano was putting /put the handkerchief over there
\Spanish \noSpanish{la soprano puso / pon\'{\i}a el pa\~{n}uelo all\'{\i}}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synDONP\_OPENADJPPROP }\infpat{{\do} and {\oapp}}
%\example ?de hemel kleurde rood
%\example zij verven de deur groen    
%\testedexample Hij verft de os mooi
\testedexample Hij verft de tomaat groen
\English He is painting / paints the tomato green
\Spanish \noSpanish{Pinto de verde el tomate}
%\example Zij maakten hem mooi                   
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synDONP\_OPENNPPROP}\infpat{{\do} and {\onpp}}
\example Ze noemden hem Jan
\English They called him Jan
\Spanish \noSpanish{Lo/le llamaron Jan}
\testedexample We maakten hem de president                   
\English We made him the president
\Spanish \noSpanish{Lo/le hac\'{\i}amos/ hicimos el presidente}
%\testedexample Ik maak de os een vulkaan
%\English \noEnglish{I made the ox a vulcano}
%\Spanish \noSpanish{}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synDONP\_OPENOMTESENT}\infpat{{\do} and {\omcomplS}}
\testedexample Ik dwing hem te zwemmen
\English I force him to swim
\Spanish Lo/le fuerzo nadar
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synDONP\_PREPNP }\infpat{{\do} and {\pnp}}
\testedexample hij is in een os veranderd                 
\English he has turned into an ox
\Spanish \noSpanish{ha cambiado en un buey, cambi\'{o} en un buey}
%\testedexample Hij beschuldigt de man van de os
%\Spanish Acusa al hombre del buey
\example  ik beschuldigde hem  van de crisis
\English He accuses the man of the crisis
\Spanish Acusa al hombre del crisis
%\testedexample Hij bidt de man om de os
%\English \noEnglish{He begs the man for the ox}
%\Spanish \noSpanish{}
%\testedexample Hij bidt de man om goud
%\English \noEnglish{He is begging the man for gold}
%\Spanish \noSpanish{}
%\example Ik voorzie hem van voedsel       
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synDONP\_PREPOPENNPPROP}\infpat{{\do} and predicative 
{\pnp}}
%\example  Zij benoemden hem tot president
%\example Zij stelden hem aan als directeur van de firma               
\testedexample \noDutch{Hij benoemt de man tot president}
\English \noEnglish{He appoints the man president}
\Spanish \noSpanish{Nombra presidente al hombre}
\remark \soon
\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ synDONP\_PREPOPENOMTESENT}\infpat{{\do} and {\pnp} 
%containing a {\omcomplS}}
%\example Zij dwong hem ertoe haar te bewaken
%\English \noEnglish{She forced him to guard her}
%\Spanish \noSpanish{Lo/le forzaba/ forz\'{o} guardarla}
%\remark \noremark
%\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ synDONP\_PREPOPENTESENT}\infpat{{\do} and {\pnp} 
%containing a {\tecomplS}}
%\example \noS
%\English \noEnglish{}
%\Spanish \noSpanish{}
%\remark \noremark
%\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY  }\infpat{pseudotransitive verbs}
\testedexample Hij eet                                        
\English he eats / is eating
\Spanish Come
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_CLOSEDADJPPROP  }\infpat{implicit {\io} and
{\capp}}
\testedexample  hij lijkt mooi
\English He seems beautiful
\Spanish \yesSpanish{Parece hermoso}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_CLOSEDNPPROP}\infpat{implicit  {\io} and
{\cnpp}}
\testedexample  zij lijkt een actrice
\English She seems an actress
\Spanish \noSpanish{Parece una actriz}
\remark \noremark
\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ \new{synEMPTY\_CLOSEDTESENT}}\infpat{implicit {\io}
%and {\tecomplS} with copular verbs}
%\example  ?hij lijkt (ons) de beste president te zijn
%\English \noEnglish{}
%\Spanish \noSpanish{}
%\remark \untested
%\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_DONP  }\infpat{implicit {\io} and {\do}}
%\example Het boek beviel                                
%\example Het boek viel nog mee
%\example Het is wel opgevallen
\testedexample Ik gaf de os
\English I gave the ox
\Spanish \yesSpanish{Di/daba el buey}
\testedexample Ik gaf de fotokopie
\English I gave the photocopy
\Spanish \yesSpanish{Di/daba la fotocopia}
\remark \noremark
\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ synEMPTY\_HETOPENOMTESENT}\infpat{implicit {\io} and
%{\omcomplS} with {\het}}
%\example ?het is bevallen  om dit te doen                      
%\English \noEnglish{}
%\Spanish \noSpanish{}
%\remark \noremark
%\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_HETTHATSENT }\infpat{implicit {\io} and
{\thatS} with {\het}}
\testedexample het lijkt dat hij zwemt
\English It seems that he is swimming
\Spanish \noSpanish{Parece que nada}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_MEASUREPHRASE}\infpat{implicit {\io} and
{\meas}}
\testedexample  hij kost drie penny's
\English \noEnglish{he costs three pennies}
\Spanish \noSpanish{Cuesta tres peniques}
%\example  dit scheelt drie meter/ drie gulden/ niet veel
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_OPENOMTESENT}\infpat{implicit {\io}
and {\omcomplS}}
\testedexample ik heb beloofd te zwemmen
\English I have promised to swim
\Spanish \noSpanish{He prometido / promet\'{\i} nadar}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_OPENTESENT  }\infpat{implicit {\io} and
{\tecomplS}}
\testedexample Ik zegde toe te zwemmen
\English I promised to swim
\Spanish \noSpanish{Promet\'{\i}/promet\'{\i}a nadar}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_OTHERCLOSEDPREPPPROP }\infpat{implicit
{\io} and {\othercppp}}
\testedexample  hij lijkt tegen de analyse
\English \noEnglish{He appears/seems against the analysis}
\Spanish \noSpanish{Parece contra el an\'{a}lisis}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_QSENT }\infpat{implicit {\io} and {\qsent}}
\testedexample Ik vraag of hij zwemt
\English I ask whether he swims
\Spanish \noSpanish{Pregunto si nada}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synEMPTY\_THATSENT}\infpat{implicit {\io} and {\thatS}}
%\example ?Er is opgevallen, dat..                       
\testedexample Hij vertelt dat hij droomt
\English He says that he is dreaming/ dreams
\Spanish \noSpanish{Cuenta que sue\~{n}a }
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ \new{synHETASIFCLOSEDADJPPROP}}\infpat{{\asifS} with {\het}}
\testedexample het lijkt alsof hij zwemt
\English It seems as if he is swimming
\Spanish \noSpanish{Parece como si nada/ Parece come que nade}
\testedexample het leek alsof hij droomde
\English It seemed as if he was dreaming
\Spanish \noSpanish{Parec\'{\i}a/ parec\'{\i}o como si so\~{n}aba/ so\~{n}\'{o},
parec\'{\i}a/ parec\'{\i}o como que so\~{n}ara}
%\example Hij doet het voorkomen alsof ..
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synHETOPENOMTESENT}\infpat{{\omcomplS} with {\het}}
\testedexample Hij presteert het om te zwemmen
\English He succeeds in swimming
\Spanish Realiza nadar
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synHETOPENTESENT}\infpat{{\tecomplS} with {\het}}
\testedexample ik betreur het te zwemmen
\English I regret swimming
\Spanish Lamento nadar
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synHETTHATSENT }\infpat{{\thatS} with {\het}}
\testedexample het blijkt dat hij ziek is                     
\English he turns out/appears (to be) ill, it appears that he is ill
\Spanish \yesSpanish{Resulta que est\'{a} enfermo}
\testedexample Hij betreurt het dat hij  zwemt
\English He regrets that he is swimming
\Spanish Lamenta que nade
\testedexample ik prefereer het dat de luis speelt
\English I prefer for the louse to play / I prefer the louse's playing
\Spanish \noSpanish{Prefiero que el piojo juegue}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_CLOSEDADJPPROP}\infpat{{\io} and {\capp}}
\testedexample  hij lijkt mij mooi
\English he seems beautiful to me, it seems to me that he is beautiful
\Spanish \noSpanish{me parece hermoso, me parece que es hermoso}
%\example Er lijkt mij iemand beter                           
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_CLOSEDNPPROP }\infpat{{\io} and {\cnpp}}
\testedexample  zij lijkt mij een actrice
\English She seems an actress to me
\Spanish \noSpanish{Me parece una actriz}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_DONP}\infpat{{\io} and {\do}}
\testedexample De os beviel de man
\English The ox pleased the man
\Spanish Le gust\'{o}/gustaba el buey al hombre,
        El buey gust\'{o}/gustaba al hombre
\testedexample Het circus beviel de man
\English The circus pleased the man
\Spanish Le gust\'{o}/gustaba el circo al hombre,
        El circo gust\'{o}/gustaba al hombre
%\example Mij viel een idee in
\testedexample De belediging ontging mij
\English The insult escaped me
\Spanish \yesSpanish{El insulto se me escap\'{o} a m\'{\i}}
%\example Het voorbeeld is me ontschoten                    
%\example Die opmerking is me ontvallen
\testedexample Ik gaf hem het boek  
\English I gave him the book
\Spanish Le di el libro (a \'{e}l)
%\testedexample Ik schonk hem een plaat
%\English I gave him a record/picture
%\Spanish \noSpanish{}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_HETOPENOMTESENT  }\infpat{{\io} and {\omcomplS}
with {\het}}
%\testedexample het bevalt de man te zwemmen
%\English \noEnglish{It pleases the man to swim}
%\Spanish \noSpanish{Le gusta al hombre nadar}
%\testedexample Het bevalt de man de os te zien
%\English \noEnglish{It pleases the man to see the ox}
%\Spanish \noSpanish{le gusta al hombre ver el buey}
\testedexample Hij staat het de man toe te zwemmen
\English He allows the man to swim
\Spanish Le permite al hombre nadar
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_HETTHATSENT  }\infpat{{\io} and {\thatS} with
{\het}}
\testedexample het bevalt de man  dat hij zwemt
\English that he is swimming pleases the man
\Spanish \noSpanish{Le gusta al hombre que nada}
\testedexample het lijkt de man dat hij zwemt
\English it seems to the man that he is swimming
\Spanish \noSpanish{le parece al hombre que nada}
%\example Het is me opgevallen dat hij weggegaan is
%\example Het viel me mee dat hij kwam
%\example Het is me ontschoten dat ik dat nog moest doen
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_MEASUREPHRASE}\infpat{{\io} and {\meas}}
%\example dit kost me drie penny's
%\example Dit scheelt ons 10 gulden/ 10 meter/ niet veel
\testedexample Hij kost mij een penny
\English He costs me a penny
\Spanish \noSpanish{Me cuesta un penique}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_OPENTESENT}\infpat{{\io} and {\tecomplS}}
%\example John vertelde Bill weg te gaan                 
\testedexample Hij belooft de man te zwemmen                
\English He promises the man to swim
\Spanish \noSpanish{Le promete al hombre nadar}
\testedexample Hij biedt 'm aan te zwemmen
\English \noEnglish{\trproblem}
\Spanish \noSpanish{le ofrece nadar}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_OTHERCLOSEDPREPPROP}\infpat{{\io} and 
{\othercppp}}
\testedexample  hij lijkt mij tegen de analyse
\English He seems against the analysis to me
\Spanish \noSpanish{me parece contra el an\'{a}lisis}
%\testedexample Er lijkt mij een man tegen de analyse
%\English \noEnglish{A man appears/seems to be against the analysis}
%\Spanish \noSpanish{}
\remark \noremark
\end{construction}




\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_QSENT  }\infpat{{\io} and {\qsent}}
\testedexample hij vraagt hem of hij zwemt
\English he asks him whether he is swimming /swims
\Spanish \noSpanish{le pregunta si nada}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synIONP\_THATSENT}\infpat{{\io} and {\thatS}}
%\example Er is mij opgevallen, dat hij raar deed
%\testedexample hij vertelde het schaap dat de waarheid ademt
%\English he told the sheep that the truth is breathing/ breathes
%\Spanish Le cont\'{o} a la oveja que la verdad respira
\testedexample hij vertelde de man dat de muis ademde
\English He told the man that the mouse was breathing
\Spanish Le cont\'{o} al hombre que el rat\'{o}n respiraba
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synLOCCLOSEDPREPPPROP}\infpat{{\loccppp}}
\testedexample De sopraan raakte in de kerk
\English The soprano got in the church
\Spanish \noSpanish{\trproblem}
%\example ?er raakte iemand in de box                          
\testedexample Zij heeft hem daar gekregen
\English She has got(ten) him over there
\Spanish \noSpanish{\trproblem}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synLOCOPENPREPPPROP  }\infpat{{\locoppp}}
\testedexample De tand lag op de fotokopie
\English The tooth was lying on the photocopy
\Spanish \noSpanish{El diente estaba/estuvo en la fotocopia}
\testedexample Het afschrift lag op het bureau
\English The copy was lying/ lay on the bureau
\Spanish \noSpanish{la copia estaba/estuvo en el escritorio}
\testedexample Zij zitten in de kerk                         
\English They are in the church, They are sitting in the church
\Spanish \noSpanish{Est\'{a}n en la iglesia}
%\example Er zit een boek in de tas
%\example Er ligt een handdoek op tafel
%\example Hij is in de tuin
%\example Hij bevindt zich in Parijs
%\example De woestijn strekt zich uit tot aan Mexico
%\example Hij verblijft tijdelijk in Londen
%\example De misdadiger hield zich op in Madrid
%\example Er hangt een jas aan de kapstok
%\testedexample Hij verblijft in hem
%\English \noEnglish{he remains in him}
%\Spanish \noSpanish{}
%\testedexample Hij verblijft in Duitsland 
%\English \noEnglish{He remains in Germany}
%\Spanish \noSpanish{}
%\testedexample Hij verblijft te de vulkaan
%\English \noEnglish{He remains in the vulcano}
%\Spanish \noSpanish{}
\testedexample Er verblijft een man
\English A man remains there
\Spanish \noSpanish{Un hombre reside all\'{\i}}
\testedexample Hij verblijft er
\English He remains there
\Spanish \noSpanish{Reside all\'{\i}}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synMEASUREPHRASE}\infpat{{\meas}}
\testedexample Hij weegt een kilo
\English he weighs a kilogram
\Spanish \noSpanish{Pesa un kilogramo}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synNP}\infpat{{\do}}
\testedexample hij sterft
\English He dies
\Spanish Muere
\testedexample er stierf een man
\English A man died, A man kicked the bucket
\Spanish Muri\'{o} un hombre
%\testedexample het regent ossen
%\testedexample het regende bureaus
%\English It was raining bureaus
%\Spanish \noSpanish{\trproblem}
\testedexample het regende idee\"{e}n
\English It was raining ideas
\Spanish \noSpanish{\trproblem}
\testedexample Het heeft gekookt
\English It has boiled
\Spanish Hirvi\'{o}, \noSpanish{ha hervido}
%\example De klok heeft geluid
%\example hij zag de jongen                    
%\example Hij maakt een schilderij          
%\example Hij verricht een taak.
\testedexample Hij heeft hem opgebeld
\English he has rung him
\Spanish Lo/le ha llamado, lo/le llam\'{o}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synnoVPargs}\infpat{{\noVPargs}}
\testedexample het regent                                     
\English It rains /is raining
\Spanish Llueve
\testedexample Hij zwemt
\English He swims / is swimming
\Spanish Nada
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synOPENADJPPROP}\infpat{{\oapp}}
\testedexample De aardbei ruikt goed
\English The strawberry smells good
\Spanish La fresa huele bien
\testedexample Dit klinkt mooi
\English This sounds beautiful
\Spanish Suena hermoso
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synOPENINFSENT }\infpat{{\infS}}
%\example hij leert zwemmen
\testedexample hij wil zwemmen
\English he wants to swim
\Spanish Quiere nadar
\testedexample hij moet zwemmen
\English he must swim / be swimming, he has to be swimming / to swim
\Spanish Debe nadar, \noSpanish{tiene que nadar}
\testedexample Ik heb moeten zwemmen                              
\English I have had to swim
\Spanish he debido nadar, \noSpanish{he tenido que nadar}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synOPENNPPROP  }\infpat{{\onpp}}
\testedexample hij heet Jan
\English \noEnglish{His name is Jan}
\Spanish \noSpanish{Se llama Jan}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synOPENOMTESENT}\infpat{{\omcomplS}}
\testedexample Hij probeert (om) te zwemmen
\English He is trying to swim
\Spanish \yesSpanish{Intenta nadar}
%\example Ik ben vergeten (om) hem te waarschuwen
%\example Ik heb getracht (om) de boel te redden
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synOPENTESENT  }\infpat{{\tecomplS}}
%\example we hebben gemeend te moeten vertrekken              
%\example Hij heeft beweerd dat te kunnen doen
%\example Hij heeft verzuimd z'n fout te herstellen
%\example Hij wenste dit recht te zetten
%\example ?Ik heb geweigerd dit te doen 
\testedexample Hij placht te zwemmen
\English He used to swim
\Spanish \yesSpanish{Sol\'{i}a nadar}
\testedexample Hij heeft gemeend te zwemmen
\English \noEnglish{he has thought that he was swimming}
\Spanish Crey\'{o}/ Ha cre\'{\i}do que nad\'{o}/ nadaba
\remark \noremark
\end{construction}


\newpage
\begin{construction}
\name Verbpatterns, \synpat{ synOTHERCLOSEDPREPPPROP  }\infpat{{\othercppp}}
%\example ik kreeg hem aan de praat
%\example ik kreeg hem voor de motie
%\example ik kreeg de lamp aan/uit
\testedexample Zij heeft de man contra de analyse gekregen
\English She has got(ten) the man against/versus the analysis
\Spanish \noSpanish{\trproblem}
%\testedexample Zij heeft de os contra de muziek gekregen
%\English \noEnglish{She has got(ten) the ox contra/versus the music}
%\Spanish \noSpanish{\trproblem}
\remark \noremark
\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ synPREPCLOSEDADJPPROP}\infpat{{\pnp} in a
%a {\capp}}
%\example ik beschouw hem als gek                      
%\English \noEnglish{I consider him crazy}
%\Spanish \noSpanish{Lo/le considero como loco}
%\remark \noremark
%\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ synPREPCLOSEDNPPROP  }\infpat{{\pnp} in a
%{\cnpp}}
%\example ?Hij is verworden tot een zwakkeling
%\testedexample Hij beschouwt hem als de vulkaan
%\testexample \noDutch{Hij beschouwt hen als de regering}
%\English \noEnglish{He considers them (to be) the government}
%\Spanish \noSpanish{Los considera como el gobierno}
%\example ik houd hem voor een gek 
%\remark \soon
%\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synPREPNP}\infpat{{\pnp}}
\testedexample Hij kijkt naar hem
\English he is watching him
\Spanish Le/lo mira
\testedexample Hij kijkt ernaar
\English he is watching it
\Spanish Lo mira
\testedexample Er keek een man naar
\English A man was watching/ watched it
\Spanish Un hombre lo mir\'{o}/miraba
\testedexample Er wordt naar gekeken
\English It is (being) watched
\Spanish \noSpanish{Se lo mira}
\remark \noremark
\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ synPREPNP\_PREPNP}\infpat{{\pnp} and {\pnp}}
%\testedexample \noDutch{Ik sprak met Jan over Rosetta}
%\English \noEnglish{I talked to Jan about Rosetta}
%\Spanish \noSpanish{habl\'{e}/hablaba con Jan sobre Rosetta}
%\remark \soon
%\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synPREPOPENNPPROP}\infpat{{\pnp} containing a
{\onpp}}
\testedexample Hij dient  als een stimulus
\English \noEnglish{he serves as a stimulus}
\Spanish \noSpanish{Sirve como un est\'{\i}mulo}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synPREPOPENTESENT}\infpat{{\pnp} containing a
{\tecomplS}}
\testedexample ik reken erop te zwemmen
\English \noEnglish{I count on swimming}
\Spanish \noSpanish{Cuento con que nade}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synPREPQSENT}\infpat{{\pnp} containing a {\qsent}}
\testedexample Hij informeerde ernaar of hij zwom
\English he inquired whether he was swimming
\Spanish Se inform\'{o} de si nadaba
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synPREPTHATSENT}\infpat{{\pnp} containing a {\thatS}}
%\example ?het lijkt erop, dat...                   
%\example ?het ziet ernaar uit, dat...
%\example ?Het komt erop neer, dat...
\testedexample Hij rekent erop  dat hij zwemt
\English He counts on him to swim/ on him swimming / on it that he swims
\Spanish Cuenta con que nade
%\example Ik ga ervan uit, dat hij komt     
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synPROSENT }\infpat{{\prosent}}
\testedexample ik weet het
\English I know
\Spanish \noSpanish{Lo s\'{e}}
\testedexample Hij vraagt het zich af
\English he wonders / is wondering
\Spanish \noSpanish{Se lo pregunta}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synQSENT}\infpat{{\qsent}}
%\example er zal blijken of dat zo is                    
%\example Hij twijfelde of hij zou komen                          
%\example Hij heeft uitgezocht hoe dat zit
\testedexample ik weet of hij zwemt
\English I know whether he is swimming
\Spanish \noSpanish{S\'{e} si nada}
\testedexample Jan vroeg zich af of Rosetta zwemt
\English Jan was wondering / wondered whether Rosetta swims / is swimming
\Spanish \noSpanish{Jan se pregunt\'{o}/preguntaba si Rosetta nada}
\testedexample Jan vroeg zich af of de spion bloedde
\English Jan was wondering / wondered whether the spy was bleeding
\Spanish \noSpanish{Jan se pregunt\'{o}/preguntaba si el esp\'{\i}a sangr\'{o} 
/ sangraba}
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synTHATSENT}\infpat{{\thatS}}
\testedexample er blijkt dat hij zwemt
\English It appears that he is swimming / swims, he turns out to be swimming
\Spanish \noSpanish{resulta que nada}
\testedexample Hij zegt dat hij zwemt
\English he says that he is swimming /swims
\Spanish Dice que nada
\testedexample hij heeft gezegd dat hij zwemt
\English He has said that he is swimming/ swims
\Spanish \noSpanish{ha dicho que nada / Dijo que nada}
\remark \noremark
\end{construction}



%\begin{construction}
%\name Verbpatterns, \synpat{ \new{synTHATSENT\_LOCOPENPREPPROP}}\infpat{{\thatS}
%and {\locoppp}}
%\example er staat in de krant dat hij ziek is
%\English \noEnglish{The newspaper says that he is ill}
%\Spanish \noSpanish{Pone en el peri\'{o}dico que est\'{a} enfermo}
%\example er geldt in de wiskunde dat 1 + 1 = 2
%\remark \untested
%\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synVOORNP\_DONP}\infpat{{\io} with {\voor} and {\do}}
\testedexample Ik kocht voor hem de os
\English I bought him the ox / I bought the ox for him
\Spanish Le compraba/compr\'{e} el buey (a \'{e}l)
\remark \noremark
\end{construction}



\begin{construction}
\name Verbpatterns, \synpat{ synzijn}\infpat{{\synzijn}}
\testedexample hij is ziek
\English he is ill
\Spanish Est\'{a} enfermo
\remark \noremark
\end{construction}






\end{constructions}

{\bf Simple sentences: Voice}

\begin{constructions}

\begin{construction}
\name Active
\example Ik zie de man
\English I see the man
\Spanish Veo al hombre
\remark \noremark
\end{construction}


\begin{construction}
\name Passive, no movement
\example  Er werd een man gezien
\English A man was seen (there)
\Spanish \yesSpanish{Se ve\'{\i}a / vi\'{o} a un hombre}
\remark \noremark
\end{construction}


\begin{construction}
\name Passive, direct object movement
\example De man wordt gezien
\English The man is seen
\Spanish \yesSpanish{Se ve al hombre}
\remark \noremark
\end{construction}


\begin{construction}
\name Passive, `indirect object movement'
\example Hij zegt dat hem het huis gegeven wordt
\English He says that he is given the house / he says that the house is given to
him
\Spanish \noSpanish{Dice que se le da la casa}
\remark At the moment only operative in subordinate clauses. If topicalization
is operative, this construction will be operative in main clauses as well. 
\end{construction}



\begin{construction}
\name Passive, subject of small clause
\example zij wordt mooi gevonden
\English she is thought beautiful
\Spanish \noSpanish{Se la considera hermosa}
\remark \noremark
\end{construction}


\begin{construction}
\name Impersonal Passive
\example  Er wordt gezwommen
\English One swims/ One is swimming (there)
\Spanish \yesSpanish{Se nada}
\remark \noremark
\end{construction}


\begin{construction}
\name DoorActive
\example  hij laat door hem een kerk bouwen
\English \noEnglish{He makes/has him build a church }
\Spanish \noSpanish{(Le) hace construir una iglesia }
\remark \noremark
\end{construction}


\begin{construction}
\name AanActive
\example  (hij laat) aan hem de muziek horen 
\English He lets him hear the music
\Spanish \noSpanish{Le hace o\'{\i}r la m\'{u}sica}
\remark \noremark
\end{construction}



\end{constructions}

{\bf Simple sentences: Clause Types}

\begin{constructions}
\begin{construction}
\name Sentences headed by a verb
\example Hij ziet de man
\English He sees the man
\Spanish Ve al hombre
\remark \noremark
\end{construction}


\begin{construction}
\name Copular Sentences headed by an adjective
\example Hij is ziek
\English He is ill
\Spanish Est\'{a} enfermo
\remark \noremark
\end{construction}


\begin{construction}
\name Copular Sentences headed by a noun
\example Hij is een spion
\English He is a spy
\Spanish \noSpanish{Es un esp\'{\i}a}
\remark
\end{construction}


\begin{construction}
\name Copular Sentences headed by a preposition
\example Hij is tegen de analyse
\English \noEnglish{he is against the analysis}
\Spanish \noSpanish{Est\'{a} contra el an\'{a}lisis}
\remark 
\end{construction}



\begin{construction}
\name Existential sentences
\example Er is een man
\English There is a man
\Spanish Hay un hombre
\example Er zijn mannen
\English There are men
\Spanish Hay hombres
\remark \noremark
\end{construction}


\begin{construction}
\name Identificational, simple NP
\example dit is de analyse
\English This is the analysis
\Spanish \noSpanish{Este es el an\'{a}lisis}
\example dit/dat zijn de analyses
\English These/those are the analyses
\Spanish \noSpanish{Estos/esos son los an\'{a}lisis}
\remark \noremark
\end{construction}


\begin{construction}
\name Identificational, {\em  wat}
\example Wat is dit?
\English \noEnglish{What is this?}
\Spanish \noSpanish{?`Qu\'{e} es esto?}
\example Wat zijn dat? 
\English \noEnglish{What are those?}
\Spanish \noSpanish{?`Qu\'{e} son estos?}
\remark \noremark
\end{construction}

\end{constructions}

{\bf Simple sentences: Time}
\begin{constructions}
\begin{construction}
\name ott
\example Hij zwemt
\English He swims / is swimming
\Spanish Nada
\remark \noremark
\end{construction}


\begin{construction}
\name ovt
\example Hij zwom
\English He swam / was swimming
\Spanish Nadaba / Nad\'{o}
\remark \noremark
\end{construction}


\begin{construction}
\name vtt
\example Hij heeft gezwommen
\English He has swum / He swam
\Spanish ha nadado / nad\'{o}
\remark \noremark
\end{construction}


\begin{construction}
\name vvt
\example Hij had gezwommen
\English He had swum
\Spanish hab\'{\i}a nadado
\remark \noremark
\end{construction}


\begin{construction}
\name ottt
\example Hij zal zwemmen
\English He will swim /  be swimming
\Spanish nadar\'{a}
\remark \noremark
\end{construction}


\begin{construction}
\name ovtt
\example Hij zou zwemmen
\English He would swim / be swimming
\Spanish Nadar\'{\i}a
\remark \noremark
\end{construction}


\begin{construction}
\name vttt
\example  Hij zal hebben gezwommen 
\English He will have swum
\Spanish habr\'{a} nadado
\remark \noremark
\end{construction}


\begin{construction}
\name vvtt
\example Hij zou hebben gezwommen 
\English He would have swum
\Spanish Habr\'{\i}a nadado
\remark \noremark
\end{construction}

\end{constructions}

{\bf Simple sentences: Auxiliary Verbs}
\begin{constructions}

\begin{construction}
\name Auxiliaries, following main verb
\example  (Hij zegt dat hij hem) gedood heeft
\English he says that he has killed him
\Spanish Dice que lo/le ha matado
\example  (Hij zegt dat hij door hem) gedood wordt
\English He says that he is killed by him
\Spanish Dice que lo/le mata
\example  (Hij zegt dat hij door hem) gedood is
\English \noEnglish{He says that he has been killed by him}
\Spanish Dice que lo/le ha matado
\remark \noremark
\end{construction}


\begin{construction}
\name Auxiliaries, preceding main verb
\example  (Hij zegt dat hij hem) heeft gedood 
\English noEnglish{he says that he has killed him}
\Spanish Dice que lo/le ha matado
\example  \noDutch{(Hij zegt dat hij door hem) wordt gedood }
\English \noEnglish{he says that he is killed by him}
\Spanish \noSpanish{Dice que lo/le mata}
%\example  \noDutch{(Hij zegt dat hij door hem) is gedood }
%\English \noEnglish{He says that he has been killed by him}
%\Spanish \noSpanish{Dice que lo/le ha matado}
\remark \noremark
\end{construction}


\begin{construction}
\name Auxiliaries, preceding main verb, split particle
\example  (Hij zegt dat hij hem) op heeft gebeld
\English \noEnglish{he says that he has rung him}
\Spanish Dice que lo /le ha llamado
\example  \noDutch{(Hij zegt dat hij door hem) op wordt gebeld}
\English \noEnglish{he says that he is rung by him}
\Spanish \noSpanish{Dice que lo /le llama}
%\example  \noDutch{(Hij zegt dat hij door hem) op is gebeld}
%\English \noEnglish{he says that he has been rung by him}
%\Spanish \noSpanish{Dice que lo /le ha llamado}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitivum Pro Participio, -{\em te}
\example Hij heeft willen zwemmen
\English He has wanted to swim
\Spanish ha querido nadar, quiso nadar
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitivum Pro Participio, +{\em te}
\example Hij heeft proberen te zwemmen
\English He has tried to swim / swimming
\Spanish ha intentado nadar, intent\'{o} nadar
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitivum Pro Participio, -{\em te}, split particle
\example Hij heeft hem op willen bellen
\English He has wanted to ring him
\Spanish Le/lo ha querido/quiso llamar, ha querido/quiso llamarlo/
llamarle
\remark \noremark
\end{construction}


%\begin{construction}
%\name Infinitivum Pro Participio, +{\em te}, split particle
%\example \noDutch{Hij heeft hem op proberen te bellen}
%\English \noEnglish{he has tried to ring him}
%\Spanish \noSpanish{Trat\'{o} de llamarlo/llamarle, Ha tratado de llamarlo/ 
%llamarle}
%\remark \soon
%\end{construction}


\end{constructions}



{\bf Simple sentences: Subject Verb Agreement}
\begin{constructions}
\begin{construction}
\name Normal Agreement
\example Hij zwemt
\English He swims
\Spanish Nada
\remark \noremark
\end{construction}



\begin{construction}
\name Special Agreement, identificational
\example Dit zijn de afschriften
\English These are the copies  
\Spanish Estas son las copias
\example Dit bleken de afschriften te zijn
\English \noEnglish{These turned out to be the copies}
\Spanish \noSpanish{Result\'{o}/resultaba que estas fueron / eran las copias}
\remark \noremark
\end{construction}


\begin{construction}
\name Special Agreement, {\em  er}
\example Er zijn afschriften
\English There are copies
\Spanish \yesSpanish{Hay copias}
\example Er bleken afschriften te zijn
\English \noEnglish{There turned out to be copies}
\Spanish \noSpanish{Parec\'{\i}a/pareci\'{o} que hab\'{\i}a copias}
\remark \noremark
\end{construction}


\end{constructions}

{\bf Simple sentences: ER}

\begin{constructions}
\begin{construction}
\name Quantificational {\em  Er}
\example Hij ziet er twee
\English \noEnglish{he sees two}
\Spanish \noSpanish{Ve dos}
\remark \noremark
\end{construction}


\begin{construction}
\name Expletive {\em  Er}
\example Er wordt gezwommen
\English One is swimming
\Spanish \yesSpanish{Se nada}
\example Er zwemt iemand
\English Someone swims / Someone is swimming
\Spanish Alguien nada, nada alguien
\remark \noremark
\end{construction}


\begin{construction}
\name Prepositional {\em  Er}
\example Ik reken erop
\English I count on it
\Spanish \noSpanish{Cuento con ello}
\example Ik reken erop, dat hij zwemt
\English I count on him to swim / swimming
\Spanish Cuento con que nade
\remark \noremark
\end{construction}


\begin{construction}
\name Locative {\em  Er}
\example Hij zwemt er
\English he is swimming there
\Spanish \noSpanish{nada all\'{\i}}
\example Hij verblijft er
\English He remains there
\Spanish \noSpanish{Reside all\'{\i}}
\remark \noremark
\end{construction}


\begin{construction}
\name Expletive + Locative {\em  Er}
\example Er verbleef een man
\English A man remained there
\Spanish \noSpanish{Residi\'{o}/residia un hombre all\'{\i}}
\remark \noremark
\end{construction}


\begin{construction}
\name Expletive + Prepositional {\em  Er}
\example Er kijkt een man naar
\English A man is watching it
\Spanish Un hombre lo mira
\example Er wordt naar gekeken
\English It is (being) watched
\Spanish \noSpanish{Se lo mira}
\remark \noremark
\end{construction}


\begin{construction}
\name Expletive + Quantificational {\em Er}
\example Zwemmen er twee?
\English \noEnglish{Are two swimming (there)}
\Spanish \noSpanish{?`Nadan dos (all\'{\i}?}
\remark \noremark
\end{construction}


\begin{construction}
\name Expletive + Locative + Quantificational {\em  Er}
\example  Zitten er twee?
\English \noEnglish{Are there two (sitting) there?}
\Spanish \noSpanish{?`Est\'{a}n (sentados/sentadas) dos all\'{\i}?}
\remark \noremark
\end{construction}


\begin{construction}
\name Expletive + Prepositional + Quantificational {\em  Er}
\example Keken er twee naar?
\English \noEnglish{Did two watch it?}
\Spanish \noSpanish{?`Lo miraron / miraban dos?}
\remark \noremark
\end{construction}


\begin{construction}
\name Quantificational + Prepositional {\em  Er}
\example Hij beschuldigde er twee van.
\English \noEnglish{He accused two of it}
\Spanish \noSpanish{Acus\'{o}/acusaba dos de esto}
\remark \noremark
\end{construction}


\begin{construction}
\name Quantificational + Locative {\em  Er}
\example Hij zag er twee
\English \noEnglish{he saw two (there)}
\Spanish \noSpanish{Vio/ve\'{\i}a dos all\'{\i}}
\remark \noremark
\end{construction}


\end{constructions}

{\bf Simple sentences: Wh-movement and Relativization}

\begin{constructions}

\begin{construction}
\name Subject
\example Wie ziet hem?
\English \noEnglish{Who sees him?}
\Spanish ?`Qui\'{e}n lo ve ?
\example (De man) die zwemt
\English The man who is swimming / swims
\Spanish El hombre que nada
\remark \noremark 
\end{construction}


\begin{construction}
\name Object
\example Wat ziet hij?
\English What does he see?
\Spanish ?`Qu\'{e} ve?
\example (De man) die hij ziet
\English the man who he sees
\Spanish El hombre al que ve
\remark \noremark
\end{construction}


\begin{construction}
\name Indirect Object
\example Wie geeft hij de os?
\English Whom does he give the ox, Whom does he give the ox to,
        To whom does he give the ox?
\Spanish \yesSpanish{?`A qui\'{e}n le da el buey? / ?`A qui\'{e}nes les
 da el buey?}
\example (De man) die hij de os geeft
\English The man who he gives the ox
\Spanish \yesSpanish{El hombre al que da el buey}
\remark \noremark
\end{construction}


\begin{construction}
\name Aan-Object
\example Aan wie geeft hij de os?
\English To whom does he give the ox, Whom does he give the ox to,
         Whom does he give the ox
\Spanish \yesSpanish{?`A qui\'{e}n le da el buey?}
\example (De man) aan wie hij de os geeft
\English The man who he gives the ox
\Spanish \yesSpanish{El hombre a quien le da el buey}
\remark \noremark
\end{construction}


\begin{construction}
\name Voor-Object
\example Voor wie koopt hij de os?
\English Whom is he buying the ox?, For whom is he buying the ox,
          Whom is he buying the ox for?
\Spanish \yesSpanish{?`A qui\'{e}n le compra el buey?}
\example (De man) voor wie hij de os koopt
\English The man who he is buying the ox
\Spanish \yesSpanish{El hombre a quien le compra el buey}
\remark \noremark
\end{construction}


\begin{construction}
\name Prepositional Object, human
\example Naar wie kijkt hij?
\English Whom is he watching /does he watch
\Spanish \noSpanish{?`A qui\'{e}n mira?}
\example (De man) naar wie hij kijkt
\English The man who he is watching
\Spanish \yesSpanish{El hombre al que/a quien mira}
\remark \noremark
\end{construction}


\begin{construction}
\name prepositional Object, nonhuman, split
\example Waar kijkt hij naar?
\English What does he watch
\Spanish \noSpanish{?`Qu\'{e} mira?}
\example (De os) waar hij naar kijkt
\English The ox that he is watching
\Spanish \yesSpanish{El buey que mira}
\remark \noremark
\end{construction}

\begin{construction}
\name Door-Phrase in passives
\example Door  wie wordt hij gezien?
\English By whom is he seen?
\Spanish ?`Qui\'{e}n lo/le ve?
\example de man door wie hij gedood wordt
\English \noEnglish{The man by whom he is killed}
\Spanish \yesSpanish{El hombre que lo/le mata (a \'{e}l)}
\remark \noremark
\end{construction}


%\begin{construction}
%\name prepositional Object
%\example \noDutch{Waarnaar kijkt hij?}
%\English \noEnglish{What does he watch}
%\Spanish \noSpanish{?`Qu\'{e} mira?}
%\example \noDutch{(Het huis) waarnaar hij kijkt}
%\English \noEnglish{The house that he watches}
%\Spanish \noSpanish{La casa que mira}
%\remark \soon
%\end{construction}


\begin{construction}
\name Predicate
\example wat is dat?
\English What is that?
\Spanish \noSpanish{?`Qu\'{e} es eso?}
\remark The construction is not a grammatical sentence if relativized
\end{construction}


%\begin{construction}
%\name Locative argument
%\example \noDutch{Waar verblijft hij?}
%\English \noEnglish{Where does he remain}
%\Spanish \noSpanish{?`D\'{o}nde reside?}
%\example \noDutch{(het huis) waar hij woont}
%\English \noEnglish{The house where he lives}
%\Spanish \noSpanish{La casa donde vive}
%\remark relativization \soon
%\end{construction}


\begin{construction}
\name Locative phrases
\example \noDutch{Waar zwemt hij?}
\English \noEnglish{Where does he swim}
\Spanish \noSpanish{?`D\'{o}nde nada?}
\example \noDutch{(het huis) waar hij zwemt}
\English \noEnglish{the house where he is swimming}
\Spanish \noSpanish{La casa donde nada}
\remark 
\end{construction}


\begin{construction}
\name Temporal adverbial
\example \noDutch{Wanneer zwemt hij?}
\English \noEnglish{When does he swim?}
\Spanish \noSpanish{?`Cu\'{a}ndo nada?}
\example \noDutch{(het moment) dat hij zwemt}
\English \noEnglish{The moment he is swimming}
\Spanish \noSpanish{El momento en que nada}
\remark 
\end{construction}


\begin{construction}
\name extraction from embedded clause (finite, infinitival)
\example wat denkt hij dat hij ziet?
\English What does he think that he sees
\Spanish \yesSpanish{?`Qu\'{e} cree que ve?}
\example wat probeert hij te doen?
\English What is he trying to do?
\Spanish \noSpanish{?`Qu\'{e} trata de hacer?}
\example Wat wil hij doen?
\English What does he want to do?
\Spanish \noSpanish{?`Qu\'{e} quiere hacer?}
\remark \noremark
\end{construction}



\end{constructions}


{\bf Simple sentences: Negation}

\begin{constructions}
\begin{construction}
\name Negation
\example Hij zwemt niet 
\English He does not swim
\Spanish \noSpanish{No nada}
\remark \noremark
\end{construction}


\begin{construction}
\name Amalgamated negation
\example Hij ziet niemand
\English he does not see anyone 
\Spanish \noSpanish{No ve a nadie}
\remark \noremark
\end{construction}

\begin{construction}
\name Polarity properties
\example Hij hoeft niet te zwemmen
\English He need not swim
\Spanish \noSpanish{No debe nadar}
\remark Polarity properties are taken into account. 
\end{construction}


\begin{construction}
\name Emphatic Positive
\example Hij zwemt wel
\English He does swim
\Spanish \noSpanish{S\'{\i} que nada}
\remark \noremark
\end{construction}



\end{constructions}

{\bf Simple sentences: Adverbials}

\begin{constructions}

\begin{construction}
\name Temporal adverbials
\example Hij zwom gisteren
\English He swam yesterday
\Spanish Nadaba / Nad\'{o} ayer
\remark \noremark
\end{construction}


\begin{construction}
\name Sentential adverbials
\example Hij zwemt waarschijnlijk
\English probably, he is swimming
\Spanish \noSpanish{Nada probablemente}
\example Hij zwemt toevallig
\English He happens to swim / he happens to be swimming
\Spanish \noSpanish{Nada por casualidad}
\remark \noremark
\end{construction}


\begin{construction}
\name Agent oriented Verb modifying adverbials
\example Hij zingt de klank mooi
%\example Hij zingt enthousiast
\English He sings the sound beautifully
\Spanish \noSpanish{Canta el sonido hermosamente}
\remark \noremark
\end{construction}


\begin{construction}
\name Verb modifying adverbials
\example Het regent hard
\English \noEnglish{It is raining hard}
\Spanish \noSpanish{Llueve mucho}
\remark \noremark
\end{construction}


\begin{construction}
\name Subject oriented Verb modifying adverbials
\example Hij zwemt graag
\English He likes to swim
\Spanish \yesSpanish{Le gusta nadar}
\remark \noremark
\end{construction}

\end{constructions}




{\bf Simple sentences: Mood}\\

For Mood in subordinate sentences, see below under Sentence embedding.


\begin{constructions}
\begin{construction}
\name Declarative
\example Ik zie de man
\English I see the man
\Spanish Veo al hombre
\remark \noremark
\end{construction}


\begin{construction}
\name Wh-interrogative
\example Wat ziet hij?
\English What does he see?
\Spanish \yesSpanish{?`Qu\'{e} ve?}
\remark \noremark
\end{construction}


\begin{construction}
\name Yes-No-interrogative
\example Ziet hij de man?
\English Does he see the man?
\Spanish ?`Ve al hombre?
\remark \noremark
\end{construction}


\begin{construction}
\name Imperative
\example Zwem!
\English Swim!
\Spanish !`Nada!
\example Zwemt!
\English Swim!
\Spanish !`Nadad!, !`Nade usted!, !`Naden ustedes!
\remark \noremark
\end{construction}


\begin{construction}
\name Adhortative
\example Laten we zwemmen
\English \noEnglish{Let us swim}
\Spanish !`Nademos!
\remark \noremark
\end{construction}


\end{constructions}


{\bf Simple sentences: Miscellaneous}

\begin{constructions}


\begin{construction}
\name Inherent reflexives
\example Hij scheert zich
\English he shaves / he is shaving
\Spanish Se afeita
\example Hij vraagt het zich af
\English He wonders / he is wondering
\Spanish \noSpanish{Se lo pregunta}
\remark \noremark
\end{construction}



\begin{construction}
\name Argument reflexives
\example Hij ziet zichzelf
\English He sees himself
\Spanish \noSpanish{Se ve a (s\'{\i} mismo)}
\remark Only possible in a limited number of configurations yet
\end{construction}


\begin{construction}
\name Argument Reciprocals
\example Zij zien elkaar
\English \noEnglish{They see each other}
\Spanish \noSpanish{Se ven (los unos a los otros / las unas a las otras)}
\remark Only possible in a limited number of configurations yet.
\end{construction}


\begin{construction}
\name Clitic pronouns
\example Ik heb 't 'm gegeven
\English I gave it to him 
\Spanish Se lo di\'{o} (a \'{e}l) / Se lo he dado (a \'{e}l)
\example Ik heb 'm gezien
\English I have seen him
\Spanish Lo/le he visto, lo/le v\'{\i}
\remark \noremark
\end{construction}


\begin{construction}
\name PPoverV
\example Hij heeft gekeken naar de man
\English He has watched the man
\Spanish ha mirado/ mir\'{o} al hombre
\remark \noremark
\end{construction}


\begin{construction}
\name NPoverAdv
\example Hij ziet de man waarschijnlijk
\English Probably, he sees the man
\Spanish \noSpanish{Ve al hombre probablemente}
\remark \untested
\end{construction}


\begin{construction}
\name Postsubjects
\example Er zwemt iemand
\English Someone is swimming (there)
\Spanish Nada alguien / alguien nada
\example Er koopt iemand een boek
\English \noEnglish{Someone is buying a book}
\Spanish \yesSpanish{Alguien compra un libro}
\remark \noremark
\end{construction}


\begin{construction}
\name Inverted modals
\example Hij zegt dat hij zwemmen wil
\English he says that he wants to swim
\Spanish Dice que quiere nadar
\example Hij zegt dat hij wil zwemmen
\English He says that he wants to swim
\Spanish Dice que quiere nadar 
\remark The order in the first example is accepted in analysis but not 
     generated
\end{construction}


%\begin{construction}
%\name Interpunction (.!?,)
%\example 
%\English \noEnglish{\mbox{}}
%\Spanish In Spanish also the punctuation marks ?` and !` are generated.
%\remark \noremark
%\end{construction}




\end{constructions}




\newpage

{\bf 4.3.2.2. Sentence Embedding}\\

{\bf Sentence Embedding: Argument sentences}

\begin{constructions}
\begin{construction}
\name Finite complements, declarative
\example Hij zegt dat hij zwemt
\English He says that he swims
\Spanish Dice que nada
\remark \noremark
\end{construction}


\begin{construction}
\name  Finite complement, wh-interrogative
\example Ik vraag wat hij ziet
\English I ask what he sees
\Spanish \noSpanish{Pregunto qu\'{e} ve}
\example Ik weet wat hij ziet
\English I know what he sees
\Spanish \noSpanish{S\'{e} qu\'{e} ve}
\remark \noremark
\end{construction}


\begin{construction}
\name Finite complement, yes-no-interrogative
\example Ik vraag me af of hij zwemt
\English I wonder whether he swims
\Spanish Me pregunto si nada
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival complements, ACI
\example Hij zag haar zwemmen 
\English He saw her swim
\Spanish Ve\'{\i}a / vi\'{o} que nadaba/ nad\'{o}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival complements, Causatives
\example Ik laat iemand de kerk bouwen
\English I have / let someone build / be building the church
\Spanish \noSpanish{Le hago construir la casa a alguien}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival complements, Causatives, no subject
\example Ik laat de kerk bouwen
\English \noEnglish{I have the church built}
\Spanish \noSpanish{Hago construir la iglesia}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival complements, Causatives, `DoorActive'
\example Ik liet door hem een kerk bouwen
\English \noEnglish{He had him build a church, he had a church built by him}
\Spanish \noSpanish{Le hago construir la casa a alguien}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival complements, Causatives, `AanActive'
\example Ik liet aan hem de muziek horen
\English I let him hear the music
\Spanish \noSpanish{Le hice o\'{\i}r la m\'{u}sica}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival complements, Subject-raising, +{\em  te}
\example Hij blijkt te zwemmen
\English he turns out / appears to be swimming, it appears that he is swimming
\Spanish \yesSpanish{Resulta que nada}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival complements, Subject-raising, -{\em  te}
\example Het kan regenen
\English It may / can be raining / rain
\Spanish \yesSpanish{Puede llover}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival Complements, Subject Control
\example Zij probeerde te zingen 
\English She was trying to sing
\Spanish \yesSpanish{Intent\'{o} a cantar}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival Complements, Indirect object control
\example ik sta het hem toe te zwemmen
\English I allow him to swim
\Spanish \yesSpanish{Le permito nadar}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival Complements, Direct object control
\example Ik dwing hem te zwemmen
\English I force him to swim
\Spanish Lo/le fuerzo nadar
\remark \noremark
\end{construction}


%\begin{construction}
%\name Infinitival Complements, Prepositional object control
%\example \add
%\English \noEnglish{}
%\Spanish \noSpanish{}
%\remark \noremark
%\end{construction}



\begin{construction}
\name Infinitival Complements, Control, No antecedent
\example \noDutch{Er wordt geprobeerd te zwemmen}
\English \noEnglish{One is trying to swim}
\Spanish \noSpanish{Se trata de nadar}
\remark \soon
\end{construction}


\begin{construction}
\name Infinitival Complements, {\em  om te}, Extraposition
\example Hij heeft geprobeerd om te zwemmen
\English He has tried to swim
\Spanish ha intentado nadar, intent\'{o} nadar
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival Complements, {\em  te}, Extraposition
\example Hij heeft geprobeerd  te zwemmen
\English He has tried to swim
\Spanish ha intentado nadar, intent\'{o} nadar
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival Complements, -{\em  om}, Extraposition
\example Hij denkt ziek te zijn
\English \noEnglish{he thinks that he is ill}
\Spanish \yesSpanish{Cree que est\'{a} enfermo}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival Complements, Verb Raising, +{\em  te}
\example Hij zegt dat hij de man probeert te begrijpen
\English he says that he is trying to understand the man
\Spanish \yesSpanish{Dice que intenta entender al hombre}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival Complements, Verb Raising, -{\em  te}
\example Hij denkt dat hij de analyse kan begrijpen
\English He thinks that he can understand the analysis
\Spanish \yesSpanish{Cree que puede entender el an\'{a}lisis}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival Complements, Verb Raising , +PartHopping
\example Hij denkt dat hij de man kan opbellen
\English He thinks that he can ring the man
\Spanish \yesSpanish{Cree que puede llamar al hombre}
\example Hij zegt dat hij de man probeert op te bellen
\English He says that he is trying to ring the man
\Spanish \noSpanish{Dice que intenta llamar al hombre}
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival Complements, Verb Raising , -PartHopping
\example Hij denkt dat hij de man op kan bellen
\English He thinks that he can ring the man
\Spanish \yesSpanish{Cree que puede llamar al hombre}
\example Hij zegt dat hij de man op probeert te bellen
\English He says that he is trying to ring the man
\Spanish \noSpanish{Dice que intenta llamar al hombre}
\remark \noremark
\end{construction}



\begin{construction}
\name Deontic Modals
\example Hij moet het doen
\English he must do it / he has to do it
\Spanish \yesSpanish{Debe hacerlo, lo debe hacer}
\remark \noremark
\end{construction}


\begin{construction}
\name Epistemic Modals
\example Het kan regenen
\English It can/ may  be raining / rain
\Spanish \yesSpanish{Puede llover}
\remark \noremark
\end{construction}



\end{constructions}

{\bf Sentence Embedding: Noun modifying Sentences}

\begin{constructions}

\begin{construction}
\name Finite relative Clause, NP 
\example  het huis dat hij ziet
\English the house that he sees
\Spanish \yesSpanish{La casa que ve}
\example  de man die hij ziet
\English the man who he sees
\Spanish \yesSpanish{El hombre al que ve}
\remark \noremark
\end{construction}


\begin{construction}
\name Finite Relative Clause, PP, split, nonhuman
\example Het huis waar hij naar kijkt
\English the house that he is watching / watches
\Spanish \yesSpanish{la casa que ve}
\remark \noremark
\end{construction}


%\begin{construction}
%\name Finite Relative Clause, PP, nosplit, nonhuman
%\example \noDutch{Het huis waarnaar hij kijkt}
%\English \noEnglish{The house that he watches}
%\Spanish \noSpanish{La casa que mira}
%\remark \soon
%\end{construction}


\begin{construction}
\name Finite Relative clause, PP, no split, human
\example De man naar wie hij kijkt
\English the man who he is watching / watches
\Spanish \yesSpanish{El hombre al que mira}
\remark \noremark
\end{construction}


\begin{construction}
\name Prenominal Modifiers, Active
\example Een in de vulkaan zwemmend kind
\English \noEnglish{A child (who is) swimming in the vulcano}
\Spanish \yesSpanish{un ni\~{n}o que nada en el vulc\'{a}n}
\remark \noremark
\end{construction}


\begin{construction}
\name Prenominal Modifiers, passive
\example Een door hem gekocht huis
\English \noEnglish{A house (that is) bought by him}
\Spanish \yesSpanish{Una casa que ha comprado}
\remark \noremark
\end{construction}

\end{constructions}


\newpage

\subsubsection{Prepositional Phrases}

{\bf 4.3.3.1. Complements}

\begin{constructions}


%\begin{construction}
%\name Preposition, no complement
%\example binnen
%\English \noEnglish{inside}
%\Spanish \noSpanish{dentro}
%\remark The relevant words are currently treated as adverbs, but the grammar
% allows for a treatment of these words as intransitive Prepositions
%\end{construction}



\begin{construction}
\name Prep + NP-complement
\example in het huis
\English in the house, into the house
\Spanish \yesSpanish{en la casa}
\remark \noremark
\end{construction}


\begin{construction}
\name Prep + PP-complement
\example tot in de kerk
\English \noEnglish{till inside the church}
\Spanish \noSpanish{hasta dentro de  la iglesia}
\remark \noremark
\end{construction}


\begin{construction}
\name Prep + AdvP-complement
\example tot morgen
\English \noEnglish{till tomorrow}
\Spanish \noSpanish{hasta mana\~{n}a}
\remark \noremark
\end{construction}


\begin{construction}
\name R-word + Prep
\example erdoor
\English through it
\Spanish \noSpanish{a trav\'{e}s}
\remark \noremark
\end{construction}



\begin{construction}
\name PostP +NP-complement
\example de kerk in
\English into the church
\Spanish \yesSpanish{en la iglesia}
\remark \noremark
\end{construction}



\begin{construction}
\name CircumP +NP-complement
\example op de kerk af
\English towards the church
\Spanish \yesSpanish{hacia la iglesia}
\remark \noremark
\end{construction}


\begin{construction}
\name CircumP + R-word
\example hierop af
\English towards this
\Spanish \noSpanish{hacia esto}
\remark \noremark
\end{construction}



\end{constructions}

{\bf 4.3.3.2. Modifications}

\begin{constructions}
\begin{construction}
\name PP, adverbial degree modifiers
\example vlak voor de kerk
\English \noEnglish{right before the church}
\Spanish \noSpanish{}
\remark \noremark
\end{construction}





\end{constructions}

\newpage
\subsubsection{Noun Phrases}

{\bf 4.3.4.1. NPs without nominal head}

\begin{constructions}

\begin{construction}
\name proper names
\example Jan
\English  Jan 
\Spanish Jan
\example Duitsland
\English Germany
\Spanish  Alemania
%\example \noDutch{beide Duitslanden(\soon)}
%\English  \noEnglish{both Germany's(\soon)}
%\Spanish  \noSpanish{los dos Alemanias(\soon)}
\remark \noremark
\end{construction}

\begin{construction}
\name personal/possessive pronouns 
\example ik/mij/mijn, hij/hem/zijn, u/uw
\English  I, she, him, hers, we, our, ours, yours
\Spanish  yo, ella, nos, nosotros, mi, m\'{\i}o
\remark \noremark
\end{construction}

\begin{construction}
\name interrogative pronouns
\example wie, wat
\English  who, what 
\Spanish  qui\'{e}n, qui\'{e}nes, qu\'{e}
%\example \noDutch{wie van deze drie vrouwen (\untested) }
%\English   \noEnglish{which of these (\not)}
%\Spanish   \noSpanish{qui\'{e}n de estas mujeres (\not)}
\remark \noremark
\end{construction}

\begin{construction}
\name other pronouns
\example iets, iedereen, iemand
\English something / anything, 
everyone / everybody / anyone / anybody, 
someone / somebody / anyone / anybody 
\Spanish algo,  todo el mundo, alguien (nada, nadie)
%\example \noDutch{iedereen die haar ziet }
%\English \noEnglish{everyone who sees her}
%\Spanish \noSpanish{cada una que la ve/vea}
\example dit/dat
\English this, that
\Spanish esto, eso
\remark \noremark
\end{construction}

{\bf 4.3.4.2. NPs with determiner and nominal head  (no modifiers)}\\

{\bf NPs: simple determiner  +  noun}
\begin{constructions}
\begin{construction}
\name determiner = article

\example  de man/mannen
\English the man/men
\Spanish  el(los) hombre(s)
\example  het kind
\English the child 
\Spanish  el ni\~{n}o
\example  een huis
\English a house
\Spanish una casa 
\remark \noremark
\end{construction}

\begin{construction}
\name determiner = numeral
\example twee kinderen
\English two children
\Spanish dos ni\~{n}os 
\example veel huizen
\English many houses 
\Spanish \yesSpanish{muchas casas  }
\remark  
\end{construction}

\begin{construction}
\name determiner = demonstrative
\example deze kinderen 
\English  these children
\Spanish  estos ni\~{n}os
\example dat project
\English   that project
\Spanish   ese proyecto/ aquel proyecto
\example dit speelgoed
\English  these toys
\Spanish  estos juguetes
\example die huizen
\English   those boeken
\Spanish   esas casas/ aquellas casas
\remark \noremark
\end{construction}

\begin{construction}
\name determiner = possessive
\example mijn kinderen 
\English  my children, the children of mine
\Spanish  los ni\~{n}os de m\'{\i}
\example Jans huizen
\English  the houses of John / 
          \noEnglish{John's houses  }
\Spanish las casas de Jan 
\example ons speelgoed
\English  our toys 
\Spanish los juguetes de nosotros/nosotras
\remark In Spanish, proper names cannot be used prenominally.
\end{construction}

\begin{construction}
\name other determiners
\example alle kinderen
\English all children
\Spanish \yesSpanish{todos los ni\~{n}os}
\example elk kind
\English every child
\Spanish cada ni\~{n}o

\example beide huizen
\English  both houses
\Spanish \yesSpanish{ambas casas}
\example sommige huizen
\English some houses
\Spanish \noSpanish{algunas casas}
\example enkele huizen
\English  some houses
\Spanish \noSpanish{algunas casas}
\example verscheidene huizen
\English  several houses
\Spanish \yesSpanish{varias casas}
\example meer huizen
\English  more houses
\Spanish  m\'{a}s casas
\example genoeg kaas
%\English cheese enough 
\English enough cheese
\Spanish bastante queso
\remark \noremark
\end{construction}
\end{constructions}


{\bf NPs: partitive determiners  +  noun }
\begin{constructions}
\begin{construction}
\name determiner + van + definite article
\example twee van de kinderen
\English two of the children
\Spanish dos de los ni\~{n}os
\example sommige van de kinderen
\English some of the children
\Spanish \noSpanish{algunos de los ni\~{n}os}
\remark \noremark
\end{construction}

\begin{construction}
\name determiner + van + possessive determiner

\example twee van mijn huizen
\English two of the houses of mine 
%\noEnglish{two of my  houses}
\Spanish dos de las casas de mi
\remark \noremark
\end{construction}

\begin{construction}
\name determiner + van + demonstrative determiner

\example enkele van die huizen
\English  some of those houses
\Spanish \noSpanish{algunas de esas casas}
\remark \noremark
\end{construction}
\end{constructions}

{\bf NPs: other determiners}
\begin{constructions}

\begin{construction}
\name determiners with complement
\example meer melk dan kaas
\English more milk than cheese 
\Spanish  \noSpanish{m\'{a}s leche que queso }
%\example \noDutch{te veel werk om mee te nemen (\untested) }
%\English \noEnglish{too much work to ...}
%\Spanish \noSpanish{demasiado trabaho para llevarse}
\remark \noremark
\end{construction}

\begin{construction}
\name determiners preceded by a modifier 

%\example \noDutch{al drie van de kinderen (\soon)}
%\English  \noEnglish{already three of the children (\soon) }
%\Spanish \noSpanish{ya tres de los ni\~{n}os}
%\example \noDutch{bijna geen vrouwen (\not)}
%\English \noEnglish{almost no women(\not)} 
%\Spanish \noSpanish{casi ninguna mujer(\not)}
\example minder dan drie kinderen
\English  less than three children 
\Spanish  \noSpanish{menos de tres ni\~{n}os }
\remark \noremark
\end{construction}

\end{constructions}

{\bf 4.3.4.3. NPs with determiner and  modified head }

\begin{constructions}

\begin{construction}
\name modificator = adjective
\example de  zieke kinderen
\English the ill children / the children that are ill
\Spanish los ni\~{n}os enfermos 
\example twee oude huizen
\English two old houses / two houses that are old
\Spanish dos casas viejas 
\example sommige van de oude huizen 
\English some of the  old houses/some of the houses that are old
\Spanish  \noSpanish{algunas de las casas viejas}
\remark \noremark
\end{construction}

\begin{construction}
\name modificator = participle
\example een zwemmend kind
\English a child who is swimming
\Spanish un ni\~{n}o que nada
\example het door hem gekochte huis
\English the house bought by him
\Spanish \yesSpanish{la casa que ha comprado}
\remark \noremark
\end{construction}

\begin{construction}

\name modificator = numeral
\example alle honderd kinderen
\English  all hundred children
\Spanish \yesSpanish{(todos los) cien ni\~{n}os}
\example de twee oude huizen
\English the two old houses/ the two houses that are old
\Spanish las dos casas viejas
\example twee van de drie oude huizen
\English two of the three old houses 
\Spanish dos de las tres casas viejas
\remark \noremark
\end{construction}

\begin{construction}
\name modificator = PP
% \example \noDutch{(de) kinderen van mijn vader/hem}
% \English  \noEnglish{(the) children of my father/his}
% \Spanish  \noSpanish{(los) hijos de mi padre }
\example het boek van Jan
\English the book of Jan / \\
         \noEnglish{Jan's book}
\Spanish el libro de Jan 
\example de kaas op de tafel 
\English the cheese on the table / the cheese at the table
\Spanish \noSpanish{el queso en la mesa}
\remark In English the possessive PP {\em the children of his} 
contains a possessive pronoun, whereas in the Dutch counterpart 
a personal pronoun occurs: {\em de kinderen van hem}  \noremark
\end{construction}

\begin{construction}
\name modificator = clause
\example  de kinderen die ziek zijn
\English  the children who are ill / the ill children
\Spanish  los ni\~{n}os que est\'{a}n enfermos 
%\example de  waarop ik dol ben}
%\English \noEnglish{The cheese that I am fond of}
%\Spanish \noSpanish{El queso que me gusta mucho(\not)}
\remark \noremark
\end{construction}

\begin{construction}
\name modificator = NP (proper name)
\example mijn zus Margreet
\English my sister Margreet
\Spanish \noSpanish{mi hermana Margreet}
\example het project Rosetta 
\English the Rosetta project
\Spanish el proyecto Rosetta
\remark \noremark
\end{construction}

\begin{construction}
\name modificator = NP ("bijstelling") 
\example de vrouw, een actrice
\English the woman, an actress
\Spanish \noSpanish{la mujer, una actriz}
\example Margreet, mijn zus
\English  Margreet, my sister
\Spanish  \noSpanish{Margreet, mi hermana}
\remark \noremark
\end{construction}

\begin{construction}
\name other modifiers
\example een stuk kaas
\English a piece of cheese
\Spanish un pedazo de queso
\example de flessen melk 
\English the bottles of milk
\Spanish las botellas de leche
\example twee zakken oude aardappelen
\English two bags of old potatoes
\Spanish dos bolsas de patatas viejas
\remark In Spanish and English the modifier must contain a preposition 
where in Dutch this is absent.
\end{construction}
\end{constructions}

{\bf 4.3.4.4. NPs: nouns with a  complement}
\begin{constructions}

%\begin{construction}
%\name complement = PP/NP
%\untested
%\example \noDutch{(het) antwoord op de vraag}
%\English \noEnglish{The answer to the question}
%\Spanish \noSpanish{La respuesta a la pregunta}
%\example \noDutch{studenten in de fysica}
%\English  \noEnglish{students of physics }
%\Spanish  \noSpanish{estudientes de f\'{\i}sica }
%\example \noDutch{studenten fysica}
%\English  \noEnglish{students of physics }
%\Spanish  \noSpanish{estudientes de f\'{\i}sica }
%\remark The preposition {\em op} is not locally translated
%\noremark
%\end{construction}

\begin{construction}
\name complement = clause
\example de vraag of het regent
\English the question whether it is raining 
\Spanish  \noSpanish{la cuesti\'{o}n de si llueve }
\example \noDutch{de opmerking dat het regent}
\English  \noEnglish{the remark that it is raining}
\Spanish  \noSpanish{la afirmaci\'{o}n de que llueve/llueva }
\example het feit dat Jan ziek is
\English the fact that John is ill
\Spanish  \noSpanish{el hedro de que Jan esta enfermo}
\remark  The complement sentence is not a relative sentence. Cf.
{\em de} opmerking {\em die} gemaakt werd.
\end{construction}
\end{constructions}

{\bf 4.3.4.5. NPs: nouns without determiner}

\begin{constructions}

\begin{construction}
\name bare mass nouns and plurals
\example  kaas
\English cheese
\Spanish queso
\example  ossen
\English oxen
\Spanish bueyes
\example  speelgoed
\English toys
\Spanish juguetes
\remark \noremark
\end{construction}

\begin{construction}
\name modified mass nouns and plurals 
\example  oude kaas
\English old cheese / cheese that is old
\Spanish  queso viejo
\example  kaas die oud is
\English old cheese / cheese that is old
\Spanish queso que es viejo
\example  ossen uit Duitland
\English oxen from Germany / oxen out of Germany
\Spanish bueyes de Alemania
\example  flessen melk
\English bottles of milk
\Spanish botellas de leche
\remark \noremark
\end{construction}
\end{constructions}

\begin{construction}
\name omitted noun
\untested
\example twee (ik heb er twee)
\English two
\Spanish \noSpanish{dos}
%\example twee van de drie 
%\English  two of the three, the yellow one
%\Spanish  dos de los tres 
%\example \noDutch{de/een gele }
%\English  \noEnglish{a/the yellow one}
%\Spanish  \noSpanish{el/la/un/una amarillo/amarilla }
%\example \noDutch{de nieuwe uit Duitsland}
%\English \noEnglish{the new one from Germany}
%\Spanish \noSpanish{el nuevo/ la nueva de Alemania}
\remark \noremark
\end{construction}
\end{constructions}


{\bf 4.3.4.6 NP with external modifier}

\begin{constructions}

\begin{construction}
\name NP-external modifier
\example ook hij, ook Rosetta 
\English he too / he also / even he, Rosetta too / Rosetta also / even Rosetta
\Spanish  tambi\'{e}n \'{e}l, tambi\'{e}n Rosetta, 
\remark \noremark
\end{construction}
\end{constructions}

\subsubsection{Adjectival Phrases}

{\bf 4.3.5.1 Simple adjectives}

\begin{constructions}
\begin{construction}
\example mooi
\English  beautiful
\Spanish  hermoso(s)/a(s)
\remark \noremark
\end{construction}
\end{constructions}

{\bf 4.3.5.2 Modified adjectives}
\begin{constructions}
\begin{construction}
\name modifier = degree expression
\example zeer mooi
\English  very beautiful
\Spanish  muy hermoso(s)/a(s)
\example  te mooi 
\English  too beautiful 
\Spanish  demasiado hermoso(s)/hermosa(s)
%\example  \noDutch{te mooi om te doden}
%\English  \noEnglish{too beautiful to kill}
%\Spanish  \noSpanish{muy hermoso/hermosa para matar}
\example minder mooi dan gisteren 
\English less beautiful than yesterday
\Spanish \noSpanish{menos hermoso que ayer}
\example het meest geschikt
\English \noEnglish{((the) most appropriate}
\Spanish \noSpanish{(lo) m\'{a}s apto}
\example hoe lang 
\English how long
\Spanish cu\'{a}n largo
\example lang genoeg
\English long enough
\Spanish bastante largo/alto
\remark \noremark
\end{construction}

\begin{construction}
\name incorporated modifier 
\example mooier (= meer + mooi)
\English more beautiful
\Spanish m\'{a}s hermoso
%\example  \noDutch{drie meter langer }
%\English \noEnglish{?three meters longer}
%\Spanish \noSpanish{tres metros m\'{a}s largo}
%\example  hoeveel langer
%\English \noEnglish{How much longer}
%\Spanish \noSpanish{Cu\'{a}nto m\'{a}s largo}
\example het mooist(e kind)
\English most beautiful 
\Spanish \noSpanish{el/la/lo m\'{a}s hermoso/a}
\remark \noremark
\end{construction}

%\begin{construction}
%\name other modifiers
%\example \noDutch{mooi om naar te kijken }
%\English \noEnglish{beatiful to watch}
%\Spanish \noSpanish{hermoso para ver}
%\example \noDutch{leuk voor Jan \untested}
%\English \noEnglish{nice for Jan}
%\Spanish \noSpanish{divertido para Jan}
%\remark \noremark
%\end{construction}
%\end{constructions}

{\bf 4.3.5.3 Argument Structure of Adjectives}
\begin{constructions}
%\begin{construction}
%\name no subject, no complements
%\untested
%\example (het is) koud
%\English  \noEnglish{(it is) cold, }
%\Spanish  \noSpanish{(hace) fr\'{\i}o}
%example \noDutch{(het is) stormachtig}

%\English  \noEnglish{(it is) stormy}
%\Spanish \noSpanish{Hace tempestuoso}
%\example \noDutch{(het is) te laat }
%\English  \noEnglish{(it is) too late}
%\Spanish  \noSpanish{hace (demasiado) tarde}
%\remark \noremark
%\end{construction}

\begin{construction}
\name no complements
\example De muziek is mooi
\English The music is beautiful
\Spanish  La  m\'{u}sica es hermosa
%\example Jan wordt oud
%\English  (Jan is getting) old \untested
%\Spanish   \noSpanish{Jan se hace viejo}
\example \noDutch{(Het is) duidelijk dat het zal gaan regenen }
\English \noEnglish{It is clear that it will start raining}
\Spanish \noSpanish{est\'{a} claro que ir\'{a} a llover}
\remark \noremark
\end{construction}

\begin{construction}
\name one complement
\example (de muziek is) geschikt voor hem
\English (the music is) suitable for him
\Spanish (la m\'{u}sica es) id\'{o}nea para \'{e}l
\example (de muziek is) zeer voor hem geschikt 
\English (the music is) very suitable for him
\Spanish (la m\'{u}sica) es muy idonea para \'{e}l
%\example \noDutch{(Jan is) bang om te zwemmen }
%\English \noEnglish{Jan is afraid to swim \untested, }
%\Spanish \noSpanish{Jan tiene miedo de nadar}
\example (Jan is) benieuwd naar het project
\English (Jan is) curious about the project
\Spanish (Jan est\'{a}) curioso del proyecto
%\example \noDutch{(Jan is) ernaar benieuwd hoe het weer zal zijn}
%\English \noEnglish{}
%\Spanish \noSpanish{Jan est\'{a} curioso por saber como ser\'{a} el tiempo}
\example (zij is) deze man beu
\English (she is) sick of this man
\Spanish (est\'{a}) harta de este hombre
\remark \noremark
\end{construction}

%\begin{construction}
%\name more than one complement
%\example \noDutch{(Deze muziek is) mij niets waard}
%\English \noEnglish{}
%\Spanish \noSpanish{Esta m\'{u}sica no me vale nada}
%\example \noDutch{(Hij) is aan ons verplicht om te komen }
%\English \noEnglish{}
%\Spanish \noSpanish{Nos debe venir}
%\remark For Spanish there are no corresponding adjectives.
%The translation requires a corresponding verb, e.g. {\em valer}. \noremark
%\end{construction}

\begin{construction}
\name omitted complement
\example Deze muziek is zeer geschikt (voor IETS) 
\English This music is  very suitable
\Spanish Esta m\'{u}sica es muy id\'{o}nea 
%\example \noDutch{(Hij) is (aan IEMAND) verplicht om te komen \untested}
%\English \noEnglish{(This music is) very suitable}
%\Spanish \noSpanish{No debe a nadie venir}
\remark \noremark
\end{construction} 
\end{constructions}







\newpage
\subsubsection{Adverbial Phrases}

Modification of adverbs has been postponed. The relevant rules and 
transformations are in  general adapted copies of corresponding rules and
transformations in the Adjective subgrammars.\\

{\bf 4.3.6.1 Adverbial phrases: Derivation}
\begin{constructions}
\begin{construction}
\name Derived 2-place agent oriented verb modifying adverbs
\example  enthousiast
\English enthousiastically
\Spanish \noSpanish{entusiastamente}
\remark These are derived from the corresponding adjectives.
\end{construction}
\end{constructions}

\bigskip

{\bf 4.3.6.2 Adverbial phrases: Argument Structure}
\begin{constructions}
\begin{construction}
\name 1-place adverbial phrases (temporal, locative)
\example vandaag, hier
\English today, here
\Spanish \noSpanish{hoy, aqu\'{\i}}
\remark \noremark
\end{construction}

%\begin{construction}
%\name 1-place adverbial propositions (locative, directional, verb modifying)
%\example hier, hard 
%\English \noEnglish{here, hard}
%\Spanish \noSpanish{aqu\'{\i}, mucho}
%\remark \noremark
%\end{construction}

\begin{construction}
\name 1-place `ergative' adverbial propositions (sentential)
\example toevallig, misschien
\English \noEnglish{accidentally, maybe}
\Spanish \noSpanish{por cusualidad, quiz\'{a}(s0}
\remark \noremark
\end{construction}

\begin{construction}
\name 2-place agent oriented verb modifying  adverbial propositions
\example enthousiast 
\English \noEnglish{enthousiastically}
\Spanish \noSpanish{entusiastamente}
\remark \noremark
\end{construction}

%\begin{construction}
%\name 2-place subject oriented verb modifying  adverbial propositions
%\example graag
%\English \noEnglish{}
%\Spanish \noSpanish{}
%\remark There is no local translation, but cf. 4.4.1
%\end{construction}

\end{constructions} 

\newpage
\subsubsection{Constructions that are not yet operative}

\def\example{\item[] \it }

\def\remark{\item[] \rm }

In this section a list of Dutch constructions is given, which were mentioned in 
doc. R0081, but which the phrase translator is not yet able to deal with. In 
some cases this is merely a matter of time, in other cases there are real 
problems to be solved.\\

{\bf 4.3.7.1 Sentential Constructions}

\begin{constructions}
\begin{construction}
\name Imperative, overt subject
\example Komt u binnen
\example Weest u zich hier bewust  van
\remark \noremark
\end{construction}

\begin{construction}
\name Middle verbs
\example Het boek verkoopt goed
\remark There are syntax-internal problems and translational problems for
these constructions
\end{construction}

\begin{construction}
\name Topicalization 
\example Die jongen heb ik gezien
\remark This has intentionally been postponed to a later phase. The relevant
rules are copies or adaptations of the wh-shift and relativization 
transformations.
\end{construction}


\begin{construction}
\name PP out of NP
\example ik heb de boeken gelezen van Piet
\remark intentionally postponed
\end{construction}

\begin{construction}
\name S out of NP
\example Ik heb de boeken gelezen die op tafel lagen
\remark intentionally postponed
\end{construction}

\begin{construction}
\name Floating Quantifiers
\example samen zelf allemaal
\remark \noremark
\end{construction}

\begin{construction}
\name Subjectless sentences
\example In de kerk werd gezwommen
\remark \noremark
\end{construction}



%\begin{construction}
%\name ook, zelfs as modifiers of V
%\example hij heeft ook gezwommen
%\remark \noremark
%\end{construction}

\begin{construction}
\name Split antecedents
\example Hij stelde hem voor samen weg te gaan
\remark All relevant rule have been written. They have been switched off 
temporarily for testing purposes.
\end{construction}

\begin{construction}
\name Finite subject sentences
\example Dat hij zwemt verbaast mij 
\remark 
\end{construction}


\begin{construction}
\name Infinite subject sentences
\example Huizen kopen is mooi
\remark 
\end{construction}

\begin{construction}
\name Wh-inf
\example Het is onduidelijk wat te doen
\remark The construction is so marginal that it has been postponed
\end{construction}

\begin{construction}
\name prepositional object, Wh-movement, non-human with contraction
\example Waarnaar kijkt hij ?
\remark 
\end{construction}

\begin{construction}
\name Infinitival Relative Clauses
\example Het boek om te bestuderen ligt op tafel
\remark It has been postponed so that finite relatives can be 
tested extensively first.
\end{construction}

\begin{construction}
\name Relative Clauses with no overt antecedent
\example (hij koopt) wat hij ziet
\remark It has been postponed so that relatives with antecedents can be 
tested extensively first.
\end{construction}


{\bf Sentence Embedding: Adverbial Sentences}

\begin{construction}
\name Finite adverbial sentence
\example \noDutch{Toen hij zwom}
\remark 
\end{construction}


%\begin{construction}
%\name Finite adverbial sentence, Preposition
%\example \noDutch{Zonder dat hij naar hem kijkt}
%\English \noEnglish{Without him looking at him}
%\Spanish \noSpanish{Sin que lo/le mire}
%\remark \soon
%\end{construction}


\begin{construction}
\name Infinite adverbial sentence
\example \noDutch{Alvorens te zwemmen}
\remark 
\end{construction}


%\begin{construction}
%\name Infinite adverbial sentence, preposition
%\example \noDutch{Zonder te zwemmen}
%\English \noEnglish{Without swimming}
%\Spanish \noSpanish{Sin nadar}
%\remark \soon
%\end{construction}


%\begin{construction}
%\name Conditional conjunctionless adverbial sentence
%\example \noDutch{Zwemt hij, dan .. }
%\English \noEnglish{If he swims, then...}
%\Spanish \noSpanish{Si nada, ...}
%\remark \soon
%\end{construction}


\begin{construction}
\name `Balans' construction
\example nauwelijks was hij binnen, of het begon te regenen
\remark \noremark
\end{construction}

\begin{construction}
\name Purpose clauses, no gap
\example Hij ging weg om op tijd thuis te zijn
\remark \noremark
\end{construction}

\begin{construction}
\name Clock-time expressions
\example tien voor vier
\remark \noremark
\end{construction}

\begin{construction}
\name Date-expressions
\example 3 januari 1984
\remark \noremark
\end{construction}

\begin{construction}
\name Age-expressions
\example hij is drie jaar (oud)
\remark \noremark
\end{construction}

\end{constructions}


{\bf 4.3.7.2 Prepositional Expressions}

\begin{constructions}
\begin{construction}
\name Complex directional PP's
\example van Amsterdam naar Rome
\remark \noremark
\end{construction}


\begin{construction}
\name PP, NP degree modifiers
\example drie meter voor de kerk
\remark 
\end{construction}

\end{constructions}

{\bf 4.3.7.3 Noun phrases}

\begin{constructions}
\begin{construction}
\name Nouns with a non-lexicalized head:
\example de mooiste drie
\example de mijne
\example die twee van Jan
\example een van die twee
\remark \noremark
\end{construction}

\begin{construction}
\name Infinitives used as a noun
\example het koken van aardappelen
\example het leveren van materiaal
\remark \noremark
\end{construction}

\begin{construction}
\name Pronominal head + adjective + s
\example iets lekkers
\example veel moois
\remark \noremark
\end{construction}


\begin{construction}
\name Postnominal adverbial modifiers expressing comparison with {\em als}
\example een stad als Eindhoven
\remark \noremark
\end{construction}


\begin{construction}
\name Idiomatic determiners
\example een beetje kaas
\remark \noremark
\end{construction}


\begin{construction}
\name Complex determiners
\example alle drie de
\example rond de twintig
\remark \noremark
\end{construction}


\begin{construction}
\name `Een N van een N'
\example een schat van een kind
\example kanjers van vissen
\remark \noremark
\end{construction}


\end{constructions}



{\bf 4.3.7.4 Coordination}\\

No rules for coordination (constructions with {\em and} and {\em or}) 
have been written yet.

\end{constructions}




\def\construction{\item[] \mbox{} \begin{trivlist}}
\def\endconstruction{\end{trivlist}}
\def\name{\item[]}
\def\example{\item[] \it }
\def\remark{\item[] \rm}
\def\English{\item[{\bf English}]}
\def\Spanish{}
\def\noEnglish#1{}
\def\noSpanish#1{}

\subsubsection{English Constructions}

In subsection 4.3.2 - 4.3.6 we listed Dutch constructions and their English 
and Spanish counterparts. There are also English and Spanish  constructions 
that do not have a clear 
correlate in Dutch. They are listed here. They have been 
incorporated in the English 
and Spanish grammars and tested in those cases where they can be generated as a 
translation of a Dutch expression.\\

{\bf 4.3.8.1 Simple sentences}\\

{\bf Simple sentences: Verbpatterns}\\

There are certain verbpatterns that do not exist in Dutch, corresponding to
the differences in sentential embedding (see below). \\



{\bf Simple sentences: Voice}


\begin{constructions}
\begin{construction}
\name Passive, indirect object movement
\example He is given the house
\remark \noremark
\end{construction}


\begin{construction}
\name Passive, `prepositional object movement'
\example He is looked at
\remark \noremark
\end{construction}

\end{constructions}




{\bf Simple sentences: Miscellaneous}

\begin{constructions}

\begin{construction}
\name Particle hopping
\example I called the man up / I called up the man
\remark \noremark
\end{construction}




\end{constructions}




{\bf 4.3.8.2 Sentence Embedding}\\

{\bf Sentence Embedding: Argument sentences}

\begin{constructions}

\begin{construction}
\name Infinitival complements, ACI, with {\em  to}
\example Hij believes her to be swimming
\remark \noremark
\end{construction}

\begin{construction}
\name Infinitival complements, ACI, with {\em  for }and {\em  to}
\example I prefer for him to come
\remark \noremark
\end{construction}


\begin{construction}
\name Infinitival complements, ACI, small verb Clause
\example (I had) the church built
\remark \noremark
\end{construction}

\begin{construction}
\name Infinite complements, Acc-Ing
\example (I saw) him  swimming 
\remark \noremark
\end{construction}

\begin{construction}
\name Infinite complements, Poss-Ing
\example His smoking cigarettes annoyed me
\remark \noremark
\end{construction}

\begin{construction}
\name Infinite complements, Open-Ing
\example He started swimming
\remark \noremark
\end{construction}




\end{constructions}



\subsubsection{Spanish Constructions}

This is a list of Spanish constructions that do not have a clear 
correlate in Dutch, but are incorporated in the Spanish grammar.\\


{\bf 4.3.9.1 Simple sentences}\\




{\bf Simple sentences: Verbpatterns}\\

There are certain verbpatterns that do not exist in Dutch, corresponding to
the differences in sentential embedding (see below). \\



{\bf Simple sentences: Voice}

\begin{constructions}
\begin{construction}
\name {\em  Se}-Passive
\example Se venden bueyes
\remark \noremark
\end{construction}


\begin{construction}
\name {\em  Se}-Active
\example Se habla espa\~{n}ol
\example Se ve a Juan
\remark \noremark
\end{construction}

\end{constructions}




{\bf  Miscellaneous}


\begin{constructions}

\begin{construction}
\name Clitic pronouns, with nonfinite verb forms
\example (quiero d\'{a}r)selo
\example (quiere haber)lo dicho
\example (estoy compr\'{a}ndo)lo
\remark \noremark
\end{construction}


\begin{construction}
\name Clitic Pronouns, with finite verb forms
\example Me lo ha dado
\remark \noremark
\end{construction}

\begin{construction}
\name Clitic Climbing
\example se lo quiero dar
\remark \noremark
\end{construction}


\begin{construction}
\name Covert subject pronouns
\example (nosotros) nadamos
\remark \noremark
\end{construction}

\begin{construction}
\name {\em  A}-insertion  
\example Veo a Juan
\example Busco a un chico/ busco un chico
\remark \noremark
\end{construction}


\begin{construction}
\name {\em  Y}-support
\example hay tres hombres
\remark \noremark
\end{construction}

\begin{construction}
\name Imperative, first person plural
\example Nademos
\remark This corresponds to the adhortative in Dutch and English
\end{construction}

\begin{construction}
\name Sentence initial punctuation (!`?`)
\example !`venga!
\remark \noremark
\end{construction}


\end{constructions}



\newpage
{\bf 4.3.9.2 Sentence Embedding}\\

{\bf Argument sentences}

\begin{constructions}

\begin{construction}
\name Infinitival complements, with {\em  que}
\example Tiene que venir
\remark \noremark
\end{construction}

\begin{construction}
\name Infinite complements, Gerundio
\example estoy haci\'{e}ndolo
\example Sigo explic\'{a}ndolo
\remark \noremark
\end{construction}

\begin{construction}
\name Finite complements, Subjuntivo
\example Quiero que vengas
\remark \noremark
\end{construction}



\end{constructions}



\subsection{Complex translations}


In section 4.3 we enumerated Dutch syntactic constructs and their translations.
In many cases the corresponding constructs in English and Spanish are similar 
to the Dutch ones. Note that even then a thorough syntactic 
analysis is needed; a word by word translation will only in
exceptional cases be correct. However, especially difficult and interesting 
are those cases 
in which the translation relation is less straightforward, the so-called
{\em structural mismatches}, e.g. because a 
Dutch word is translated into an English word with a different syntactic 
category or subcategory. In section 4.4.1 we pay special attention to those 
cases. A 
special class of translation problems are idiomatic expressions and 
semi-idioms, of which examples are given in subsection 4.4.2.



\subsubsection{Structural mismatches}

The isomorphic grammar method proved its value as a general strategy to build a 
translation system, but it also appeared to be useful for the solution of 
several translation problems. During
this phase of the project special attention 
has been paid to so called {\em structural mismatches}.\\
Some examples of such non-trivial translation pairs are given below:\\


\def\soon{operative before 01 02 89}
\def\not{not operative before 01 02 89}
\def\Lisette{to be written by Lisette}
\def\untested{not tested yet}
\def\noremark{\vspace*{-2ex}}
\def\add{to be added}
\def\noS{No example Sentence}
\def\new#1{#1}
\newif\ifexone
\def\constructions{\begin{trivlist}}
\def\endconstructions{\end{trivlist}}
\def\trproblem{(translation problem)}
\def\askM{}


\def\construction{ \exonetrue \item[] \mbox{} \begin{trivlist}}
\def\endconstruction{ \end{trivlist}}
\def\name{\item[]}
\def\example{\item[] \ifexone \exonefalse 
\begin{tabular}{p{.33\textwidth}p{.33\textwidth}p{.33\textwidth}} 
\it \else \\ \it \fi}
\def\remark{\end{tabular} \exonetrue \item[] \rm}
\def\English{\exonefalse & \it}
\def\Spanish{\exonefalse & \it}

\def\noDutch#1{$<$#1$>$}
\def\noEnglish#1{$<$#1$>$}
\def\noSpanish#1{$<$#1$>$}


\begin{constructions}

\begin{construction}
\name Verbs with NP or PP as object
\example Zij houdt van de man
\English She loves the man
\Spanish Quiere al hombre
\remark \noremark
\end{construction}

\begin{construction}
\name subject versus indirect object
\example Ik zwem graag
\English I like to swim / swimming
\Spanish Me gusta nadar
\remark \noremark
\end{construction}


\begin{construction}
\name Question form
\example Houdt zij van de man? 
\English Does she love the man?
\Spanish  ?` Quiere al hombre ?
\remark \noremark
\end{construction}


\begin{construction}
\name singular versus plural form
\example Het speelgoed is duur
\English The toys are expensive
\remark \noremark
\end{construction}


\begin{construction}
\name simple versus periphrastic tense 
\example Hij heeft gisteren gezwommen
\English He swam yesterday
\Spanish Nad\'{o} ayer
\remark \noremark
\end{construction}

\bigskip
\bigskip

\begin{construction} 
\name Adverb versus verb
\example Hij zwemt graag
\English He likes to swim / swimming
\Spanish Le gusta nadar
\example Hij zwom toevallig 
\English He happened to swim
\remark \noremark
\end{construction}



\begin{construction}
\name combination of tense and time adverbial
\example Hij zwemt al een uur
\English He has been swimming for an hour
\Spanish Lleva nadando 
         desde hace una hora
\remark \noremark
\end{construction}

\begin{construction}
\name Er
\example Er wordt gezwommen 
\English One is swimming
\Spanish Se nada
\remark \noremark
\end{construction}


\begin{construction}
\name Finite versus infinite sentences
\example Het blijkt dat hij ziek is
\English He turns out to be ill
\example Ik zag een zwemmend kind
\English I saw a child that was swimming
\Spanish Vi a un ni\~{n}o que nadaba
\remark \noremark
\end{construction}

\begin{construction}
\name Participium versus relative sentence
\example Ik zag de aardbeien etende ezel
\English I saw the donkey that was eating strawberries
\Spanish Vi el asno que com\'{\i}a fresas
\remark \noremark
\end{construction}


\subsubsection{Idioms and semi-idioms}

{\bf 4.4.2.1 Idioms}


\def\soon{operative before 01 02 89}
\def\not{not operative before 01 02 89}
\def\Lisette{to be written by Lisette}
\def\untested{not tested yet}
\def\noremark{\vspace*{-2ex}}
\def\add{to be added}
\def\noS{No example Sentence}
\def\new#1{#1}
\newif\ifexone
\def\constructions{\begin{trivlist}}
\def\endconstructions{\end{trivlist}}
\def\trproblem{(translation problem)}
\def\askM{}


\def\construction{ \exonetrue \item[] \mbox{} \begin{trivlist}}
\def\endconstruction{ \end{trivlist}}
\def\name{\item[]}
\def\example{\item[] \ifexone \exonefalse 
\begin{tabular}{p{.33\textwidth}p{.33\textwidth}p{.33\textwidth}} 
\it \else \\ \it \fi}
\def\remark{\end{tabular} \exonetrue \item[] \rm}
\def\English{\exonefalse & \it}
\def\Spanish{\exonefalse & \it}

\def\noDutch#1{$<$#1$>$}
\def\noEnglish#1{$<$#1$>$}
\def\noSpanish#1{$<$#1$>$}

\begin{constructions}

\begin{construction}
\name idiom, Verb + Noun Phrase
\example Hij poetste de plaat
\English He bolted, he slung his hook
\Spanish Escurr\'{\i}a el bulto, escurri\'{o} el bulto
\example Dit spant de kroon
\English This takes the cake
\example Hij stierf
\English He kicked the bucket
\Spanish Muri\'{o}
\example Hij begroef de strijdbijl
\English He buried the hatchet
\example Hij stal de show
\English He stole the show, he stole the scene
\remark \noremark
\end{construction}


\begin{construction}
\name idiom, Verb + Prepositional Phrase
\example Hij zit op de wip
\English \noEnglish{He has his job on the line}
\remark \noremark
\end{construction}


\begin{construction}
\name idiom, Verb + Noun Phrase + Noun Phrase
\example Hij bindt de kat de bel aan
\English He bells the cat
\remark \noremark
\end{construction}

\begin{construction}
\name idiom, Verb + free argument + Noun Phrase
\example Hij geeft haar de bons
\English He gives her the push
\example Hij ontslaat haar
\English He gives her the boot
\remark \noremark
\end{construction}


\begin{construction}
\name idiom, Verb + Noun Phrase with bound anaphor
\example Hij verloor z'n geduld
\English He lost his cool, he lost his patience
\example Hij hield z'n mond
\English He held his tongue
\remark \noremark
\end{construction}


\begin{construction}
\name idiom, Verb + free argument + Prepositional Phrase
\example Hij liet haar in de steek
\English He left her in the lurch
\remark \noremark
\end{construction}

\begin{construction}
\name idiom, Verb + Noun Phrase with free argument
\example Zij brak Jans hart
\English She broke Jan's heart
\remark \noremark
\end{construction}

\begin{construction}
\name idiom, Verb + Sentence
\example Hij heeft haar laten zitten
\English He dumped her, he left her in the lurch
\remark \noremark
\end{construction}

\begin{construction}
\name Translation-idiom, Verb + Sentence
\example Hij liet haar de os zien
\English He showed her the ox, he showed the ox to her
\Spanish Le mostr\'{o} el buey a \'{e}l
\example Hij liet de os zien
\English He showed the ox
\Spanish Mostr\'{o} el buey
\remark A translation-idiom is a complex expression like {\em laten zien}, which
is not idiomatic from a monolingual point of view, but which is treated as an 
idiom because of a complex translation relation.
\end{construction}

\bigskip

{\bf Semi-idioms}\\

Semi-idioms are verbal constructions with a `light' verb of which the meaning 
and thus the translation depends on the arguments.\\

\begin{construction}
\name Semi-idiom, Verb + Noun Phrase
\example Hij nam een bad
\English He had a bath
\Spanish Se  di\'{o} un ba\~{n}o
\example Hij gaf een schreeuw
\English He gave a shout
\Spanish Di\'{o} un grito
\remark \noremark
\end{construction}


\begin{construction}
\name Semi-idiom, Verb + Noun Phrase + Noun Phrase
\example Hij gaf hem een trap
\English He gave him a kick
\Spanish Peg\'{o} / pegaba un puntapi\'{e}
\remark \noremark
\end{construction}


\begin{construction}
\name Semi-idiom, Verb + aan + Noun Phrase + Noun Phrase
\example Hij gaf aan hen een demonstratie
\English He gave them a demonstration
\Spanish Les hizo  una demonstraci\'{o}n
\example Hij schonk aan hen aandacht
\English He paid attention to them
\Spanish Les  di\'{o} atenci\'{o}n a ellos/ellas
\remark \noremark
\end{construction}

\end{constructions}




\subsection{Dictionaries}


In the course of the project we acquired tapes containing a structured 
representation of the texts in the Van Dale dictionaries Contemporary Dutch, 
Dutch-English and English-Dutch. 
We have put considerable effort in investigating to what extent these 
dictionaries, which were designed for human users, could be used for automatic 
extraction of data in a format useful for the Rosetta dictionaries. 
With a few exceptions, the results were rather negative.\\

The main causes are:

\begin{itemize}

\item For our purposes we had to merge information from the three beforementioned 
dictionaries (e.g., Contemporary Dutch for Dutch morphology, Dutch-English for 
the translation into English and English-Dutch for English morphology). This 
merging turned out to be very problematic. A word in one dictionary cannot 
always be found in another dictionary. The number of meanings in Contemporary
Dutch may differ from the number of meanings in Dutch-English. An English 
translation found in Dutch-English cannot always be found in the English-Dutch 
dictionary (This is usually the case when a translation consists of more than 
one word, which occurs rather often). 

\item Much monolingual, especially syntactic, information that we need is not
given in Van Dale. Van Dale does not give much more than the syntactic 
categories.

\item A lot of information is given in a format, that is suited for human readers
but not for automatic extraction of information. E.g., much information is 
given in the form of examples. No clear distinction 
is being made between example 
sentences and idiomatic expressions and there is no consistent way of 
indicating in the latter what belongs to the idiom and what is a free argument.

\item In the cases that the information is - in principle - represented in a 
suitable way for automatic extraction, there are still many exceptions, due to
typing errors or to incidental deviations from the canonical representations.\\

\end{itemize}

This led us to the following decisions about the size of the Rosetta 
dictionaries and about the way to fill them.

We make a  distinction between open categories (noun, verb, adjective, 
adverb) and closed categories (prepositions, pronouns, articles etc.).
The test dictionaries for Dutch, English and Spanish contain 
all words of closed categories (about 800) and a small 
selection of words of open categories (about 450). 
For idiomatic expressions we included only a limited number of examples in
the lexicon.

For the closed categories Van Dale has 
only been used for listing the words. All morphological and syntactic 
information for these words (and the translations into Spanish) 
has been entered manually.

For the open categories the 
information was entered manually for the selected 450 words.
This lexicon will be extended to about 5000 Dutch words (corresponding to 12000 
meanings) and their English translations in the next half-year.  
Since October 1988 two students are employed 
who specify syntactic information for 
these words.

For this activity the Van Dale dictionaries are used in two ways:
(i) defining the translations of the Dutch words into English (including 
brief meaning descriptions if the word has more than one meaning), (ii) 
morphological information is derived automatically from the entries in the
Van Dale dictionaries as much as possible. 
In both cases there is some 
additional manual work to be done, because of irregularities in the way the 
information is represented or because of errors.\\

For the word translator the Van Dale dictionaries are 
of more use (cf. section 5).\\


From the rather negative remarks in this section one should not draw the 
conclusion that the Van Dale dictionaries could not be useful at all for a 
machine translation project. They certainly contain a lot of useful 
information, but in order to use it fruitfully more man-power is needed than we 
had available. 

In section 6 we will draw some conclusions from our experiences with Van Dale.

\newpage


\section{Rosetta3 word translator}

The word translator is a system that gives all possible translations of single 
words, not only stems but also inflected forms. Given the 
work on the phrase translator, it could be made with a small extra effort.

There are at least two possible applications for a
 word translator.

In the first place, it could be useful in 
as a stand-alone application, as an extension of the functionality offered by 
an electronic dictionary.
E.g., if a user needs the translation of a plural noun or a past 
participle of a verb, he does not have to look up the stem first and then 
decide about the correct inflection, but can get the right form immediately. 
This system may be especially useful if a user wants to look up words in a 
foreign language text and is not capable of deriving  the stem from the unknown
word, e.g. it is  not obvious that {\em di\'{o}} is a form of the Spanish verb 
{\em dar}.\\
The current system gives simply all possible 
translations of the input word without any further explanation. 
In order to be really useful as a stand-alone tool 
the system should provide not just the translations of the word, 
but also
additional information, e.g. that {\em di\'{o}} is the past tense of {\em dar}.
At the moment, it gives only the translated words. If the word 
translator is used interactively, it gives for ambiguous words 
the meaning descriptions.

Another application of the word translator might be to integrate it in the 
phrase translator as part of a set of 
`robustness measures' to enable the system to `fail softly'. If the phrase 
translator is not able to analyse a phrase adequately, the system may try to 
find parts that it can analyse and translate them locally. With such an 
approach the last resort would be to translate word by word. For this purpose a 
version of the word translator would be useful. 


The word translator is organized in the same way as the phrase translator, i.e. 
with the same subdivision into eight components (fig. 7). The rules of the 
morphological components are exactly the same as in the phrase translator. 
The syntactic rules are different in most cases, and they are rather simple. 

The word translator has been developed for Dutch-English and for English-Dutch, 
but for English-Dutch the dictionary is less reliable (it is just the reverse 
of Dutch-English).

\subsection{Outline}
The word translator has been developed for Dutch-English and English-Dutch (the 
latter only for a small test dictionary).
The input for the word translator is any word form of Dutch or English. The 
output is formed by all possible translations of this word form, possibly 
consisting of 
more than one word. The input word form can be found in the 
dictionary if it is of a syntactic category not allowing for inflection or 
derivation (e.g.\ an article: {\em the\/}). If it is a derived or inflected 
form ({\em mice, 
badly\/}), the word form must be dealt with by morphology first. This component
is shared with the Rosetta3 system.

Although in principle the input to the word translator may consist of only one 
word, there are cases in which a multi-word input is allowed or even 
obligatory. This holds true especially for verbs taking an obligatory 
preposition or particle, since they have quite a different meaning than the 
bare verbs, e.g.\ {\em count\/} means something different than {\em count on\/}, 
and {\em make \/} and {\em make up\/} are only vaguely related, having 
completely different translations in other languages. 

\subsection{Verbs}
The word translator takes
care of present and past tense indicative verb forms and participles, 
subjunctives, infinitives, and imperatives. 
For English, the continuous tenses 
are produced (only for non-stative verbs), but not analysed, since a multi-word 
input is not allowed: {\em is singing\/}.

Slightly problematic is the interpretation of e-forms of Dutch participles:
{\em getekende\/}. These have two different functions with different meanings.
When used attributively (het {\em getekende \/} exemplaar), they are simply 
a spelling variant of the basic participle; the word translator accepts such 
e-forms in analysis, but does not generate them. However, the same form may 
have been used as a nominalisation (de {\em getekende\/} is al verkocht), in 
which case the meaning of the participle is more extensive, to be translated 
into English by means of a construction with {\em one\/}: the {\em signed one\/
}. At the moment, both translations are produced, although there are some
restrictions on the nominalised interpretation. However, these restrictions 
cannot be formulated using only morphological attributes.

The system also deals with reflexives, particles and 
fixed prepositions. For Dutch, different word orders are possible in analysis
({\em bel op\/} vs.\ {\em opbel\/}, {\em zich scheert\/} vs.\ {\em scheert 
zich\/}), but in generation only main sentence word order is produced.

\subsection{Nouns and Propernouns}
The system takes care of singular and plural forms of nouns, and of the Dutch 
diminutive {\em -je\/}: {\em tafeltje\/} $ \Rightarrow $ {\em small table\/}.
If a noun is a (singular) mass noun in one language ({\em schoeisel\/}) 
and translates into a count noun in the other language ({\em shoe\/}), it will 
be given a plural form: {\em shoes\/}.

The system also deals with genitives, both for English, where {\em 
's\/} is 
glued to the noun, and for Dutch, which has real inflectional genitives: {\em 
broers\/} $  \Rightarrow $ {\em brother's\/}. For those cases where Dutch does not 
allow an inflectional genitive, constructions with {\em van de/het\/} will be 
produced: {\em horse's\/} $ \Rightarrow $ {\em van het paard\/}.

\subsection{Adjectives and Adverbs}
The rules take care of positive, comparative and superlative forms. In Dutch, 
positives and comparatives with an -s ending are also allowed in analysis: 
(iets) {\em moois, mooiers\/}. In Dutch analysis, the e-form of (attributive)
adjectives is accepted ({\em mooie}), but this form is not generated by the English-Dutch 
version. Nominalised e-forms are 
dealt with in the same way as was described for participles. In case an 
adjective takes an obligatory preposition, the reverse word order in English is 
produced for nominalised adjectives: {\em green one\/} vs.\ {
\em one afraid of\/}.

For those adjectives and adverbs that no not have an inflectional comparative 
and superlative, a construction with {\em meer/meest - more/most\/} is 
generated. The Dutch AllerSuperlative {\em allermooist\/} is accepted in 
analysis only, and is translated into an ordinary superlative: {\em most 
beautiful\/}. For the superlative of adverbs, the articles {\em het - the\/} 
are generated: (zij zingt) {\em het mooist\/}.

In many cases Dutch adjectives can be used as an adverb too. In these cases 
they are translated into both the adjective and the adverb in English (e.g. 
{\em slecht} vs. {\em bad, badly}).

\subsection{Pronouns}
The Dutch personal pronoun {\em gij\/} is accepted in analysis, but not 
generated. It is translated into {\em you\/},
since the English pronoun {\em thou\/} is not dealt with. Reduced forms of 
Dutch personal pronouns ({\em 'm, me\/}) are accepted, but not generated. The 
generalized personal pronoun {\em je\/} is translated into the English 
indefinite pronoun {\em one\/}.

Possessive pronouns are also accepted in reduced form ({\em m'n, je\/}) but not 
generated. The translation of the English possessive pronoun {\em its\/} is 
{\em ervan\/}. In analysis, the possessive form of Dutch possessive pronouns is 
allowed: {\em mijner\/}. This form translates into English {\em of my\/}. For
English possessive pronouns used on their own ({\em mine\/}), the Dutch 
translation introduces the definite articles {\em de/het\/}: {\em de/het mijne
\/}. Since
{\em jullie\/} does not have a comparable form, an extra rule is written to 
produce {\em die/dat van jullie\/}. A third rule just produces {\em van mij\/}, 
for translation of constructions like: (these are) {\em mine\/}.

In Dutch, the interrogative pronoun {\em wie\/} shows different forms
for the possessive when referring to masculine or feminine beings:
{\em wiens, wier\/}. The English {\em whose\/} is translated into 
both these forms. The Dutch pronoun {\em diens\/} is dealt with in analysis 
only, and translates into {\em his\/}.

For indefinite pronouns, there is a rule for genitives: {\em iemands - 
somebody's\/}.

\subsection{Determiners}
In Dutch, determiners may have e-forms just like participles and adjectives 
({\em vele\/}), and also have e-forms ({\em velen\/}). All possible forms are 
generated as translation of English determiners, since no distinction can be 
made between different uses of the determiner.

\subsection{Dictionary}






The word translator is operational for all words in the test dictionary of the 
phrase translator (cf. section 4.5). However, we are currently trying to 
include more words by making use of the Van Dale dictionaries. The problems
with the conversion of the Van Dale 
dictionaries into Rosetta dictionaries, mentioned in section 4.5, do not all 
apply here. For most categories
the 
morphological information in Van Dale is sufficient for the word translator,
although the mapping from 
the representation in Van Dale to a Rosetta representation is not trivial.
In some cases Van Dale does not give the required information at 
all, e.g. 
it is not indicated whether the comparative of an adjective is with {\em -er} or with 
{\em more}.\\

At this moment we are integrating the Van Dale nouns
for which the necessary information 
can be derived automatically (about 50 000 nouns, with 75 000 meanings); 
we expect to add verbs and adjectives as well.
As long as there has not been manual inspection of the results, the word 
translator will make 
incidental errors for these words. 

\newpage

\section{Discussion of results}

In this section we will discuss the results of the project, in
the perspective of the project as a whole. First we will recapitulate the 
original plans and the revisions we made during the definition phase.\\

\subsection{Original and revised plans}


As was pointed out in 
the original request for subsidy (Subsidie-aanvraag aan Nehem, Rosetta doc. 
nr. 7) Rosetta is a six-year project. Its main goal is the 
development of 
a multilingual translation system  Rosetta4 for the languages Dutch, English 
and Spanish. 


The project was planned to 
consist of an introductory phase of one year, a second phase of 2.5 
years, to be called the Rosetta3 phase, and a final phase of 2.5 years, the Rosetta4 phase.
 
During the Rosetta3 phase, there would be 
two activities in parallel:

\begin{itemize}

\item The development of a fairly simple system Rosetta3. 

\item Preparatory research with respect to Rosetta4. 

\end{itemize}

Rosetta3 
was characterized as a {\em phrase translator}, a system that makes 
use of a large dictionary, but that also uses morphological and syntactic 
information. It would not only translate word stems , but also 
give all possible translations of inflected 
word forms, idiomatic expressions, very simple sentences and phrases.

The original idea was that the formalism and the software of Rosetta3 would be
similar to those of Rosetta2, the small-scale experimental
 system that was developed before 
the project actually started.

The Rosetta3 phrase translator would not be developed for Spanish, but in
order to be well-prepared for Rosetta4 we planned to have 
the linguistic 
work for Spanish, 
especially with respect to morphology,
at the same level as for Dutch and English. For this purpose a `test version'
of Rosetta3 
for Dutch-Spanish would be developed as well, with a very small test dictionary 
(about 200 words).\\

  
The subsidy by Nehem covers the activities of the first three years,
i.e. the introductory phase and the major part of the second phase,
during which the intermediate results, the 
phrase translator Dutch-English and the test-version for Dutch-Spanish would be 
developed. Half a year later the English-Dutch phrase translator and the 
English-Spanish test version would be completed.


During the definition phase of the project in the first year 
the goals were formulated more precisely and also slightly revised (cf. 
second half-yearly report, February 1986).
The main decisions were:

\begin{itemize} 


\item We decided to merge the two before-mentioned 
activities, the Rosetta3 development and the preparatory research for Rosetta4.
The main reason was that during the introductory year interesting 
ideas for improvements of the system had arisen (cf. the next point).
It would have 
been demotivating to postpone their implementation until the
Rosetta4 phase and to develop Rosetta3 making use of the restricted
formalism and software of 
Rosetta2. Therefore we decided to aim at a more advanced system 
Rosetta3 right away, so that Rosetta4 could be a straightforward extension of 
this system. 

\item Changes in the formalism.
Although the global structure of Rosetta2 was maintained (cf. figure 7), 
we decided to make several 
important changes at the level of the components of an M-grammar and the 
corresponding modules of the system.
The morphological component was redesigned, among other things
 to deal 
with morphological derivation. In the syntactic component there was a need for 
more structure, which led to the concept of a controlled M-grammar, as 
described in section 2.3. A consequence of this decision was a complete 
re-design and a new implementation of the system's eight modules.

\item Lingware compilers. It was decided to formalize the notation of 
M-rules, the syntactic rules of an M-grammar,
 and
to develop rule compilers for them. 
For the  Rosetta2 system a preliminary notation of linguistic 
rules had been 
developed, but there were no software tools to support this. Ultimately all the 
rules had to be reformulated in Pascal `manually'. This way of working could 
not be maintained in the Rosetta3 phase, where the grammars would be much 
larger and where the rules would be written by linguists instead of computer 
scientists. Later on it was decided to develop compilers for {\em all} 
linguistic information.


\item Software management system. It turned out to be absolutely necessary to 
control and manage the development of Rosetta3 by means of a software 
management system. As there was no system available under VMS that satisfied 
our needs, we decided to develop it ourselves.

\item Word translator. It was decided to make a distinction between the two before-mentioned 
functions of Rosetta3: translation of inflected words and translation of
simple sentences and phrases. These functions would be performed by two 
different versions of Rosetta3: the word translator and the phrase translator.
One of the motivations for this was that the phrase translator should try to 
interpret its input as a sentence or at least as a complete phrase, 
while the word translator should not do so.
(E.g. the word {\em loop} will be interpreted by the phrase translator as an 
imperative sentence, but the word translator should recognize it both as a verb 
and as a noun.)

Another motivation for the distinction was the growing 
insight that it would not be 
possible to make a large and adequate dictionary for the phrase translator, but 
that this might still be possible for the word translator. 

\item Specification of syntactic constructs. Rosetta3 was not planned to
be tuned to a specific kind of texts. On the other hand it would not be 
realistic to expect that it could deal with all possible language constructs.
In order to have a clear measure of success, we made a long list of constructs
(doc. R0081) and indicated what constructs Rosetta3 would have to deal with.
This subset was rather ambitious, so implicitly it was decided that 
Rosetta3 would be more 
sophisticated than originally planned, not only from a 
formal and computational, but also from a linguistic point 
of view. 

As for the morphological component, it was decided that Rosetta3 would 
have to deal with inflection 
completely and with derivation only for a few constructs.

\item Size of dictionaries. 
Aiming at a sophisticated grammar had consequences for the information that the 
monolingual 
dictionaries would have to contain. On the other hand it turned out that 
the Van Dale dictionaries contained only a small part of this information and
that there were also problems with automatically extracting the information 
that it contained. In the second half-yearly report we already predicted that 
we would have to make a choice between (i) a 
small dictionary, filled manually, and (ii) a dictionary based on the 
Van Dale, 
but with incomplete or incorrect information for most of the entries.

Ultimately we have chosen for the first option (cf. fifth half-yearly report, 
September 1987), but we do try to use Van Dale for the word 
translator. 

\end{itemize}


\subsection{Discussion}

We have met the goals formulated in 6.1 by achieving 
the results described in the previous sections:

\begin{enumerate}

\item The Rosetta formalism. This is a formalism for the description of 
natural languages and 
the relation between languages, including formal notations for these 
descriptions.

\item The Rosetta environment. This includes 
the design and implementation of algorithms for 
analysis, translation and generation of natural language expressions, based on 
the Rosetta formalism,  
compilers for the beforementioned 
notations, a software management system and other software tools. 
The Rosetta environment and the
developed systems run under the operating system VMS.

\item The Rosetta3 phrase translator. This is 
an experimental translation system, for Dutch - English, which gives possible 
translations of short phrases which may contain
a large variety of natural language constructs. For Dutch - Spanish
a `test version' has been developed. Both systems make use of a 
small test dictionary (about 1200 words). The Dutch - English dictionary will
soon be extended to 5000 words (corresponding to 12000 meanings).
The Spanish grammar in the 
Dutch - Spanish test version is completely equivalent in linguistic 
power to the Dutch and English grammars, only with respect to testing 
and correcting there is a  delay.

The  morphological components  deal with inflection 
completely, for the three languages, for analysis and generation.

In addition a Dutch generation component has been produced and the major parts 
of the Spanish and English analysis components (everything except the 
surface parsers and the bi-lingual dictionaries), 
so that phrase translators for 
the other language pairs can be completed soon.


\item The Rosetta3 word translator. This is a relatively simple system that
gives all possible translations of inflected words, currently 
for the language pairs Dutch 
- English and English - Dutch. It deals with the inflection completely and with
some cases of morphological derivation. 
Originally it made use of the before-mentioned test 
dictionary, but it is now extended to a large part of the Van Dale dictionaries.

\end{enumerate}

Some additional data:

\begin{itemize}

\item At the moment the Rosetta environment system has to manage
5700 files (160 MByte), of which 1300 files (containing 620 000 lines)
are real source files (either lingware or 
original Pascal). The other files are generated files. \\

\item The executable of the Dutch-English phrase translator requires 14 MBytes of 
memory, dictionaries not included.\\

\item  On a VAX8820 
the translation of 
the shortest possible sentence ({\em hij zwemt}) by the phrase translator 
requires 
2 seconds of cpu-time. Other sentences require more, but in general the example 
sentences of section 4.3 take less than a minute.

The word translator translates a single inflected word in a fraction of a 
second. 

\end{itemize}

{\bf Discussion of the results}

\begin{itemize}

\item {\bf Formalism and environment}.
The isomorphic grammar method has stood the test of being used by a group of 
linguists for developing large grammars. We have more confidence than at the 
start of the project in the possibility to add other grammars, for Germanic and 
Romance languages, without needing drastic revisions of the already existing 
grammars.

The reversibility of the M-grammars 
allows the linguists to design their grammars in a generative way and then 
have an analytical version too. This works very 
well, although the use for syntactic 
analysis has to be kept in mind, for efficiency reasons.

As for the dictionaries, isomorphy, 
reversibility and especially interlinguality may be more problematic. If the
ultimate application of the system requires is bi-lingual, it is advisable to 
use bi-lingual dictionaries (i.e. to use an intermediate language of which the 
terms correspond to `source language meanings').


The formalism and notation for the morphological and syntactic rules has 
enabled us to write sophisticated grammars, covering a large
part of the three languages. The price for the large expressive power of 
the notation is that especially the M-rules are long and rather complex. 

The lingware compilers and the software management system \RBS\ have proved to 
be valuable and in fact indispensable tools. \RBS\ could be useful for other 
large software projects as well. The Rosetta software environment as a whole is
a result of the Rosetta3 phase that would be extremely 
 useful for any large-scale 
natural language project.


\item {\bf The phrase translator}\\
The development of the three isomorphic  grammars was organized as follows.
First a global isomorphic `scheme' of subgrammars and rule classes 
was devised for the three 
languages. Then the rules were worked out in detail for a part of 
Dutch and subsequently 
for the same part of
 English and Spanish. Sometimes the rule scheme had to be revised because of
problems met during the writing of the rules, but usually this method 
worked out well. At the moment the grammars that have been written
for the three languages have more or less equal power. The apparent differences
in the construction list of 4.3 are merely 
a matter of testing. 

The Dutch rules were tested first by combining the Dutch analysis and the Dutch 
generation component. Testing of English and Spanish rules could only start 
after the Dutch analysis component analyzed its first sentences. As a 
consequence, the testing and correcting of the English and especially 
the testing of the Spanish grammars lags behind.
For English we have tried and 
succeeded  to keep the gap small. Because of the limited cpu capacity
during the testing phase and 
the special status of Spanish in 
the Rosetta3 phase of the project, we have given priority to the testing
of Dutch and English and accepted some delay for Spanish, but this gap
will be bridged soon.

As for morphology, there were no problems with testing the generation 
components, because
we wrote both the analytical and the generative rules, for all three languages,
and then made a `short-cut' 
between the components A-MORPH and G-MORPH for each language. This proved to be 
a very pleasant and effective way of testing.

 We gained a lot of experience 
in the possibilities and impossibilities of using existing dictionaries for the 
development of machine dictionaries. Currently two university students are 
filling dictionaries of about 5000 words 
for Dutch and English; due to this experience we will be 
able to make reliable estimates about the amount of work involved in filling 
large dictionaries for our purposes. 
We plan to do this in collaboration with CELEX, the Centre 
for Lexical Information in Nijmegen. There is also a plan for a common project 
of NBBI, Van Dale, Eurotra and Rosetta to develop a lexical data base for 
Dutch-Spanish that would be useful for each of 
the partners.\\


{\bf Inefficiency}

The main weakness of the Rosetta3 phrase translator is its inefficiency.
This makes it impossible at the moment to translate long sentences, although 
the grammar is capable of dealing with them. The main source of inefficiency at 
the moment is that the surface grammar assigns too many candidate surface 
trees to a sentence. 
Because of this not only the surface parser takes much time, but 
also the M-parser, which has to deal with all the outputs of the surface parser.

In the near future we will investigate several ways of improving efficiency.

\begin{enumerate}
\item {\bf Hardware}. Part of the problem can be solved by making use of faster 
machines. Especially interesting in this respect is the connection between the 
Rosetta project and the Esprit projects on parallel architectures in which 
Philips Research participates. In Esprit project 415A preliminary studies on 
parallellizing the surface parser and the morphological analysis were already 
made. In Esprit II project TROPICS a complete parallel version of Rosetta3 will 
be implemented. Although this is very interesting, we would like Rosetta to run 
efficiently on more conventional hardware too, so other ways of improving 
efficiency will be investigated as well.


\item {\bf Software.}  
The rule compilers can be improved to produce more efficient Pascal code. The 
various components of the system can be implemented more efficiently.
Recently we completed a study on Earley parsers, which promises interesting 
improvements in the efficiency of the surface parser.

\item {\bf Lingware}.
In the current system, the most important source of inefficiency is the 
combinatorial explosion of local ambiguities which arise at an early stage of 
the analysis process (e.g. in the surface parser) and are only solved at a 
much later 
stage (e.g. in the M-parser).  From a theoretical point of view this strategy 
of temporary local ambiguities is elegant and transparent, but from a 
computational point of view it is disastrous if it is used too 
often. In the near future we will revise the linguistic strategy in some cases;
we expect large benefits from this.

\item {\bf Heuristics}.
For very long sentences, the before-mentioned solutions may be insufficient. 
Heuristic measures may be needed, e.g. selecting at an early level of analysis 
of the most {\em plausible} interpretations (with the risk to make the wrong 
choice) and continuing the analysis process only for these interpretations.

\end{enumerate}


\end{itemize}

{\bf Delay}

The project has had a considerable delay, 9 months, for which 
Nehem kindly gave us permission. 
The main reason for the delay was that we made a more ambitious system
than originally 
planned, with respect to the formalism, the supporting software and the
linguistic rules. The changes in the syntactic formalism and the 
rule notation had the consequence that  the actual rule writing and testing 
started later than we had planned. However, for the Rosetta project as a  whole
these decisions have been favorable:
we now have a much stronger starting position for the Rosetta4 phase 
than we would 
have had otherwise.
Another reason for the delay was that we had a 
smaller crew than originally planned, 
especially with respect to computer scientists. Last but not least our cpu 
capacity turned out to be insufficient for the development of 
such a large system. We started on 
a VAX780 and moved to a cluster of two 785s in the beginning of 1988. This gave 
some solace, but it was still insufficient. Ironically enough, 
only since November 
1988, at the end of the `Nehem period', we have sufficient capacity, by making 
use of a central cluster of two VAX8820s.\\

{\bf Products}

In principle, both the Rosetta3 phrase translator and the word translator are 
potential
products, to be used as a translation aid, if they are 
improved in a number of respects, such as dictionary size, user interface and 
efficiency. More challenging and more in line with the original project plans
would it be to organize the Rosetta4 
phase of the project in a more product-oriented way. Fortunately, 
there is a growing interest of Philips product divisions in natural 
language applications. At the moment, there are detailed plans
 to start a common project of Research and 
TDS (Telecommunication and Data Systems) Predevelopment 
with the goal to develop an interactive `message translator'
(tuned to the translation of e-mail, telexes, informal letters etc.)
for the languages spoken in Western Europe. 
We feel that we are in an excellent starting position for such a project.




\newpage

\section{Personnel and time records}

\subsection{Personnel}

In the period from February 1, 1988 until November 1, 1988 
 the following people were
involved (full-time or part-time) in the project .
\begin{verbatim}

ir. S.P.J. Landsbergen, project leader   (Philips Nat. Lab.)
dr. M.C.J. Leermakers                    (Philips Nat. Lab.)
ing. J.H.G. Rous                         (Philips Nat. Lab.)
ing. J.P. Medema (incidentally)          (Philips Nat. Lab.)
drs. E. Appelo                           (Philips Nat. Lab.) 
drs. F.M.G. de Jong                      (Univ. of Utrecht)
drs. E.L. van Munster                    (Univ. of Utrecht)
drs. J.E. Odijk                          (Univ. of Utrecht / 
                                          Philips Nat. Lab.)
drs. M.J. Sanders                        (Univ. of Utrecht)
drs. A.Y. Schenk                         (Univ. of Utrecht)
drs. H.E. Smit                           (Univ. of Utrecht)
A.M.G de Vos                             (student, Univ. of Utrecht)    
P.D. de Wit                              (student, Univ. of Utrecht)

\end{verbatim}

J. E. Odijk is a Philips employee since August 1, 1988.
A.M.G. de Vos and P.D. de Wit are student assistents
 of the University of Utrecht
who will do dictionary 
work for the project during the period from 
October 1, 1988 until April 1, 1989. 


\bigskip

The student-trainees J. Zwarts and 
J. Schipper (both Univ. of Utrecht), completed their 
master thesis in April / May, 1988.\\

Dr. J. Groenendijk (University of Amsterdam) 
completed his two-year study on text-semantics, financed by
Philips Research Laboratories. His study, done together with M. Stokhof,
has resulted in a semantic theory, called dynamic semantics, which incorporates 
the basic ideas of Kamp and Heim on discourse semantics, while maintaining the 
compositionality of the original Montague Grammar. The study will be a good 
starting point for more application oriented research on translation of texts.



\subsection{Time records}

The following table specifies the number of hours spent on the 
project in the period from February 1 until November 1, 1988.
(Since April 1, 1988 Philips Nat. Lab. has a somewhat different administration 
for projects. Since then the time records are per week instead of per calender 
month. Because of this  from April on a month indicates the 4 or 5 full 
weeks that 
start in that month.)  

\begin{verbatim}

name                               hours 

            Feb  Mar  Apr  May  June July Aug  Sep  Oct  Total

Appelo      148  152  144  116   92   40   64  124  144   1024     
de Jong     120  136  112   96   96  112  112   84   70    938
Landsbergen 132  140  120  108  120   28   76  124   96    944
Leermakers  116  172  120  104  180   96  144  180  128   1240
Medema       33   28   24    4   32   36   52   14    -    223
van Munster 152  144  116   84   84   80    -  112  108    880
Odijk       156  184  140  146  200  160   80  200  152   1418
Rous        152  180  148  124  184  120  156   64  160   1288
Sanders     144  152  128   96  144   56  120  160   88   1088
Schenk       32   36   44  112  152  108  136  144  104    868
Smit        144  128  152  100  168  112  112  192  144   1252
de Vos                                              128    128
de Wit                                              152    152
--------------------------------------------------------------
Total      1329 1452 1248 1090 1452  948  1052 1398 1474 11443

\end{verbatim}


\newpage

\section{Publications}

A large number of internal documents 
have been written. Here we list only the external 
publications on Rosetta, 
which are available outside Philips. We also include a list of 
master theses, written by students during a traineeship in the Rosetta project.



\setlength{\parindent} {0 em}

\bigskip

[1] Landsbergen, J., {\em Adaptation of Montague grammar to the requirements
        of parsing}, Philips Research Reprint 7573. In: Groenendijk, J.A.G., 
        Janssen, T.M.V. and Stokhof, M.B.J., {\sf Formal methods in the Study of 
        Language Part 2}, MC Tract 136, Mathematical Centre, Amsterdam, 1981, 
        pp 399-420.
\bigskip

[2] Landsbergen, J., {\em Machine translation based on logically isomorphic
        Montague grammars}, Philips Research Reprint 8143. In: Horecky, J. 
        (ed.), {\sf COLING 82}, pp 175-182, North-Holland, 1982.
\bigskip

[3] Landsbergen, J., {\em Isomorphic grammars and their use in the Rosetta
translation system}, Philips Research M.S. 12.950.
Paper presented at the Tutorial on Machine Translation,
Lugano, 1984. 
In M. King (ed), {\sf Machine Translation the state of the
art}, Edinburg University Press, 1987.
\bigskip

[4] Leermakers, R. and J. Rous, {\em The Translation Method of Rosetta},
Philips Research M.S. 13.701,
{\sf Computers and Translation}, 1986, Vol. 1, Number 3, pp. 169-183.
\bigskip


[5] Appelo, L. and J. Landsbergen, {\em The Machine Translation Project
Rosetta}, Philips Research M.S. 13.801,
{\sf Proceedings First International Conference on State of the Art in 
Machine Translation}, Saarbr\"{u}cken, 1986, pp. 34-51.
\bigskip

[6] Appelo, L. {\em A Compositional approach to the Translation of Temporal
        Expressions in the Rosetta System}, Philips Research M.S. 13.677,
        {\sf Proceedings of the 11th Conference on Computational Linguistics},
        August 25 - 29, 1986, Bonn.
\bigskip

[7] Schenk, A., {\em Idioms in the Rosetta Machine Translation System},
        Philips Research M.S. 13.508, {\sf Proceedings of the 11th Conference on 
        Computational Linguistics}, August 25 - 29, 1986, Bonn.
\bigskip

[8] Landsbergen, J., {\em Montague Grammar and Machine Translation},
        Philips Research M.S. 14.026, in: Whitelock, P. et al. (eds), 
        {\sf Linguistic Theory and Computer Applications}, Academic
 Press, London, 1987.

\bigskip

[9] Appelo, L., C. Fellinger and J. Landsbergen, {\em Subgrammars, Rule Classes
        and Control in the Rosetta Translation System}, 
        Philips Research M.S. 14.131, in: {\sf Proceedings of European ACL
        Conference}, Copenhagen, 1987.

\bigskip


[10] De Jong, F. and L. Appelo, {\em Synonymy and Translation},
        Philips Research M.S. 14.269, in: {\sf Proceedings of the
        6th Amsterdam Colloquium}, 1987.

\bigskip

[11] De Jong, F. and L. Appelo, {\em Synonymie en Vertaling},
        Philips Research M.S. 14.545, Spektator 18, 1, pp 44-58, 1988.
        (Dutch version of [10])

\bigskip

[12] Van Munster, E., {\em The Treatment of Scope and Negation}, 
Philips Research M.S. 14.718, in {\sf 
Proceedings of the 12th Conference on Computational Linguistics}, August 22-27,
1988, Budapest. (to appear in {\sf Computers and Translation})

\bigskip

[13] Sanders, M.J., {\em The Rosetta Translation System}, Philips Research M.S. 
15.103, to appear in {\sf Proceedings of the 2nd Eindhoven Symposium on 
LSP (Language for Special Purposes)}, Eindhoven, 1988.\\

[14] Landsbergen, J., {\em Dictionaries for Rosetta}, in {\sf Proceedings of 
International Symposium on Electronic Dictionaries}, Tokyo, 1988.\\

[15] Odijk, J., {\em The grammars of Rosetta}, to be presented at European ACL 
Conference, Manchester, 1989.\\

{\bf Master theses:}

\bigskip

Munster, E. van, {\em The treatment of scope and negation in Rosetta: a Dutch - 
Spanish view.} Master Thesis University of 
Utrecht, 1985.

\bigskip

Smit, H. E., {\em Coordinatoren}, Master Thesis University of 
Amsterdam, 1985.
 
\bigskip

Fellinger, C., {\em On the surface rule compiler, a compiler compiler developed 
for Rosetta}, HIO Eindhoven, 1986.

\bigskip

Van Hout, A., {\em Er-peculiarities in Rosetta: an analysis of Dutch `er'
and its translations in English and Spanish}, Master thesis University
of Brabant, Tilburg, 1986.

\bigskip

Hazenberg, C., {\em M-rules in Pascal: Rosetta's M-rule compiler},
Master thesis Leiden University, 1987.

\bigskip

Post, A., {\em Temporal predication, semantics of temporal elements in 
natural language}, Master thesis University
of Utrecht, 1987.

\bigskip

Kopinga, L., {\em Time adverbials in the machine translation system of
Rosetta3}, Master thesis of Free University, Amsterdam, 1987.

\bigskip

Grygierczyk, N.J., {\em Semantische disambiguering} (in Dutch), 
Master thesis University
of Utrecht, 1987.\\

Schipper, J., {\em Morphological analysis of Dutch in Rosetta}, 
Master Thesis University of 
Utrecht, 1988.\\

Zwarts, J., {\em An analysis of genericity}, Master Thesis University of 
Utrecht, 1988.


\newpage

%\begin{thebibliography}{}

\section*{References}
\setlength{\parindent} {0 em}
%\bibitem{Appelo86}
Appelo, L. and J. Landsbergen (1986), {\em The Machine Translation Project
Rosetta}, Philips Research M.S. 13.801,
{\sf Proceedings First International Conference on State of the Art in 
Machine Translation}, Saarbr\"{u}cken, pp. 34-51.

\bigskip

Appelo, L., C. Fellinger and J. Landsbergen (1987), {\em Subgrammars, Rule Classes
        and Control in the Rosetta Translation System}, 
        Philips Research M.S. 14.131, in: {\sf Proceedings of European ACL
        Conference}, Copenhagen, 1987.

\bigskip

%\bibitem{Chomsky70}
Chomsky, N. (1970), {\em Remarks on Nominalisation}, in R.A. Jacobs and P.S.
Rosenbaum
(eds),
{\sf Readings in 
English Transformational Grammar}, Georgetown University Press, Washington DC,
pp. 184--221.
\bigskip


%\bibitem{Isabelle}
Isabelle, P. and E. Macklovitch (1986), {\em Transfer and MT Modularity},
{\sf Proceedings Coling 1986}, Bonn, pp. 115--117.
\bigskip


%\bibitem{King}
King, M. and S. Perschke (1987), {\em EUROTRA},
Paper presented at the Tutorial on Machine Translation,
Lugano. In: M. King (ed), {\sf Machine Translation the state of the
art}, Edinburg University Press, 1987.
\bigskip

%\bibitem{Leermakers86}
Leermakers, R. and J. Rous (1986), {\em The Translation Method of Rosetta},
{\sf Computers and Translation}, Vol. 1, Number 3, pp. 169-183.
\bigskip


%\bibitem{Nagao}
Nagao, M. and J. Tsujii (1986), {\em The Transfer Phase of the MU Machine 
Translation System} {\sf Proceedings Coling 1986}, Bonn, pp. 97--103.
\bigskip

%\bibitem{Stowell}
Stowell, T. (1981), {\sf Origins of Phrase Structure}, Ph. D. dissertation,
MIT.
\bigskip

%\bibitem{Thomasson}
Thomason, B. (1974), {\sf Formal Philosophy, Selected Papers of Richard
Montague}, Yale University Press, New Haven.
\bigskip

%\bibitem{Vauquois85}
Vauquois, B. and C. Boitet (1985), {\em Automated Translation at Grenoble 
University},
{\sf Computational Linguistics}, Vol. 11, Number 1, pp. 28-36.
\bigskip


%\end{thebibliography



\newpage

\tableofcontents

%
\end{document}



ROSETTA.sty
\typeout{Document Style 'Rosetta'. Version 0.4 - released  24-DEC-1987}
% 24-DEC-1987:  Date of copyright notice changed
\def\@ptsize{1}
\@namedef{ds@10pt}{\def\@ptsize{0}}
\@namedef{ds@12pt}{\def\@ptsize{2}} 
\@twosidetrue
\@mparswitchtrue
\def\ds@draft{\overfullrule 5pt} 
\@options
\input art1\@ptsize.sty\relax


\def\labelenumi{\arabic{enumi}.} 
\def\theenumi{\arabic{enumi}} 
\def\labelenumii{(\alph{enumii})}
\def\theenumii{\alph{enumii}}
\def\p@enumii{\theenumi}
\def\labelenumiii{\roman{enumiii}.}
\def\theenumiii{\roman{enumiii}}
\def\p@enumiii{\theenumi(\theenumii)}
\def\labelenumiv{\Alph{enumiv}.}
\def\theenumiv{\Alph{enumiv}} 
\def\p@enumiv{\p@enumiii\theenumiii}
\def\labelitemi{$\bullet$}
\def\labelitemii{\bf --}
\def\labelitemiii{$\ast$}
\def\labelitemiv{$\cdot$}
\def\verse{
   \let\\=\@centercr 
   \list{}{\itemsep\z@ \itemindent -1.5em\listparindent \itemindent 
      \rightmargin\leftmargin\advance\leftmargin 1.5em}
   \item[]}
\let\endverse\endlist
\def\quotation{
   \list{}{\listparindent 1.5em
      \itemindent\listparindent
      \rightmargin\leftmargin \parsep 0pt plus 1pt}\item[]}
\let\endquotation=\endlist
\def\quote{
   \list{}{\rightmargin\leftmargin}\item[]}
\let\endquote=\endlist
\def\descriptionlabel#1{\hspace\labelsep \bf #1}
\def\description{
   \list{}{\labelwidth\z@ \itemindent-\leftmargin
      \let\makelabel\descriptionlabel}}
\let\enddescription\endlist


\def\@begintheorem#1#2{\it \trivlist \item[\hskip \labelsep{\bf #1\ #2}]}
\def\@endtheorem{\endtrivlist}
\def\theequation{\arabic{equation}}
\def\titlepage{
   \@restonecolfalse
   \if@twocolumn\@restonecoltrue\onecolumn
   \else \newpage
   \fi
   \thispagestyle{empty}\c@page\z@}
\def\endtitlepage{\if@restonecol\twocolumn \else \newpage \fi}
\arraycolsep 5pt \tabcolsep 6pt \arrayrulewidth .4pt \doublerulesep 2pt 
\tabbingsep \labelsep 
\skip\@mpfootins = \skip\footins
\fboxsep = 3pt \fboxrule = .4pt 


\newcounter{part}
\newcounter {section}
\newcounter {subsection}[section]
\newcounter {subsubsection}[subsection]
\newcounter {paragraph}[subsubsection]
\newcounter {subparagraph}[paragraph]
\def\thepart{\Roman{part}} \def\thesection {\arabic{section}}
\def\thesubsection {\thesection.\arabic{subsection}}
\def\thesubsubsection {\thesubsection .\arabic{subsubsection}}
\def\theparagraph {\thesubsubsection.\arabic{paragraph}}
\def\thesubparagraph {\theparagraph.\arabic{subparagraph}}


\def\@pnumwidth{1.55em}
\def\@tocrmarg {2.55em}
\def\@dotsep{4.5}
\setcounter{tocdepth}{3}
\def\tableofcontents{\section*{Contents\markboth{}{}}
\@starttoc{toc}}
\def\l@part#1#2{
   \addpenalty{-\@highpenalty}
   \addvspace{2.25em plus 1pt}
   \begingroup
      \@tempdima 3em \parindent \z@ \rightskip \@pnumwidth \parfillskip
      -\@pnumwidth {\large \bf \leavevmode #1\hfil \hbox to\@pnumwidth{\hss #2}}
      \par \nobreak
   \endgroup}
\def\l@section#1#2{
   \addpenalty{-\@highpenalty}
   \addvspace{1.0em plus 1pt}
   \@tempdima 1.5em
   \begingroup
      \parindent \z@ \rightskip \@pnumwidth 
      \parfillskip -\@pnumwidth 
      \bf \leavevmode #1\hfil \hbox to\@pnumwidth{\hss #2}
      \par
   \endgroup}
\def\l@subsection{\@dottedtocline{2}{1.5em}{2.3em}}
\def\l@subsubsection{\@dottedtocline{3}{3.8em}{3.2em}}
\def\l@paragraph{\@dottedtocline{4}{7.0em}{4.1em}}
\def\l@subparagraph{\@dottedtocline{5}{10em}{5em}}
\def\listoffigures{
   \section*{List of Figures\markboth{}{}}
   \@starttoc{lof}}
   \def\l@figure{\@dottedtocline{1}{1.5em}{2.3em}}
   \def\listoftables{\section*{List of Tables\markboth{}{}}
   \@starttoc{lot}}
\let\l@table\l@figure


\def\thebibliography#1{
   \addcontentsline{toc}
   {section}{References}\section*{References\markboth{}{}}
   \list{[\arabic{enumi}]}
        {\settowidth\labelwidth{[#1]}\leftmargin\labelwidth
         \advance\leftmargin\labelsep\usecounter{enumi}}}
\let\endthebibliography=\endlist


\newif\if@restonecol
\def\theindex{
   \@restonecoltrue\if@twocolumn\@restonecolfalse\fi
   \columnseprule \z@
   \columnsep 35pt\twocolumn[\section*{Index}]
   \markboth{}{}
   \thispagestyle{plain}\parindent\z@
   \parskip\z@ plus .3pt\relax
   \let\item\@idxitem}
\def\@idxitem{\par\hangindent 40pt}
\def\subitem{\par\hangindent 40pt \hspace*{20pt}}
\def\subsubitem{\par\hangindent 40pt \hspace*{30pt}}
\def\endtheindex{\if@restonecol\onecolumn\else\clearpage\fi}
\def\indexspace{\par \vskip 10pt plus 5pt minus 3pt\relax}


\def\footnoterule{
   \kern-1\p@ 
   \hrule width .4\columnwidth 
   \kern .6\p@} 
\long\def\@makefntext#1{
   \@setpar{\@@par\@tempdima \hsize 
   \advance\@tempdima-10pt\parshape \@ne 10pt \@tempdima}\par
   \parindent 1em\noindent \hbox to \z@{\hss$^{\@thefnmark}$}#1}


\setcounter{topnumber}{2}
\def\topfraction{.7}
\setcounter{bottomnumber}{1}
\def\bottomfraction{.3}
\setcounter{totalnumber}{3}
\def\textfraction{.2}
\def\floatpagefraction{.5}
\setcounter{dbltopnumber}{2}
\def\dbltopfraction{.7}
\def\dblfloatpagefraction{.5}
\long\def\@makecaption#1#2{
   \vskip 10pt 
   \setbox\@tempboxa\hbox{#1: #2}
   \ifdim \wd\@tempboxa >\hsize \unhbox\@tempboxa\par
   \else \hbox to\hsize{\hfil\box\@tempboxa\hfil} 
   \fi}
\newcounter{figure}
\def\thefigure{\@arabic\c@figure}
\def\fps@figure{tbp}
\def\ftype@figure{1}
\def\ext@figure{lof}
\def\fnum@figure{Figure \thefigure}
\def\figure{\@float{figure}}
\let\endfigure\end@float
\@namedef{figure*}{\@dblfloat{figure}}
\@namedef{endfigure*}{\end@dblfloat}
\newcounter{table}
\def\thetable{\@arabic\c@table}
\def\fps@table{tbp}
\def\ftype@table{2}
\def\ext@table{lot}
\def\fnum@table{Table \thetable}
\def\table{\@float{table}}
\let\endtable\end@float
\@namedef{table*}{\@dblfloat{table}}
\@namedef{endtable*}{\end@dblfloat}


\def\maketitle{
   \par
   \begingroup
      \def\thefootnote{\fnsymbol{footnote}}
      \def\@makefnmark{\hbox to 0pt{$^{\@thefnmark}$\hss}} 
      \if@twocolumn \twocolumn[\@maketitle] 
      \else \newpage \global\@topnum\z@ \@maketitle
      \fi
      \thispagestyle{plain}
      \@thanks
   \endgroup
   \setcounter{footnote}{0}
   \let\maketitle\relax
   \let\@maketitle\relax
   \gdef\@thanks{}
   \gdef\@author{}
   \gdef\@title{}
   \let\thanks\relax}
\def\@maketitle{
   \newpage
   \null
   \vskip 2em
   \begin{center}{\LARGE \@title \par}
      \vskip 1.5em
      {\large \lineskip .5em \begin{tabular}[t]{c}\@author \end{tabular}\par} 
      \vskip 1em {\large \@date}
   \end{center}
   \par
   \vskip 1.5em} 
\def\abstract{
   \if@twocolumn \section*{Abstract}
   \else
      \small 
      \begin{center} {\bf Abstract\vspace{-.5em}\vspace{0pt}} \end{center}
      \quotation 
   \fi}
\def\endabstract{\if@twocolumn\else\endquotation\fi}


\mark{{}{}} 
\if@twoside
   \def\ps@headings{
      \def\@oddfoot{Rosetta Doc. \@RosDocNr\hfil \@RosDate}
      \def\@evenfoot{Rosetta Doc. \@RosDocNr\hfil \@RosDate}
      \def\@evenhead{\rm\thepage\hfil \sl \rightmark}
      \def\@oddhead{\hbox{}\sl \leftmark \hfil\rm\thepage}
      \def\sectionmark##1{\markboth {}{}}
      \def\subsectionmark##1{}}
\else
   \def\ps@headings{
      \def\@oddfoot{Rosetta Doc. \@RosDocNr\hfil \@RosDate}
      \def\@evenfoot{Rosetta Doc. \@RosDocNr\hfil \@RosDate}
      \def\@oddhead{\hbox{}\sl \rightmark \hfil \rm\thepage}
      \def\sectionmark##1{\markboth {}{}}
      \def\subsectionmark##1{}}
\fi
\def\ps@myheadings{
   \def\@oddhead{\hbox{}\sl\@rhead \hfil \rm\thepage}
   \def\@oddfoot{}
   \def\@evenhead{\rm \thepage\hfil\sl\@lhead\hbox{}}
   \def\@evenfoot{}
   \def\sectionmark##1{}
   \def\subsectionmark##1{}}


\def\today{
   \ifcase\month\or January\or February\or March\or April\or May\or June\or
      July\or August\or September\or October\or November\or December
   \fi
   \space\number\day, \number\year}


\ps@plain \pagenumbering{arabic} \onecolumn \if@twoside\else\raggedbottom\fi 




% the Rosetta title page
\newcommand{\MakeRosTitle}{
   \begin{titlepage}
      \begin{large}
	 \begin{figure}[t]
	    \begin{picture}(405,100)(0,0)
	       \put(0,100){\line(1,0){404}}
	       \put(0,75){Project {\bf Rosetta}}
	       \put(93.5,75){:}
	       \put(108,75){Machine Translation}
	       \put(0,50){Topic}
	       \put(93.5,50){:}
	       \put(108,50){\@RosTopic}
	       \put(0,30){\line(1,0){404}}
	    \end{picture}
	 \end{figure}
	 \bigskip
	 \bigskip
	 \begin{list}{-}{\setlength{\leftmargin}{3.0cm}
			 \setlength{\labelwidth}{2.7cm}
			 \setlength{\topsep}{2cm}}
	    \item [{\rm Title \hfill :}] {{\bf \@RosTitle}}
	    \item [{\rm Author \hfill :}] {\@RosAuthor}
	    \bigskip
	    \bigskip
	    \bigskip
	    \item [{\rm Doc.Nr. \hfill :}] {\@RosDocNr}
	    \item [{\rm Date \hfill :}] {\@RosDate}
	    \item [{\rm Status \hfill :}] {\@RosStatus}
	    \item [{\rm Supersedes \hfill :}] {\@RosSupersedes}
	    \item [{\rm Distribution \hfill :}] {\@RosDistribution}
	    \item [{\rm Clearance \hfill :}] {\@RosClearance}
	    \item [{\rm Keywords \hfill :}] {\@RosKeywords}
	 \end{list}
      \end{large}
      \title{\@RosTitle}
      \begin{figure}[b]
	 \begin{picture}(404,64)(0,0)
	    \put(0,64){\line(1,0){404}}
	    \put(0,-4){\line(1,0){404}}
	    \put(0,59){\line(1,0){42}}
	    \begin{small}
	    \put(3,48){\sf PHILIPS}
	    \end{small}
	    \put(0,23){\line(0,1){36}}
	    \put(42,23){\line(0,1){36}}
	    \put(21,23){\oval(42,42)[bl]}
	    \put(21,23){\oval(42,42)[br]}
	    \put(21,23){\circle{40}}
	    \put(4,33){\line(1,0){10}}
	    \put(9,28){\line(0,1){10}}
	    \put(9,36){\line(1,0){6}}
	    \put(12,33){\line(0,1){6}}
	    \put(29,13){\line(1,0){10}}
	    \put(34,8){\line(0,1){10}}
	    \put(28,10){\line(1,0){6}}
	    \put(31,7){\line(0,1){6}}

	    \put(1,21){\line(1,0){0.5}}
	    \put(1.5,21.3){\line(1,0){0.5}}
	    \put(2,21.6){\line(1,0){0.5}}
	    \put(2.5,21.9){\line(1,0){0.5}}
	    \put(3,22.1){\line(1,0){0.5}}
	    \put(3.5,22.3){\line(1,0){0.5}}
	    \put(4,22.5){\line(1,0){0.5}}
	    \put(4.5,22.7){\line(1,0){0.5}}
	    \put(5,22.8){\line(1,0){0.5}}
	    \put(5.5,22.9){\line(1,0){0.5}}
	    \put(6,23){\line(1,0){0.5}}
	    \put(6.5,22.9){\line(1,0){0.5}}
	    \put(7,22.8){\line(1,0){0.5}}
	    \put(7.5,22.7){\line(1,0){0.5}}
	    \put(8,22.5){\line(1,0){0.5}}
	    \put(8.5,22.3){\line(1,0){0.5}}
	    \put(9,22.1){\line(1,0){0.5}}
	    \put(9.5,21.9){\line(1,0){0.5}}
	    \put(10,21.6){\line(1,0){0.5}}
	    \put(10.5,21.3){\line(1,0){0.5}}

	    \put(1,23){\line(1,0){0.5}}
	    \put(1.5,23.3){\line(1,0){0.5}}
	    \put(2,23.6){\line(1,0){0.5}}
	    \put(2.5,23.9){\line(1,0){0.5}}
	    \put(3,24.1){\line(1,0){0.5}}
	    \put(3.5,24.3){\line(1,0){0.5}}
	    \put(4,24.5){\line(1,0){0.5}}
	    \put(4.5,24.7){\line(1,0){0.5}}
	    \put(5,24.8){\line(1,0){0.5}}
	    \put(5.5,24.9){\line(1,0){0.5}}
	    \put(6,25){\line(1,0){0.5}}
	    \put(6.5,24.9){\line(1,0){0.5}}
	    \put(7,24.8){\line(1,0){0.5}}
	    \put(7.5,24.7){\line(1,0){0.5}}
	    \put(8,24.5){\line(1,0){0.5}}
	    \put(8.5,24.3){\line(1,0){0.5}}
	    \put(9,24.1){\line(1,0){0.5}}
	    \put(9.5,23.9){\line(1,0){0.5}}
	    \put(10,23.6){\line(1,0){0.5}}
	    \put(10.5,23.3){\line(1,0){0.5}}

	    \put(1,25){\line(1,0){0.5}}
	    \put(1.5,25.3){\line(1,0){0.5}}
	    \put(2,25.6){\line(1,0){0.5}}
	    \put(2.5,25.9){\line(1,0){0.5}}
	    \put(3,26.1){\line(1,0){0.5}}
	    \put(3.5,26.3){\line(1,0){0.5}}
	    \put(4,26.5){\line(1,0){0.5}}
	    \put(4.5,26.7){\line(1,0){0.5}}
	    \put(5,26.8){\line(1,0){0.5}}
	    \put(5.5,26.9){\line(1,0){0.5}}
	    \put(6,27){\line(1,0){0.5}}
	    \put(6.5,26.9){\line(1,0){0.5}}
	    \put(7,26.8){\line(1,0){0.5}}
	    \put(7.5,26.7){\line(1,0){0.5}}
	    \put(8,26.5){\line(1,0){0.5}}
	    \put(8.5,26.3){\line(1,0){0.5}}
	    \put(9,26.1){\line(1,0){0.5}}
	    \put(9.5,25.9){\line(1,0){0.5}}
	    \put(10,25.6){\line(1,0){0.5}}
	    \put(10.5,25.3){\line(1,0){0.5}}

	    \put(11,21){\line(1,0){0.5}}
	    \put(11.5,20.7){\line(1,0){0.5}}
	    \put(12,20.4){\line(1,0){0.5}}
	    \put(12.5,20.1){\line(1,0){0.5}}
	    \put(13,19.9){\line(1,0){0.5}}
	    \put(13.5,19.7){\line(1,0){0.5}}
	    \put(14,19.5){\line(1,0){0.5}}
	    \put(14.5,19.3){\line(1,0){0.5}}
	    \put(15,19.2){\line(1,0){0.5}}
	    \put(15.5,19.1){\line(1,0){0.5}}
	    \put(16,19){\line(1,0){0.5}}
	    \put(16.5,19.1){\line(1,0){0.5}}
	    \put(17,19.2){\line(1,0){0.5}}
	    \put(17.5,19.3){\line(1,0){0.5}}
	    \put(18,19.5){\line(1,0){0.5}}
	    \put(18.5,19.7){\line(1,0){0.5}}
	    \put(19,19.9){\line(1,0){0.5}}
	    \put(19.5,20.1){\line(1,0){0.5}}
	    \put(20,20.4){\line(1,0){0.5}}
	    \put(20.5,20.7){\line(1,0){0.5}}

	    \put(11,23){\line(1,0){0.5}}
	    \put(11.5,22.7){\line(1,0){0.5}}
	    \put(12,22.4){\line(1,0){0.5}}
	    \put(12.5,22.1){\line(1,0){0.5}}
	    \put(13,21.9){\line(1,0){0.5}}
	    \put(13.5,21.7){\line(1,0){0.5}}
	    \put(14,21.5){\line(1,0){0.5}}
	    \put(14.5,21.3){\line(1,0){0.5}}
	    \put(15,21.2){\line(1,0){0.5}}
	    \put(15.5,21.1){\line(1,0){0.5}}
	    \put(16,21){\line(1,0){0.5}}
	    \put(16.5,21.1){\line(1,0){0.5}}
	    \put(17,21.2){\line(1,0){0.5}}
	    \put(17.5,21.3){\line(1,0){0.5}}
	    \put(18,21.5){\line(1,0){0.5}}
	    \put(18.5,21.7){\line(1,0){0.5}}
	    \put(19,21.9){\line(1,0){0.5}}
	    \put(19.5,22.1){\line(1,0){0.5}}
	    \put(20,22.4){\line(1,0){0.5}}
	    \put(20.5,22.7){\line(1,0){0.5}}

	    \put(11,25){\line(1,0){0.5}}
	    \put(11.5,24.7){\line(1,0){0.5}}
	    \put(12,24.4){\line(1,0){0.5}}
	    \put(12.5,24.1){\line(1,0){0.5}}
	    \put(13,23.9){\line(1,0){0.5}}
	    \put(13.5,23.7){\line(1,0){0.5}}
	    \put(14,23.5){\line(1,0){0.5}}
	    \put(14.5,23.3){\line(1,0){0.5}}
	    \put(15,23.2){\line(1,0){0.5}}
	    \put(15.5,23.1){\line(1,0){0.5}}
	    \put(16,23){\line(1,0){0.5}}
	    \put(16.5,23.1){\line(1,0){0.5}}
	    \put(17,23.2){\line(1,0){0.5}}
	    \put(17.5,23.3){\line(1,0){0.5}}
	    \put(18,23.5){\line(1,0){0.5}}
	    \put(18.5,23.7){\line(1,0){0.5}}
	    \put(19,23.9){\line(1,0){0.5}}
	    \put(19.5,24.1){\line(1,0){0.5}}
	    \put(20,24.4){\line(1,0){0.5}}
	    \put(20.5,24.7){\line(1,0){0.5}}

	    \put(21,21){\line(1,0){0.5}}
	    \put(21.5,21.3){\line(1,0){0.5}}
	    \put(22,21.6){\line(1,0){0.5}}
	    \put(22.5,21.9){\line(1,0){0.5}}
	    \put(23,22.1){\line(1,0){0.5}}
	    \put(23.5,22.3){\line(1,0){0.5}}
	    \put(24,22.5){\line(1,0){0.5}}
	    \put(24.5,22.7){\line(1,0){0.5}}
	    \put(25,22.8){\line(1,0){0.5}}
	    \put(25.5,23.9){\line(1,0){0.5}}
	    \put(26,23){\line(1,0){0.5}}
	    \put(26.5,22.9){\line(1,0){0.5}}
	    \put(27,22.8){\line(1,0){0.5}}
	    \put(27.5,22.7){\line(1,0){0.5}}
	    \put(28,22.5){\line(1,0){0.5}}
	    \put(28.5,22.3){\line(1,0){0.5}}
	    \put(29,22.1){\line(1,0){0.5}}
	    \put(29.5,21.9){\line(1,0){0.5}}
	    \put(30,21.6){\line(1,0){0.5}}
	    \put(30.5,21.3){\line(1,0){0.5}}

	    \put(21,23){\line(1,0){0.5}}
	    \put(21.5,23.3){\line(1,0){0.5}}
	    \put(22,23.6){\line(1,0){0.5}}
	    \put(22.5,23.9){\line(1,0){0.5}}
	    \put(23,24.1){\line(1,0){0.5}}
	    \put(23.5,24.3){\line(1,0){0.5}}
	    \put(24,24.5){\line(1,0){0.5}}
	    \put(24.5,24.7){\line(1,0){0.5}}
	    \put(25,24.8){\line(1,0){0.5}}
	    \put(25.5,24.9){\line(1,0){0.5}}
	    \put(26,25){\line(1,0){0.5}}
	    \put(26.5,24.9){\line(1,0){0.5}}
	    \put(27,24.8){\line(1,0){0.5}}
	    \put(27.5,24.7){\line(1,0){0.5}}
	    \put(28,24.5){\line(1,0){0.5}}
	    \put(28.5,24.3){\line(1,0){0.5}}
	    \put(29,24.1){\line(1,0){0.5}}
	    \put(29.5,23.9){\line(1,0){0.5}}
	    \put(30,23.6){\line(1,0){0.5}}
	    \put(30.5,23.3){\line(1,0){0.5}}

	    \put(21,25){\line(1,0){0.5}}
	    \put(21.5,25.3){\line(1,0){0.5}}
	    \put(22,25.6){\line(1,0){0.5}}
	    \put(22.5,25.9){\line(1,0){0.5}}
	    \put(23,26.1){\line(1,0){0.5}}
	    \put(23.5,26.3){\line(1,0){0.5}}
	    \put(24,26.5){\line(1,0){0.5}}
	    \put(24.5,26.7){\line(1,0){0.5}}
	    \put(25,26.8){\line(1,0){0.5}}
	    \put(25.5,26.9){\line(1,0){0.5}}
	    \put(26,27){\line(1,0){0.5}}
	    \put(26.5,26.9){\line(1,0){0.5}}
	    \put(27,26.8){\line(1,0){0.5}}
	    \put(27.5,26.7){\line(1,0){0.5}}
	    \put(28,26.5){\line(1,0){0.5}}
	    \put(28.5,26.3){\line(1,0){0.5}}
	    \put(29,26.1){\line(1,0){0.5}}
	    \put(29.5,25.9){\line(1,0){0.5}}
	    \put(30,25.6){\line(1,0){0.5}}
	    \put(30.5,25.3){\line(1,0){0.5}}

	    \put(31,21){\line(1,0){0.5}}
	    \put(31.5,20.7){\line(1,0){0.5}}
	    \put(32,20.4){\line(1,0){0.5}}
	    \put(32.5,20.1){\line(1,0){0.5}}
	    \put(33,19.9){\line(1,0){0.5}}
	    \put(33.5,19.7){\line(1,0){0.5}}
	    \put(34,19.5){\line(1,0){0.5}}
	    \put(34.5,19.3){\line(1,0){0.5}}
	    \put(35,19.2){\line(1,0){0.5}}
	    \put(35.5,19.1){\line(1,0){0.5}}
	    \put(36,19){\line(1,0){0.5}}
	    \put(36.5,19.1){\line(1,0){0.5}}
	    \put(37,19.2){\line(1,0){0.5}}
	    \put(37.5,19.3){\line(1,0){0.5}}
	    \put(38,19.5){\line(1,0){0.5}}
	    \put(38.5,19.7){\line(1,0){0.5}}
	    \put(39,19.9){\line(1,0){0.5}}
	    \put(39.5,20.1){\line(1,0){0.5}}
	    \put(40,20.4){\line(1,0){0.5}}
	    \put(40.5,20.7){\line(1,0){0.5}}

	    \put(31,23){\line(1,0){0.5}}
	    \put(31.5,22.7){\line(1,0){0.5}}
	    \put(32,22.4){\line(1,0){0.5}}
	    \put(32.5,22.1){\line(1,0){0.5}}
	    \put(33,21.9){\line(1,0){0.5}}
	    \put(33.5,21.7){\line(1,0){0.5}}
	    \put(34,21.5){\line(1,0){0.5}}
	    \put(34.5,21.3){\line(1,0){0.5}}
	    \put(35,21.2){\line(1,0){0.5}}
	    \put(35.5,21.1){\line(1,0){0.5}}
	    \put(36,21){\line(1,0){0.5}}
	    \put(36.5,21.1){\line(1,0){0.5}}
	    \put(37,21.2){\line(1,0){0.5}}
	    \put(37.5,21.3){\line(1,0){0.5}}
	    \put(38,21.5){\line(1,0){0.5}}
	    \put(38.5,21.7){\line(1,0){0.5}}
	    \put(39,21.9){\line(1,0){0.5}}
	    \put(39.5,22.1){\line(1,0){0.5}}
	    \put(40,22.4){\line(1,0){0.5}}
	    \put(40.5,22.7){\line(1,0){0.5}}

	    \put(31,25){\line(1,0){0.5}}
	    \put(31.5,24.7){\line(1,0){0.5}}
	    \put(32,24.4){\line(1,0){0.5}}
	    \put(32.5,24.1){\line(1,0){0.5}}
	    \put(33,23.9){\line(1,0){0.5}}
	    \put(33.5,23.7){\line(1,0){0.5}}
	    \put(34,23.5){\line(1,0){0.5}}
	    \put(34.5,23.3){\line(1,0){0.5}}
	    \put(35,23.2){\line(1,0){0.5}}
	    \put(35.5,23.1){\line(1,0){0.5}}
	    \put(36,23){\line(1,0){0.5}}
	    \put(36.5,23.1){\line(1,0){0.5}}
	    \put(37,23.2){\line(1,0){0.5}}
	    \put(37.5,23.3){\line(1,0){0.5}}
	    \put(38,23.5){\line(1,0){0.5}}
	    \put(38.5,23.7){\line(1,0){0.5}}
	    \put(39,23.9){\line(1,0){0.5}}
	    \put(39.5,24.1){\line(1,0){0.5}}
	    \put(40,24.4){\line(1,0){0.5}}
	    \put(40.5,24.7){\line(1,0){0.5}}
	    \begin{large}
	       \put(60,45){Philips Research Laboratories}
	       \put(60,30){\copyright\ 1988 Nederlandse Philips Bedrijven B.V.}
	    \end{large}
	 \end{picture}
      \end{figure}
      \newpage
      \pagenumbering{roman}
      \tableofcontents
      \newpage
      \pagenumbering{arabic}
   \end{titlepage}
}
\title{}
\topmargin 0pt
\oddsidemargin 36pt
\evensidemargin 36pt
\textheight 600pt
\textwidth 405pt
\pagestyle{headings}
\newcommand{\@RosTopic}{General}
\newcommand{\@RosTitle}{-}
\newcommand{\@RosAuthor}{-}
\newcommand{\@RosDocNr}{}
\newcommand{\@RosDate}{\today}
\newcommand{\@RosStatus}{informal}
\newcommand{\@RosSupersedes}{-}
\newcommand{\@RosDistribution}{Project}
\newcommand{\@RosClearance}{Project}
\newcommand{\@RosKeywords}{}
\newcommand{\RosTopic}[1]{\renewcommand{\@RosTopic}{#1}}
\newcommand{\RosTitle}[1]{\renewcommand{\@RosTitle}{#1}}
\newcommand{\RosAuthor}[1]{\renewcommand{\@RosAuthor}{#1}}
\newcommand{\RosDocNr}[1]{\renewcommand{\@RosDocNr}{#1}}
\newcommand{\RosDate}[1]{\renewcommand{\@RosDate}{#1}}
\newcommand{\RosStatus}[1]{\renewcommand{\@RosStatus}{#1}}
\newcommand{\RosSupersedes}[1]{\renewcommand{\@RosSupersedes}{#1}}
\newcommand{\RosDistribution}[1]{\renewcommand{\@RosDistribution}{#1}}
\newcommand{\RosClearance}[1]{\renewcommand{\@RosClearance}{#1}}
\newcommand{\RosKeywords}[1]{\renewcommand{\@RosKeywords}{#1}}

