{*DUTCH}
 PROCEDURE commrules45_init;EXTERNAL;
{rule:}
{:RADVPAMOUNTMOD}
 FUNCTION COMRADVPAMOUNTMOD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPAMOUNTMOD
*
*
2
ADVP

ADVP
}
{:RADVPAMOUNTMOD}
{rule:}
{:RADVPOMCOMPLMOD}
 FUNCTION COMRADVPOMCOMPLMOD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RADVPOMCOMPLMOD
*
*
2
ADVP
SENTENCE
ADVP
}
{:RADVPOMCOMPLMOD}
{*
SUBGRAMMAR
QPFORMATION
FUNCTION QPFORMATION:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQTOQP1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQTOQP2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH1:=GRAPH
END;
                                                      FUNCTION ELEMGRAPH2:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQPSUPERDEIXIS
ELEMGRAPH2:=result;
END;
                                                      FUNCTION ELEMGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQPCOMPARATIVECOMPLMOD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQPSUPERLATIVECOMPLMOD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      FUNCTION CONCGRAPH3:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQPOMCOMPLMOD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH3:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
AppendCtrlExpr(CONCGRAPH3,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH3:=result;
END;
                                                      FUNCTION ELEMGRAPH4:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TQPNOMCASEASSIGNMENT
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TQPVANCOMPLCASEASSIGNMENT
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH4:=result;
END;
                                                      FUNCTION ELEMGRAPH5:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQPVOOROBJMOD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH5:=result;
END;
                                                      FUNCTION ELEMGRAPH6:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQPAMOUNTMOD
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=option;
result^.ce:=GRAPH;
ELEMGRAPH6:=result;
END;
                                                      FUNCTION ELEMGRAPH7:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQPSUBSTITUTION1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RQPSUBSTITUTION2
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
GRAPH:=result;
END;
                                                      
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=iteration;
result^.ce:=GRAPH;
ELEMGRAPH7:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
AppendCtrlExpr(ELEMGRAPH2,result);
AppendCtrlExpr(ELEMGRAPH3,result);
AppendCtrlExpr(ELEMGRAPH4,result);
AppendCtrlExpr(ELEMGRAPH5,result);
AppendCtrlExpr(ELEMGRAPH6,result);
AppendCtrlExpr(ELEMGRAPH7,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
BEGIN
QPFORMATION:=GRAPH
END;
*
Q
BINDEFPRO
*
QP
*
}
{rule:}
{:RQTOQP1}
 FUNCTION COMRQTOQP1(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQTOQP1
*
*
1
Q
QP
}
{:RQTOQP1}
{rule:}
{:RQTOQP2}
 FUNCTION COMRQTOQP2(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQTOQP2
*
*
1
Q
QP
}
{:RQTOQP2}
{rule:}
{:RQPCOMPARATIVECOMPLMOD}
 FUNCTION COMRQPCOMPARATIVECOMPLMOD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQPCOMPARATIVECOMPLMOD
*
*
2
QP

QP
}
{:RQPCOMPARATIVECOMPLMOD}
{rule:}
{:RQPSUPERLATIVECOMPLMOD}
 FUNCTION COMRQPSUPERLATIVECOMPLMOD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQPSUPERLATIVECOMPLMOD
*
*
2
QP

QP
}
{:RQPSUPERLATIVECOMPLMOD}
{rule:}
{:RQPAMOUNTMOD}
 FUNCTION COMRQPAMOUNTMOD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQPAMOUNTMOD
*
*
2
QP

QP
}
{:RQPAMOUNTMOD}
{rule:}
{:RQPOMCOMPLMOD}
 FUNCTION COMRQPOMCOMPLMOD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQPOMCOMPLMOD
*
*
2
QP
SENTENCE
QP
}
{:RQPOMCOMPLMOD}
{rule:}
{:TQPNOMCASEASSIGNMENT}
 FUNCTION COMTQPNOMCASEASSIGNMENT(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TQPNOMCASEASSIGNMENT
*
*
1
QP
QP
}
{:TQPNOMCASEASSIGNMENT}
{rule:}
{:TQPVANCOMPLCASEASSIGNMENT}
 FUNCTION COMTQPVANCOMPLCASEASSIGNMENT(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TQPVANCOMPLCASEASSIGNMENT
*
*
1
QP
QP
}
{:TQPVANCOMPLCASEASSIGNMENT}
{rule:}
{:RQPVOOROBJMOD}
 FUNCTION COMRQPVOOROBJMOD(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQPVOOROBJMOD
*
*
2
QP

QP
}
{:RQPVOOROBJMOD}
{rule:}
{:RQPSUPERDEIXIS}
 FUNCTION COMRQPSUPERDEIXIS(SUPER:LSDOMAINT_DEIXISTYPE;
Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQPSUPERDEIXIS
*
SUPER
DEIXISTYPE
*
1
QP
QP
}
{:RQPSUPERDEIXIS}
{rule:}
{:RQPSUBSTITUTION1}
 FUNCTION COMRQPSUBSTITUTION1(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQPSUBSTITUTION1
*
LEVEL
INTEGER
*
2
QP
NP
QP
}
{:RQPSUBSTITUTION1}
{rule:}
{:RQPSUBSTITUTION2}
 FUNCTION COMRQPSUBSTITUTION2(LEVEL:INTEGER;
Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RQPSUBSTITUTION2
*
LEVEL
INTEGER
*
2
QP
NP
QP
}
{:RQPSUBSTITUTION2}
{rule:}
{:TQPSUPERDEIXISADAPTATION1}
 FUNCTION COMTQPSUPERDEIXISADAPTATION1(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TQPSUPERDEIXISADAPTATION1
*
*
1
QP
QP
}
{:TQPSUPERDEIXISADAPTATION1}
{rule:}
{:TQPSUPERDEIXISADAPTATION2}
 FUNCTION COMTQPSUPERDEIXISADAPTATION2(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TQPSUPERDEIXISADAPTATION2
*
*
1
QP
QP
}
{:TQPSUPERDEIXISADAPTATION2}
{rule:}
{:TNOQPSUPERDEIXISADAPTATION}
 FUNCTION COMTNOQPSUPERDEIXISADAPTATION(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TNOQPSUPERDEIXISADAPTATION
*
*
1
QP
QP
}
{:TNOQPSUPERDEIXISADAPTATION}

