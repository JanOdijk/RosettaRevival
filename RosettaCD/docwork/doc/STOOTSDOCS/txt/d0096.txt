$FL 12
$PL 274,16
$LD 5
$OP SH=S,HY=1,la=E,ph=r,pn=c,AN=C
$NP 
$UC _
$SC &%
$AC @
$XC ~`

   

            Project ROSETTA : Machine Translation


            Topic     : Rosetta3.linguistics

    ---------------------------------------------------------







         Title        :  Discussiestuk XPPROP-subgrammatica's

         Author       :  Lisette Appelo









         Doc.Nr       :  96

         Date         :  86/04/09

         Status       :  informal

         Supersedes   :  ...

         Distribution :  Iso's, Agnes Mijnhout

         Clearance    :  project

         Keywords     :  XPPROP, ergativiteit,
                         syntactische vertaling
$fn 7

   ---------------------------------------------------------
    
    Philips Research Laboratories

    Nederlandse Philips Bedrijven B.V.

$ph Rosetta          Doc.nr: 96                          date:86/04/09
$LD 4
$Np 1

_Discussiestuk XPPROP-subgrammatica's_

$ _Inleiding_$

$ Dit stukje is een reactie op Jan (93) + aanvullingen m.b.t. de daar
voorgestelde analyse voor XPPROPs en vooral de oplossing voor vertaalproblemen
m.b.t. ergatieve/niet-ergatieve werkwoorden.$

$ _De geneste structuur van XPPROPS_$

$ Een XPPROP in Jans voorstel is een geneste structuur van de volgende vorm:$

   XPPROP[......XP[ ....X ....]]

$ Aan het hebben van een XP-knoop zijn voordelen verbonden.$
$ In Jans voorstel worden XPPROPs in twee stappen gebouwd:$
1. X --> XP
2. XP --> XPPROP
$ Dit derivatieproces wordt weerspiegeld in de derivatieboom. Dat deze
structuur in twee stappen gegenereerd moet worden zou verdedigd kunnen worden
door het feit dat je naast XPPROPs ook XPs hebt die autonoom voorkomen en
dat op deze manier verdubbeling van regels in principe voorkomen wordt.
Maar "autonome" XPs lijken me vooralsnog alleen noodzakelijk voor NPs die geen
functie maar
een entiteit denoteren.$

$ _Ergativiteit_$

$ Een ander punt is, dat de eerste regel, die de XP maakt, werkt op een X en
alle vars die geen subjectvar zijn, en de tweede regel, die de XPPROP maakt,
werkt op de XP en de subjectvar. Dit is geen enkel probleem, als de structuren
van de corresponderende Xen in talen dezelfde XPPROP-structuur hebben. Maar in
gevallen waar dat niet zo is, bijv. bij de vertaling van ergatieve
werkwoorden naar niet-ergatieve werkwoorden en omgekeerd, moeten er vreemde
transformaties uitgevoerd worden.$

$RL 8
voorbeeld: Like/bevallen

                R%1%                                  R'%1%

        x%1%              R%2%                           R'%2%


                 like       x%2%            bevallen   x%2%     x%1%

$ "Like" is niet-ergatief en "bevallen" is wel ergatief. Maar de derivatiebomen
zijn niet isomorf en ik beschouw "like" en "bevallen" wel als vertalingen van
elkaar.$
$ In Jan (93) wordt een oplossing gegeven voor het geval ergatief -->
niet-ergatief (_bevallen_ --> _like_ hier). R%2% is uitgebreid voor dit geval
en de volgende structuur wordt gebouwd:$

               VP

    head    obj        ind.obj

  like         x%2%         X%1% 

$ R%1% wordt ook uitgebreid voor dit geval, nl. met een regel die van deze VP
de volgende structuur maakt:$

              VPPROP

        subj          pred

         x%1%           VP

              head        obj

               like      x%2%     

$ Deze uitbreidingen zijn vreemd in het Engels.$
$ Het omgekeerde komt ook voor natuurlijk:$

niet-ergatief --> ergatief  (_like_ --> _bevallen_)

$ R'%2% wordt uitgebreid zodanig dat hij de volgende VP maakt:$

            VP

      obj       head

       x%2%       bevallen

$ En R'%1% zo dat hij hiervan maakt:$

           VPPROP

               pred

             VP

      obj     ind obj     head


       x%2%      x%1%          bevallen

$ De subjectvar van "like" wordt dus bij "bevallen" als indobjvar in de VP
gezet. Een regel die voor het indobj vreemd is in het Nederlands.$
$ In deze voorbeelden heb ik steeds de natuurlijke brontaalanalyse als
uitgangspunt genomen. Dit houdt in, dat hoe de XPPROP voor bijv. "bevallen"
tot stand komt in generatie ("natuurlijk" of "vreemd") afhangt van de
brontaal. Dit heeft iets asymmetrisch.
Dit komt doordat je een (gedeelte van) een regel hebt die alleen maar bestaat
als aanpassing op een andere taal. Zoiets zou eigenlijk in transfer thuishoren
en niet in de grammatica van een taal. Een expressie kan alleen maar uit twee
verschillende derivatiebomen gegenereerd worden als hij ambigu is.
Je kunt hier ook op twee manieren
analyseren, waarbij in generatie een pad doodloopt, maar dan lijkt het alsof
er een ambiguiteit is waarvan een lezing niet vertaald kan worden
in de andere taal. Dit is
tegen het idee inherente robuustheid van generatie: uit elke derivatieboom die
analyse oplevert komt minstens een vertaling.$
$ Dat zoiets transferachtigs in de grammatica opgenomen wordt kan alleen
verdedigd worden als je claimt dat in dit soort gevallen eigenlijk niet
van vertaling gesproken kan worden en dat dit _robuuste vertaling_ is.$
$ Hiermee zou ergativiteit dus een inherente vertaalrelevante eigenschap van
het werkwoord zijn. Hier ben ik het niet mee eens: ergativiteit lijkt me een
syntactische eigenschap. Er zijn verschillende manieren om de
argumenten (thematische rollen) in een syntactische structuur weer te geven.
Voor werkwoorden met een argument zijn dat bijvoorbeeld
de 1-plaatsig ergatieve en de
intransitieve structuur.$
$ Maar ook als je vindt dat ergativiteit semantisch is, dan vind ik de
oplossing in Jan (93) lelijk omdat kennelijk als robuustheidsregels
(of transferregels?) bedoelde
uitbreidingen niet duidelijk apart van de "normale" regels gehouden zijn.$

$ Een manier om onder deze consequenties uit te komen is de grammatica's van
de talen zodanig aan te passen, dat dit geval zich niet voordoet, nl. door
een van beide structuren voor de corresponderende werkwoorden als de goede
te bestempelen. Zonder onafhankelijke evidentie is dit ad hoc en bovendien
brengt dit veel afstemmingswerk met zich mee, waarbij steeds moet worden
gekeken of zo'n aanpassing niet elders tot problemen leidt.$

$ _Geneste XPPROP-structuur en syntactische ergativiteit_$

$ Het zal duidelijk zijn uit het bovenstaande, dat de eigenschap ergativiteit
invloed heeft op de geneste structuur van XPPROPs en dat deze nesting die ook
in de derivatieboom weerspiegeld wordt problemen oplevert bij vertaling als 
deze eigenschap toevallig niet overeenkomt in talen.$
$ Een manier om toch geneste XPPROPS te hebben, maar deze nesting niet in de
derivatieboom te hebben, is om deze structuur in een keer te maken.$
$ Dit is geen enkel probleem als je ergativiteit als een syntactische
eigenschap beschouwt. De argument variabelen worden afhankelijk van deze
eigenschap over de XPPROP structuur verdeeld. Er zal dus een regel zijn voor
het maken van
een XPROP voor ergatieven en een voor het maken van een XPPROP voor niet-
ergatieven. Slechts een van beide is toepasbaar in generatie en ze hebben
dezelfde betekenis.$
$ Een idee van Rene@' is om te beginnen met een transformatie die de volgende
structuur maakt:$

                         VPPROP

                           VP

                           V

$ Vervolgens worden dan e@'e@'n voor e@'e@'n de argumentvars erin gezet. Dit
heeft
als consequentie dat de derivatiebomen helemaal binair worden, wat door de
sopho's als mooi ervaren wordt.$
$ De regels die een argumentvar in de boom zetten zijn nu gekoppeld aan een
bepaald argument (thematische rol). Voor een bepaald argument kunnen er meer
syntactische regels zijn, bijv.  de regel die ARG1 op de subjectpositie zet
en een die het op de objectpositie zet afhankelijk van de eigenschappen van
een V (ergatief of niet), gerepresenteerd in het verbpattern.$

voorbeeld: verbpattern01

R%i%: x%1% + VPPROP  -->         VPPROP

             VP                VP

             V              V     x%1%

voorbeeld: verbpattern10

R%j%: x%1% + VPPROP   -->      VPPROP

            VP             x%1%       VP

            V                       V

$ De derivatieboom voor dit voorbeeld is:$

                 R%i%, R%j%

                   T

               x%1%      V

$ Waarbij T de transformatie is die de "kale VPPROP" maakt.$
$ In het Xpattern moet dus staan hoe de argumenten (thematische rollen)
in de syntactische structuur van de XPPROP moeten staan.$
$ Door de nesting in de XPPROP is het nu noodzakelijk geworden om vars 
dieper te inserteren dan in Rosetta2 het geval was.$

$ Het is natuurlijk ook mogelijk de meer klassieke methode van Rosetta2 te
hanteren en de X en zijn argumenten in een keer tot een XPPROP-structuur
te maken.$

R%m%:        x%1% + V -->   VPPROP

                         VP

                      V      x%1%


$ _Voorkeur voor syntactische vertaling_$

$ Het lijkt me heel goed mogelijk dat ondanks het feit dat men ergativiteit
niet als vertaalrelevante eigenschap zou willen beschouwen, d.w.z. een
eigenschap die noodzakelijk gelijk moet blijven bij vertaling, men toch een
voorkeur voor een vertaling met gelijke ergativiteit zou kunnen hebben als
de keuze zich voordoet. Er wordt dan voorkeur aan een "syntactische vertaling"
gegeven.$

voorbeeld (JO): it struck me that...  <-->  1. het trof me, dat.. 
                (ergatief)                     (ergatief)
                                            2. het viel me op, dat..
                                               (niet ergatief)

Het verbpattern moet - als dat het wel of niet ergatief zijn uitdrukt -
meevertaald worden in die zin dat het een rol speelt in de bonustoekenning
die voor de prioritering van parafrases zorgt. Het gaat daarmee lijken op
het voorbeeld van "syntactische IL-regels" dat in Carel en Lisette (67) wordt
gegeven (blz. 35).$
$ Het lijkt me dat het prefereren van vertalingen met behoud van syntactische
structuur in de rest van de grammatica nog wel meer voor zal komen
(syntactische categoriee@"n of subgrammatica's bijvoorbeeld). Door het
criterium van behoud van syntactische structuur alleen een rol te
laten spelen bij het toekennen van bonus,
blijft het systeem flexibeler, want als een bepaalde syntactische
structuur in een taal niet bestaat, is er toch een kans op "goede" vertaling.
Een dergelijke aanpak weerhoudt ons ervan om te zeggen dat _graag_ niet in
het Engels vertaald kan worden, omdat het Engels niet een dergelijk _adverbium_
heeft.$
  
$ _Conclusies_$

$ 1) Als de XPPROP-structuur prettig is, dan
moeten we die structuur in Rosetta3 invoeren.$
$ 2) Deze structuur kan ook ingevoerd worden zonder dat het de claim oplegt dat
ergativiteit een vertaalrelevante eigenschap wordt. Hij hoeft namelijk niet
in de derivatieboom weerspiegeld te worden.$
$ 3) Als ergativiteit wel een vertaalrelevante eigenschap zou zijn, dan zijn
vertalingen ergatief <--> niet-ergatief robuuste vertalingen en moeten deze
via aparte robuustheidsregels tot stand komen en niet verstopt in de normale
regels van een grammatica. De in Jan(93) gegeven uitbreidingen zijn typisch
robuustheidsregels voor de VP-subgrammatica en de VPPROP-subgrammatica die er
voor zorgen dat daarna de gewone regels weer toegepast kunnen worden.
(Zie voor ideee@"n over soorten robuustheid Carel (RN8402), forthcoming?)
Omdat er robuustheidsregels zullen zijn toegepast, zal de output toch minder
sterren moeten hebben en dat klopt ook met het feit dat het volgens Jans
theorie geen echte goede vertalingen zijn.$
$ 4) Dat "I like him"  <--> "hij bevalt me" <--> "el me gusta" geen goede
vertaalequivalenten zouden zijn, omdat hun _syntactische_ structuur in bepaalde
theorie niet overeenkomt, lijkt me geen goed vertaalcriterium, omdat dan alleen
talen die _syntactisch_ op elkaar lijken met deze methode vertaald kunnen
worden. Dit lijkt me niet goed voor de extensibiliteit van het systeem m.b.t.
talen. Het lijkt me dan ook zinvoller om naar (het importeren van) een theorie
voor thematische structuren te streven.$
$ 5) Het moet mogelijk zijn om als behoud van syntactische structuur geen
noodzakelijke voorwaarde is voor vertaling, er wel een _voorkeur_ voor
uit te kunnen spreken.$
