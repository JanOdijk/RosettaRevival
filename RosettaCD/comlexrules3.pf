{*DUTCH}
pragma C_include('listree.pf');
pragma C_include('lsstree.pf');
PACKAGE comlexrules3;
WITH listree,lsstree;

{rule:}
{:adjbtosub}
FUNCTION comadjbtosub(Is1:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adjbtosub
1
BADJ
SUBADJ
}
{:adjbtosub}


{rule:}
{:adjposvorm}
FUNCTION comadjposvorm(Is1:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adjposvorm
1
SUBADJ
ADJ
}
{:adjposvorm}


{rule:}
{:adjsPositive}
FUNCTION comadjsPositive(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adjsPositive
2
SUBADJ
SFCAT
ADJ
}
{:adjsPositive}


{rule:}
{:adjcompvorm}
FUNCTION comadjcompvorm(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adjcompvorm
2
SUBADJ
SFCAT
ADJ
}
{:adjcompvorm}


{rule:}
{:adjsComparative}
FUNCTION comadjsComparative(Is1,Is2,Is3:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adjsComparative
3
SUBADJ
SFCAT
SFCAT
ADJ
}
{:adjsComparative}


{rule:}
{:adjsupvorm}
FUNCTION comadjsupvorm(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adjsupvorm
2
SUBADJ
SFCAT
ADJ
}
{:adjsupvorm}


{rule:}
{:adjallersupvorm}
FUNCTION comadjallersupvorm(Is1,Is2,Is3:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adjallersupvorm
3
PFCAT
SUBADJ
SFCAT
ADJ
}
{:adjallersupvorm}


{rule:}
{:adjEform}
FUNCTION comadjEform(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adjEform
2
ADJ
SFCAT
ADJ
}
{:adjEform}


{rule:}
{:adjENform}
FUNCTION comadjENform(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adjENform
2
ADJ
SFCAT
ADJ
}
{:adjENform}


{rule:}
{:badvtosubadv}
FUNCTION combadvtosubadv(Is1:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
badvtosubadv
1
BADV
SUBADV
}
{:badvtosubadv}


{rule:}
{:AdvFromAdj}
FUNCTION comAdvFromAdj(Is1:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
AdvFromAdj
1
SUBADJ
SUBADV
}
{:AdvFromAdj}


{rule:}
{:advposvorm}
FUNCTION comadvposvorm(Is1:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
advposvorm
1
SUBADV
ADV
}
{:advposvorm}


{rule:}
{:advcompvorm}
FUNCTION comadvcompvorm(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
advcompvorm
2
SUBADV
SFCAT
ADV
}
{:advcompvorm}


{rule:}
{:advsupvorm}
FUNCTION comadvsupvorm(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
advsupvorm
2
SUBADV
SFCAT
ADV
}
{:advsupvorm}


{rule:}
{:advallersupvorm}
FUNCTION comadvallersupvorm(Is1,Is2,Is3:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
advallersupvorm
3
PFCAT
SUBADV
SFCAT
ADV
}
{:advallersupvorm}


{rule:}
{:adveform}
FUNCTION comadveform(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
adveform
2
ADV
SFCAT
ADV
}
{:adveform}


{rule:}
{:CARDrule1}
FUNCTION comCARDrule1(Is1:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
CARDrule1
1
DIGIT
CARD
}
{:CARDrule1}


{rule:}
{:CARDrule2}
FUNCTION comCARDrule2(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
CARDrule2
2
CARD
SFCAT
CARD
}
{:CARDrule2}


{rule:}
{:ORDINALrule1}
FUNCTION comORDINALrule1(Is1,Is2:LISTREE_pStree)
                                 :LISTREE_SetOfStrees;
EXTERNAL;
{*
ORDINALrule1
2
CARD
SFCAT
SUBADJ
}
{:ORDINALrule1}

END;
