{*DUTCH}
 PROCEDURE commrules60_init;EXTERNAL;
{*
SUBGRAMMAR
VERBDERIVATION
FUNCTION VERBDERIVATION:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: RBVERBTOSUB
ELEMGRAPH1:=result;
END;
                                                      FUNCTION ELEMGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION GRAPH:LDMRULES_pCtrlExpr;
FUNCTION CONCGRAPH1:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TPARTICLESPELLING0
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH1:=result;
END;
                                                      FUNCTION CONCGRAPH2:LDMRULES_pCtrlExpr;
FUNCTION ELEMGRAPH1:LDMRULES_pCtrlExpr;
VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
NAME: TPARTICLE1
ELEMGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
CONCGRAPH2:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
AppendCtrlExpr(CONCGRAPH2,result);
GRAPH:=result;
END;
                                                      BEGIN
ELEMGRAPH2:=GRAPH
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=concatenation;
InitCtrlExprLst(result);
AppendCtrlExpr(ELEMGRAPH1,result);
AppendCtrlExpr(ELEMGRAPH2,result);
CONCGRAPH1:=result;
END;
                                                      VAR result:LDMRULES_pCtrlExpr;
BEGIN
LDMRULES_makectrlexpr(result);
result^.kind:=alternative;
InitCtrlExprLst(result);
AppendCtrlExpr(CONCGRAPH1,result);
GRAPH:=result;
END;
BEGIN
VERBDERIVATION:=GRAPH
END;
*
BVERB
BVERBSUFF
*
SUBVERB
*
}
{rule:}
{:RBVERBTOSUB}
 FUNCTION COMRBVERBTOSUB(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RBVERBTOSUB
*
*
1
BVERB
SUBVERB
}
{:RBVERBTOSUB}
{rule:}
{:TPARTICLESPELLING0}
 FUNCTION COMTPARTICLESPELLING0(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TPARTICLESPELLING0
*
*
1
SUBVERB
SUBVERB
}
{:TPARTICLESPELLING0}
{rule:}
{:TPARTICLE1}
 FUNCTION COMTPARTICLE1(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
TRANSFORMATION
TPARTICLE1
*
*
1
SUBVERB
SUBVERB
}
{:TPARTICLE1}
{rule:}
{:RNNCOMPOUNDS}
 FUNCTION COMRNNCOMPOUNDS(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RNNCOMPOUNDS
*
*
2
CN
CN
CN
}
{:RNNCOMPOUNDS}
{rule:}
{:RVNCOMPOUNDS}
 FUNCTION COMRVNCOMPOUNDS(Is1:LISTREE_pStree;Is2:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RVNCOMPOUNDS
*
*
2
CN
SUBVERB
CN
}
{:RVNCOMPOUNDS}
{rule:}
{:RNOUNDIM}
 FUNCTION COMRNOUNDIM(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RNOUNDIM
*
*
1
CN
CN
}
{:RNOUNDIM}
{rule:}
{:RPNDIM}
 FUNCTION COMRPNDIM(Is1:LISTREE_pStree
):LISTREE_SetOfStrees;
EXTERNAL;
{*
RULE
RPNDIM
*
*
1
NP
NP
}
{:RPNDIM}

